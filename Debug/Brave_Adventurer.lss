
Brave_Adventurer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  000020dc  00002170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001e79  0080022e  0080022e  0000219e  2**0
                  ALLOC
  3 .stab         0000327c  00000000  00000000  000021a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001475  00000000  00000000  0000541c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006891  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000068a4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  000068e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  000074a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00007fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <CheckMaze+0x84>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec ed       	ldi	r30, 0xDC	; 220
     17e:	f0 e2       	ldi	r31, 0x20	; 32
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ae 32       	cpi	r26, 0x2E	; 46
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	20 e2       	ldi	r18, 0x20	; 32
     192:	ae e2       	ldi	r26, 0x2E	; 46
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a7 3a       	cpi	r26, 0xA7	; 167
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 1e 0c 	call	0x183c	; 0x183c <main>
     1a4:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <FiniteState>:
#include "MapMaze.h"
#include "Obs.h"
#include "USART.h"
#include "util/delay.h"

void FiniteState(state currentState){
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	ab 97       	sbiw	r28, 0x2b	; 43
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	8b a7       	std	Y+43, r24	; 0x2b

	switch(currentState)
     1c2:	8b a5       	ldd	r24, Y+43	; 0x2b
     1c4:	88 2f       	mov	r24, r24
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	82 30       	cpi	r24, 0x02	; 2
     1ca:	91 05       	cpc	r25, r1
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <FiniteState+0x24>
     1ce:	21 c1       	rjmp	.+578    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     1d0:	83 30       	cpi	r24, 0x03	; 3
     1d2:	91 05       	cpc	r25, r1
     1d4:	34 f4       	brge	.+12     	; 0x1e2 <FiniteState+0x36>
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	61 f0       	breq	.+24     	; 0x1f2 <FiniteState+0x46>
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <FiniteState+0x34>
     1de:	8e c0       	rjmp	.+284    	; 0x2fc <FiniteState+0x150>
		case null :

			break;
	}

}
     1e0:	99 c1       	rjmp	.+818    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
#include "USART.h"
#include "util/delay.h"

void FiniteState(state currentState){

	switch(currentState)
     1e2:	84 30       	cpi	r24, 0x04	; 4
     1e4:	91 05       	cpc	r25, r1
     1e6:	09 f4       	brne	.+2      	; 0x1ea <FiniteState+0x3e>
     1e8:	91 c1       	rjmp	.+802    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     1ea:	04 97       	sbiw	r24, 0x04	; 4
     1ec:	0c f4       	brge	.+2      	; 0x1f0 <FiniteState+0x44>
     1ee:	8b c1       	rjmp	.+790    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
			 */
			StateRobo.stateRobo = null;
			break;
		case null :

			break;
     1f0:	91 c1       	rjmp	.+802    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
void FiniteState(state currentState){

	switch(currentState)
	{
		case init :
			CheckObs(CurrentPos.CurX, CurrentPos.CurY);
     1f2:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <CurrentPos+0x2>
     1f6:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <CurrentPos+0x3>
     1fa:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurrentPos>
     1fe:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurrentPos+0x1>
     202:	b9 01       	movw	r22, r18
     204:	0e 94 48 03 	call	0x690	; 0x690 <CheckObs>
			//WhereYouGo();
			//forward();
			//stops();
			StateRobo.stateRobo = lookaround;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <StateRobo>
			printString("init \n");
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	0e 94 16 0a 	call	0x142c	; 0x142c <printString>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	aa e7       	ldi	r26, 0x7A	; 122
     21c:	b4 e4       	ldi	r27, 0x44	; 68
     21e:	89 87       	std	Y+9, r24	; 0x09
     220:	9a 87       	std	Y+10, r25	; 0x0a
     222:	ab 87       	std	Y+11, r26	; 0x0b
     224:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	4a e7       	ldi	r20, 0x7A	; 122
     22c:	55 e4       	ldi	r21, 0x45	; 69
     22e:	69 85       	ldd	r22, Y+9	; 0x09
     230:	7a 85       	ldd	r23, Y+10	; 0x0a
     232:	8b 85       	ldd	r24, Y+11	; 0x0b
     234:	9c 85       	ldd	r25, Y+12	; 0x0c
     236:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     23a:	dc 01       	movw	r26, r24
     23c:	cb 01       	movw	r24, r22
     23e:	8d 87       	std	Y+13, r24	; 0x0d
     240:	9e 87       	std	Y+14, r25	; 0x0e
     242:	af 87       	std	Y+15, r26	; 0x0f
     244:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e8       	ldi	r20, 0x80	; 128
     24c:	5f e3       	ldi	r21, 0x3F	; 63
     24e:	6d 85       	ldd	r22, Y+13	; 0x0d
     250:	7e 85       	ldd	r23, Y+14	; 0x0e
     252:	8f 85       	ldd	r24, Y+15	; 0x0f
     254:	98 89       	ldd	r25, Y+16	; 0x10
     256:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__cmpsf2>
     25a:	88 23       	and	r24, r24
     25c:	2c f4       	brge	.+10     	; 0x268 <FiniteState+0xbc>
		__ticks = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	9a 8b       	std	Y+18, r25	; 0x12
     264:	89 8b       	std	Y+17, r24	; 0x11
     266:	3f c0       	rjmp	.+126    	; 0x2e6 <FiniteState+0x13a>
	else if (__tmp > 65535)
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	3f ef       	ldi	r19, 0xFF	; 255
     26c:	4f e7       	ldi	r20, 0x7F	; 127
     26e:	57 e4       	ldi	r21, 0x47	; 71
     270:	6d 85       	ldd	r22, Y+13	; 0x0d
     272:	7e 85       	ldd	r23, Y+14	; 0x0e
     274:	8f 85       	ldd	r24, Y+15	; 0x0f
     276:	98 89       	ldd	r25, Y+16	; 0x10
     278:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__gesf2>
     27c:	18 16       	cp	r1, r24
     27e:	4c f5       	brge	.+82     	; 0x2d2 <FiniteState+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e2       	ldi	r20, 0x20	; 32
     286:	51 e4       	ldi	r21, 0x41	; 65
     288:	69 85       	ldd	r22, Y+9	; 0x09
     28a:	7a 85       	ldd	r23, Y+10	; 0x0a
     28c:	8b 85       	ldd	r24, Y+11	; 0x0b
     28e:	9c 85       	ldd	r25, Y+12	; 0x0c
     290:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	bc 01       	movw	r22, r24
     29a:	cd 01       	movw	r24, r26
     29c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     2a0:	dc 01       	movw	r26, r24
     2a2:	cb 01       	movw	r24, r22
     2a4:	9a 8b       	std	Y+18, r25	; 0x12
     2a6:	89 8b       	std	Y+17, r24	; 0x11
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <FiniteState+0x11c>
     2aa:	80 e9       	ldi	r24, 0x90	; 144
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	9c 8b       	std	Y+20, r25	; 0x14
     2b0:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b2:	8b 89       	ldd	r24, Y+19	; 0x13
     2b4:	9c 89       	ldd	r25, Y+20	; 0x14
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <FiniteState+0x10a>
     2ba:	9c 8b       	std	Y+20, r25	; 0x14
     2bc:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2be:	89 89       	ldd	r24, Y+17	; 0x11
     2c0:	9a 89       	ldd	r25, Y+18	; 0x12
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	9a 8b       	std	Y+18, r25	; 0x12
     2c6:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c8:	89 89       	ldd	r24, Y+17	; 0x11
     2ca:	9a 89       	ldd	r25, Y+18	; 0x12
     2cc:	89 2b       	or	r24, r25
     2ce:	69 f7       	brne	.-38     	; 0x2aa <FiniteState+0xfe>
			_delay_ms(1000);
			break;
     2d0:	21 c1       	rjmp	.+578    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2d2:	6d 85       	ldd	r22, Y+13	; 0x0d
     2d4:	7e 85       	ldd	r23, Y+14	; 0x0e
     2d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2d8:	98 89       	ldd	r25, Y+16	; 0x10
     2da:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     2de:	dc 01       	movw	r26, r24
     2e0:	cb 01       	movw	r24, r22
     2e2:	9a 8b       	std	Y+18, r25	; 0x12
     2e4:	89 8b       	std	Y+17, r24	; 0x11
     2e6:	89 89       	ldd	r24, Y+17	; 0x11
     2e8:	9a 89       	ldd	r25, Y+18	; 0x12
     2ea:	9e 8b       	std	Y+22, r25	; 0x16
     2ec:	8d 8b       	std	Y+21, r24	; 0x15
     2ee:	8d 89       	ldd	r24, Y+21	; 0x15
     2f0:	9e 89       	ldd	r25, Y+22	; 0x16
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <FiniteState+0x146>
     2f6:	9e 8b       	std	Y+22, r25	; 0x16
     2f8:	8d 8b       	std	Y+21, r24	; 0x15
     2fa:	0c c1       	rjmp	.+536    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		case lookaround :
			if(CheckObs(CurrentPos.CurX, CurrentPos.CurY) == true){
     2fc:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <CurrentPos+0x2>
     300:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <CurrentPos+0x3>
     304:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurrentPos>
     308:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurrentPos+0x1>
     30c:	b9 01       	movw	r22, r18
     30e:	0e 94 48 03 	call	0x690	; 0x690 <CheckObs>
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	41 f4       	brne	.+16     	; 0x326 <FiniteState+0x17a>
				StateRobo.stateRobo = step;
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <StateRobo>
				//forward();
				printString("Lookaround \t");
     31c:	87 e0       	ldi	r24, 0x07	; 7
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	0e 94 16 0a 	call	0x142c	; 0x142c <printString>
     324:	03 c0       	rjmp	.+6      	; 0x32c <FiniteState+0x180>
			}
			else{
				StateRobo.stateRobo = endway;
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <StateRobo>
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	aa e7       	ldi	r26, 0x7A	; 122
     332:	b4 e4       	ldi	r27, 0x44	; 68
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	9a 83       	std	Y+2, r25	; 0x02
     338:	ab 83       	std	Y+3, r26	; 0x03
     33a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	4a e7       	ldi	r20, 0x7A	; 122
     342:	55 e4       	ldi	r21, 0x45	; 69
     344:	69 81       	ldd	r22, Y+1	; 0x01
     346:	7a 81       	ldd	r23, Y+2	; 0x02
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	9c 81       	ldd	r25, Y+4	; 0x04
     34c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	8f 8b       	std	Y+23, r24	; 0x17
     356:	98 8f       	std	Y+24, r25	; 0x18
     358:	a9 8f       	std	Y+25, r26	; 0x19
     35a:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	40 e8       	ldi	r20, 0x80	; 128
     362:	5f e3       	ldi	r21, 0x3F	; 63
     364:	6f 89       	ldd	r22, Y+23	; 0x17
     366:	78 8d       	ldd	r23, Y+24	; 0x18
     368:	89 8d       	ldd	r24, Y+25	; 0x19
     36a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     36c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__cmpsf2>
     370:	88 23       	and	r24, r24
     372:	2c f4       	brge	.+10     	; 0x37e <FiniteState+0x1d2>
		__ticks = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	9c 8f       	std	Y+28, r25	; 0x1c
     37a:	8b 8f       	std	Y+27, r24	; 0x1b
     37c:	3f c0       	rjmp	.+126    	; 0x3fc <FiniteState+0x250>
	else if (__tmp > 65535)
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	3f ef       	ldi	r19, 0xFF	; 255
     382:	4f e7       	ldi	r20, 0x7F	; 127
     384:	57 e4       	ldi	r21, 0x47	; 71
     386:	6f 89       	ldd	r22, Y+23	; 0x17
     388:	78 8d       	ldd	r23, Y+24	; 0x18
     38a:	89 8d       	ldd	r24, Y+25	; 0x19
     38c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     38e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__gesf2>
     392:	18 16       	cp	r1, r24
     394:	4c f5       	brge	.+82     	; 0x3e8 <FiniteState+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e2       	ldi	r20, 0x20	; 32
     39c:	51 e4       	ldi	r21, 0x41	; 65
     39e:	69 81       	ldd	r22, Y+1	; 0x01
     3a0:	7a 81       	ldd	r23, Y+2	; 0x02
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	9c 81       	ldd	r25, Y+4	; 0x04
     3a6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	bc 01       	movw	r22, r24
     3b0:	cd 01       	movw	r24, r26
     3b2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	9c 8f       	std	Y+28, r25	; 0x1c
     3bc:	8b 8f       	std	Y+27, r24	; 0x1b
     3be:	0f c0       	rjmp	.+30     	; 0x3de <FiniteState+0x232>
     3c0:	80 e9       	ldi	r24, 0x90	; 144
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	9e 8f       	std	Y+30, r25	; 0x1e
     3c6:	8d 8f       	std	Y+29, r24	; 0x1d
     3c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <FiniteState+0x220>
     3d0:	9e 8f       	std	Y+30, r25	; 0x1e
     3d2:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	9c 8f       	std	Y+28, r25	; 0x1c
     3dc:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3e2:	89 2b       	or	r24, r25
     3e4:	69 f7       	brne	.-38     	; 0x3c0 <FiniteState+0x214>
			}
			_delay_ms(1000);
			//bacrward();
			//stops();
			//StateRobo.stateRobo = step;
			break;
     3e6:	96 c0       	rjmp	.+300    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e8:	6f 89       	ldd	r22, Y+23	; 0x17
     3ea:	78 8d       	ldd	r23, Y+24	; 0x18
     3ec:	89 8d       	ldd	r24, Y+25	; 0x19
     3ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     3f0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     3f4:	dc 01       	movw	r26, r24
     3f6:	cb 01       	movw	r24, r22
     3f8:	9c 8f       	std	Y+28, r25	; 0x1c
     3fa:	8b 8f       	std	Y+27, r24	; 0x1b
     3fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     400:	98 a3       	std	Y+32, r25	; 0x20
     402:	8f 8f       	std	Y+31, r24	; 0x1f
     404:	8f 8d       	ldd	r24, Y+31	; 0x1f
     406:	98 a1       	ldd	r25, Y+32	; 0x20
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40c:	98 a3       	std	Y+32, r25	; 0x20
     40e:	8f 8f       	std	Y+31, r24	; 0x1f
     410:	81 c0       	rjmp	.+258    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		case step :
			//WhereYouGo();
			//turnleft();
			//stops();
			printString("Step");
     412:	84 e1       	ldi	r24, 0x14	; 20
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	0e 94 16 0a 	call	0x142c	; 0x142c <printString>
			StateRobo.stateRobo = lookaround;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <StateRobo>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	aa e7       	ldi	r26, 0x7A	; 122
     426:	b4 e4       	ldi	r27, 0x44	; 68
     428:	8d 83       	std	Y+5, r24	; 0x05
     42a:	9e 83       	std	Y+6, r25	; 0x06
     42c:	af 83       	std	Y+7, r26	; 0x07
     42e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	4a e7       	ldi	r20, 0x7A	; 122
     436:	55 e4       	ldi	r21, 0x45	; 69
     438:	6d 81       	ldd	r22, Y+5	; 0x05
     43a:	7e 81       	ldd	r23, Y+6	; 0x06
     43c:	8f 81       	ldd	r24, Y+7	; 0x07
     43e:	98 85       	ldd	r25, Y+8	; 0x08
     440:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	89 a3       	std	Y+33, r24	; 0x21
     44a:	9a a3       	std	Y+34, r25	; 0x22
     44c:	ab a3       	std	Y+35, r26	; 0x23
     44e:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e8       	ldi	r20, 0x80	; 128
     456:	5f e3       	ldi	r21, 0x3F	; 63
     458:	69 a1       	ldd	r22, Y+33	; 0x21
     45a:	7a a1       	ldd	r23, Y+34	; 0x22
     45c:	8b a1       	ldd	r24, Y+35	; 0x23
     45e:	9c a1       	ldd	r25, Y+36	; 0x24
     460:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__cmpsf2>
     464:	88 23       	and	r24, r24
     466:	2c f4       	brge	.+10     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		__ticks = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9e a3       	std	Y+38, r25	; 0x26
     46e:	8d a3       	std	Y+37, r24	; 0x25
     470:	3f c0       	rjmp	.+126    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
	else if (__tmp > 65535)
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	3f ef       	ldi	r19, 0xFF	; 255
     476:	4f e7       	ldi	r20, 0x7F	; 127
     478:	57 e4       	ldi	r21, 0x47	; 71
     47a:	69 a1       	ldd	r22, Y+33	; 0x21
     47c:	7a a1       	ldd	r23, Y+34	; 0x22
     47e:	8b a1       	ldd	r24, Y+35	; 0x23
     480:	9c a1       	ldd	r25, Y+36	; 0x24
     482:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__gesf2>
     486:	18 16       	cp	r1, r24
     488:	4c f5       	brge	.+82     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e2       	ldi	r20, 0x20	; 32
     490:	51 e4       	ldi	r21, 0x41	; 65
     492:	6d 81       	ldd	r22, Y+5	; 0x05
     494:	7e 81       	ldd	r23, Y+6	; 0x06
     496:	8f 81       	ldd	r24, Y+7	; 0x07
     498:	98 85       	ldd	r25, Y+8	; 0x08
     49a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     49e:	dc 01       	movw	r26, r24
     4a0:	cb 01       	movw	r24, r22
     4a2:	bc 01       	movw	r22, r24
     4a4:	cd 01       	movw	r24, r26
     4a6:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	9e a3       	std	Y+38, r25	; 0x26
     4b0:	8d a3       	std	Y+37, r24	; 0x25
     4b2:	0f c0       	rjmp	.+30     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4b4:	80 e9       	ldi	r24, 0x90	; 144
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	98 a7       	std	Y+40, r25	; 0x28
     4ba:	8f a3       	std	Y+39, r24	; 0x27
     4bc:	8f a1       	ldd	r24, Y+39	; 0x27
     4be:	98 a5       	ldd	r25, Y+40	; 0x28
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4c4:	98 a7       	std	Y+40, r25	; 0x28
     4c6:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c8:	8d a1       	ldd	r24, Y+37	; 0x25
     4ca:	9e a1       	ldd	r25, Y+38	; 0x26
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	9e a3       	std	Y+38, r25	; 0x26
     4d0:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d2:	8d a1       	ldd	r24, Y+37	; 0x25
     4d4:	9e a1       	ldd	r25, Y+38	; 0x26
     4d6:	89 2b       	or	r24, r25
     4d8:	69 f7       	brne	.-38     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
			_delay_ms(1000);
			break;
     4da:	1c c0       	rjmp	.+56     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4dc:	69 a1       	ldd	r22, Y+33	; 0x21
     4de:	7a a1       	ldd	r23, Y+34	; 0x22
     4e0:	8b a1       	ldd	r24, Y+35	; 0x23
     4e2:	9c a1       	ldd	r25, Y+36	; 0x24
     4e4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	9e a3       	std	Y+38, r25	; 0x26
     4ee:	8d a3       	std	Y+37, r24	; 0x25
     4f0:	8d a1       	ldd	r24, Y+37	; 0x25
     4f2:	9e a1       	ldd	r25, Y+38	; 0x26
     4f4:	9a a7       	std	Y+42, r25	; 0x2a
     4f6:	89 a7       	std	Y+41, r24	; 0x29
     4f8:	89 a5       	ldd	r24, Y+41	; 0x29
     4fa:	9a a5       	ldd	r25, Y+42	; 0x2a
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     500:	9a a7       	std	Y+42, r25	; 0x2a
     502:	89 a7       	std	Y+41, r24	; 0x29
     504:	07 c0       	rjmp	.+14     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			/*
			 * This is very complicated, return to position that still not clear
			 */
			//turnleft();
			//stops();
			StateRobo.stateRobo = init;
     506:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <StateRobo>
			break;
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		case backhome :
			/*
			 * This is very complicated, return to home position
			 *
			 */
			StateRobo.stateRobo = null;
     50c:	85 e0       	ldi	r24, 0x05	; 5
     50e:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <StateRobo>
			break;
     512:	00 00       	nop
		case null :

			break;
	}

}
     514:	00 00       	nop
     516:	ab 96       	adiw	r28, 0x2b	; 43
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <analogWrite>:

#include <avr/io.h>
#include "GeneralFunc.h"
#include "PinDefined.h"

void analogWrite(uint8_t pin, uint8_t val){
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	1f 92       	push	r1
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	89 83       	std	Y+1, r24	; 0x01
     536:	6a 83       	std	Y+2, r22	; 0x02

  DDRH |= (DDRH & 0x00) | (pin & 0xFF);
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	48 2f       	mov	r20, r24
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	31 e0       	ldi	r19, 0x01	; 1
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	32 2f       	mov	r19, r18
     554:	24 2f       	mov	r18, r20
     556:	23 2b       	or	r18, r19
     558:	fc 01       	movw	r30, r24
     55a:	20 83       	st	Z, r18

  switch(pin){
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	88 30       	cpi	r24, 0x08	; 8
     564:	91 05       	cpc	r25, r1
     566:	19 f0       	breq	.+6      	; 0x56e <analogWrite+0x46>
     568:	40 97       	sbiw	r24, 0x10	; 16
     56a:	59 f0       	breq	.+22     	; 0x582 <analogWrite+0x5a>
		OCR4A = val;
  	  break;
  	  case(0x10):
		OCR4B = val;
  }
}
     56c:	12 c0       	rjmp	.+36     	; 0x592 <analogWrite+0x6a>

  DDRH |= (DDRH & 0x00) | (pin & 0xFF);

  switch(pin){
  	  case(0x08):
		OCR4A = val;
     56e:	88 ea       	ldi	r24, 0xA8	; 168
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	2a 81       	ldd	r18, Y+2	; 0x02
     574:	22 2f       	mov	r18, r18
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	fc 01       	movw	r30, r24
     57a:	31 83       	std	Z+1, r19	; 0x01
     57c:	20 83       	st	Z, r18
  	  break;
     57e:	00 00       	nop
  	  case(0x10):
		OCR4B = val;
  }
}
     580:	08 c0       	rjmp	.+16     	; 0x592 <analogWrite+0x6a>
  switch(pin){
  	  case(0x08):
		OCR4A = val;
  	  break;
  	  case(0x10):
		OCR4B = val;
     582:	8a ea       	ldi	r24, 0xAA	; 170
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	2a 81       	ldd	r18, Y+2	; 0x02
     588:	22 2f       	mov	r18, r18
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	fc 01       	movw	r30, r24
     58e:	31 83       	std	Z+1, r19	; 0x01
     590:	20 83       	st	Z, r18
  }
}
     592:	00 00       	nop
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <pwm_init>:

void pwm_init(){
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
  TCCR4A |= _BV(COM4A1) | _BV(COM4B1) | _BV(WGM41) | _BV(WGM40);
     5a6:	80 ea       	ldi	r24, 0xA0	; 160
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	20 ea       	ldi	r18, 0xA0	; 160
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	20 81       	ld	r18, Z
     5b2:	23 6a       	ori	r18, 0xA3	; 163
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
  TCCR4B |= _BV(WGM42)| _BV(CS41) | _BV(CS40);
     5b8:	81 ea       	ldi	r24, 0xA1	; 161
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	21 ea       	ldi	r18, 0xA1	; 161
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	f9 01       	movw	r30, r18
     5c2:	20 81       	ld	r18, Z
     5c4:	2b 60       	ori	r18, 0x0B	; 11
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18

  // TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
  // TCCR2B |= _BV(WGM22) | _BV(CS20);
}
     5ca:	00 00       	nop
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <analogRead>:

uint16_t analogRead(uint8_t port){
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xF0) | (port & 0x0F);
     5de:	8c e7       	ldi	r24, 0x7C	; 124
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	2c e7       	ldi	r18, 0x7C	; 124
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	32 2f       	mov	r19, r18
     5ec:	30 7f       	andi	r19, 0xF0	; 240
     5ee:	29 81       	ldd	r18, Y+1	; 0x01
     5f0:	2f 70       	andi	r18, 0x0F	; 15
     5f2:	23 2b       	or	r18, r19
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18

	ADCSRA |= (1 << ADSC);
     5f8:	8a e7       	ldi	r24, 0x7A	; 122
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	2a e7       	ldi	r18, 0x7A	; 122
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	20 64       	ori	r18, 0x40	; 64
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18

	while(ADCSRA & (1<<ADSC));
     60a:	00 00       	nop
     60c:	8a e7       	ldi	r24, 0x7A	; 122
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	fc 01       	movw	r30, r24
     612:	80 81       	ld	r24, Z
     614:	88 2f       	mov	r24, r24
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	80 74       	andi	r24, 0x40	; 64
     61a:	99 27       	eor	r25, r25
     61c:	89 2b       	or	r24, r25
     61e:	b1 f7       	brne	.-20     	; 0x60c <analogRead+0x3a>

	return ADC;
     620:	88 e7       	ldi	r24, 0x78	; 120
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
}
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <adc_init>:

void adc_init(){
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= _BV(REFS0);
     63a:	8c e7       	ldi	r24, 0x7C	; 124
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	2c e7       	ldi	r18, 0x7C	; 124
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	f9 01       	movw	r30, r18
     644:	20 81       	ld	r18, Z
     646:	20 64       	ori	r18, 0x40	; 64
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
	ADCSRA |= _BV(ADPS2) | _BV(ADEN);
     64c:	8a e7       	ldi	r24, 0x7A	; 122
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	2a e7       	ldi	r18, 0x7A	; 122
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	f9 01       	movw	r30, r18
     656:	20 81       	ld	r18, Z
     658:	24 68       	ori	r18, 0x84	; 132
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
}
     65e:	00 00       	nop
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <mapping>:

uint8_t mapping(uint16_t val){
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	00 d0       	rcall	.+0      	; 0x66c <mapping+0x6>
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	9b 83       	std	Y+3, r25	; 0x03
     672:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t mapped;

	mapped = val / (1023 / 255);
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	9b 81       	ldd	r25, Y+3	; 0x03
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	96 95       	lsr	r25
     67e:	87 95       	ror	r24
     680:	89 83       	std	Y+1, r24	; 0x01

	return mapped;
     682:	89 81       	ldd	r24, Y+1	; 0x01
}
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <CheckObs>:
#include "MapMaze.h"
#include "PinDefined.h"
#include "Obs.h"
#include <math.h>

bool CheckObs(uint16_t posX,uint16_t posY ){
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	00 d0       	rcall	.+0      	; 0x696 <CheckObs+0x6>
     696:	1f 92       	push	r1
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	9a 83       	std	Y+2, r25	; 0x02
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	7c 83       	std	Y+4, r23	; 0x04
     6a2:	6b 83       	std	Y+3, r22	; 0x03
	printString("CheckOBS");
     6a4:	89 e1       	ldi	r24, 0x19	; 25
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	0e 94 16 0a 	call	0x142c	; 0x142c <printString>
	if (headdirect.px == head){
     6ac:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <headdirect>
     6b0:	88 23       	and	r24, r24
     6b2:	e9 f5       	brne	.+122    	; 0x72e <CheckObs+0x9e>
		if(readObs(ObstacleL) == 1){
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	81 f4       	brne	.+32     	; 0x6de <CheckObs+0x4e>
			UpdateArray(posX, (posY + 1));
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	9c 01       	movw	r18, r24
     6c4:	2f 5f       	subi	r18, 0xFF	; 255
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	b9 01       	movw	r22, r18
     6ce:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			//forward();
			DirToGo.goesto = positifY;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <DirToGo>
			DirToGo.gomotor = goLeft;
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <DirToGo+0x1>
		}
		if(readObs(ObstacleR) == 0){
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     6e4:	88 23       	and	r24, r24
     6e6:	81 f4       	brne	.+32     	; 0x708 <CheckObs+0x78>
			UpdateArray(posX, (posY - 1));
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	9c 81       	ldd	r25, Y+4	; 0x04
     6ec:	9c 01       	movw	r18, r24
     6ee:	21 50       	subi	r18, 0x01	; 1
     6f0:	31 09       	sbc	r19, r1
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	b9 01       	movw	r22, r18
     6f8:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			DirToGo.goesto = negatifY;
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <DirToGo>
			DirToGo.gomotor = goRight;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <DirToGo+0x1>
		}
		if(readObs(ObstacleF0) == 0){
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     70e:	88 23       	and	r24, r24
     710:	09 f0       	breq	.+2      	; 0x714 <CheckObs+0x84>
     712:	9c c0       	rjmp	.+312    	; 0x84c <CheckObs+0x1bc>
			UpdateArray((posX + 1), posY);
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	2b 81       	ldd	r18, Y+3	; 0x03
     71c:	3c 81       	ldd	r19, Y+4	; 0x04
     71e:	b9 01       	movw	r22, r18
     720:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			DirToGo.goesto = positifX;
     724:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <DirToGo>
			DirToGo.gomotor = goForward;
     728:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <DirToGo+0x1>
     72c:	8f c0       	rjmp	.+286    	; 0x84c <CheckObs+0x1bc>
		else{
			//stops();
		}

	}
	else if (headdirect.py == head){
     72e:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <headdirect+0x1>
     732:	88 23       	and	r24, r24
     734:	59 f5       	brne	.+86     	; 0x78c <CheckObs+0xfc>
		if(readObs(ObstacleL) == 1){
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	41 f4       	brne	.+16     	; 0x750 <CheckObs+0xc0>
			UpdateArray((posX -1), posY);
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	2b 81       	ldd	r18, Y+3	; 0x03
     748:	3c 81       	ldd	r19, Y+4	; 0x04
     74a:	b9 01       	movw	r22, r18
     74c:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			//DirToGo.goesto = negatifX;
			//DirToGo.gomotor = goLeft;
		}
		if(readObs(ObstacleR) == 1){
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	41 f4       	brne	.+16     	; 0x76a <CheckObs+0xda>
			UpdateArray((posX + 1), posY);
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	9a 81       	ldd	r25, Y+2	; 0x02
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	2b 81       	ldd	r18, Y+3	; 0x03
     762:	3c 81       	ldd	r19, Y+4	; 0x04
     764:	b9 01       	movw	r22, r18
     766:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			//DirToGo.goesto = positifX;
			//DirToGo.gomotor = goRight;
		}
		if(readObs(ObstacleF0) == 1){
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	09 f0       	breq	.+2      	; 0x776 <CheckObs+0xe6>
     774:	6b c0       	rjmp	.+214    	; 0x84c <CheckObs+0x1bc>
			UpdateArray(posX, (posY + 1));
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	9c 81       	ldd	r25, Y+4	; 0x04
     77a:	9c 01       	movw	r18, r24
     77c:	2f 5f       	subi	r18, 0xFF	; 255
     77e:	3f 4f       	sbci	r19, 0xFF	; 255
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	9a 81       	ldd	r25, Y+2	; 0x02
     784:	b9 01       	movw	r22, r18
     786:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
     78a:	60 c0       	rjmp	.+192    	; 0x84c <CheckObs+0x1bc>
			//DirToGo.goesto = positifY;
			//DirToGo.gomotor = goForward;
		}
	}
	else if (headdirect.mx == head){
     78c:	80 91 9f 20 	lds	r24, 0x209F	; 0x80209f <headdirect+0x2>
     790:	88 23       	and	r24, r24
     792:	61 f5       	brne	.+88     	; 0x7ec <CheckObs+0x15c>
		if(readObs(ObstacleL) == 1){
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	51 f4       	brne	.+20     	; 0x7b2 <CheckObs+0x122>
			UpdateArray(posX, (posY - 1));
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	9c 81       	ldd	r25, Y+4	; 0x04
     7a2:	9c 01       	movw	r18, r24
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	31 09       	sbc	r19, r1
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	b9 01       	movw	r22, r18
     7ae:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			//DirToGo.goesto = negatifY;
			//DirToGo.gomotor = goLeft;
		}
		if(readObs(ObstacleR) == 1){
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	51 f4       	brne	.+20     	; 0x7d0 <CheckObs+0x140>
			UpdateArray(posX, (posY + 1));
     7bc:	8b 81       	ldd	r24, Y+3	; 0x03
     7be:	9c 81       	ldd	r25, Y+4	; 0x04
     7c0:	9c 01       	movw	r18, r24
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	b9 01       	movw	r22, r18
     7cc:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			//DirToGo.goesto = positifY;
			//DirToGo.gomotor = goRight;
		}
		if(readObs(ObstacleF0) == 1){
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	c9 f5       	brne	.+114    	; 0x84c <CheckObs+0x1bc>
			UpdateArray((posX - 1), posY);
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	2b 81       	ldd	r18, Y+3	; 0x03
     7e2:	3c 81       	ldd	r19, Y+4	; 0x04
     7e4:	b9 01       	movw	r22, r18
     7e6:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
     7ea:	30 c0       	rjmp	.+96     	; 0x84c <CheckObs+0x1bc>
			//DirToGo.goesto = negatifX;
			//DirToGo.gomotor = goForward;
		}
	}
	else if (headdirect.my == head){
     7ec:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <headdirect+0x3>
     7f0:	88 23       	and	r24, r24
     7f2:	51 f5       	brne	.+84     	; 0x848 <CheckObs+0x1b8>
		if(readObs(ObstacleL) == 1){
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	41 f4       	brne	.+16     	; 0x80e <CheckObs+0x17e>
			UpdateArray((posX + 1), posY);
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	2b 81       	ldd	r18, Y+3	; 0x03
     806:	3c 81       	ldd	r19, Y+4	; 0x04
     808:	b9 01       	movw	r22, r18
     80a:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			//DirToGo.goesto = positifX;
			//DirToGo.gomotor = goLeft;
		}
		if(readObs(ObstacleR) == 1){
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	41 f4       	brne	.+16     	; 0x828 <CheckObs+0x198>
			UpdateArray((posX - 1), posY);
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	9a 81       	ldd	r25, Y+2	; 0x02
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	2b 81       	ldd	r18, Y+3	; 0x03
     820:	3c 81       	ldd	r19, Y+4	; 0x04
     822:	b9 01       	movw	r22, r18
     824:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
			//DirToGo.goesto = negatifX;
			//DirToGo.gomotor = goRight;
		}
		if(readObs(ObstacleF0) == 1){
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <readObs>
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	69 f4       	brne	.+26     	; 0x84c <CheckObs+0x1bc>
			UpdateArray(posX, (posY - 1));
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	9c 81       	ldd	r25, Y+4	; 0x04
     836:	9c 01       	movw	r18, r24
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	31 09       	sbc	r19, r1
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	b9 01       	movw	r22, r18
     842:	0e 94 2e 04 	call	0x85c	; 0x85c <UpdateArray>
     846:	02 c0       	rjmp	.+4      	; 0x84c <CheckObs+0x1bc>
		}
	}
	else {
		//DirToGo.goesto = goNull;
		//DirToGo.gomotor = goBack;
		return false;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	01 c0       	rjmp	.+2      	; 0x84e <CheckObs+0x1be>
	}
	return true;
     84c:	81 e0       	ldi	r24, 0x01	; 1
}
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <UpdateArray>:

bool UpdateArray(uint16_t posX, uint16_t posY) {
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	00 d0       	rcall	.+0      	; 0x862 <UpdateArray+0x6>
     862:	1f 92       	push	r1
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	9a 83       	std	Y+2, r25	; 0x02
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	7c 83       	std	Y+4, r23	; 0x04
     86e:	6b 83       	std	Y+3, r22	; 0x03
	return maze[posX][posY].isClear = true ;
     870:	2b 81       	ldd	r18, Y+3	; 0x03
     872:	3c 81       	ldd	r19, Y+4	; 0x04
     874:	49 81       	ldd	r20, Y+1	; 0x01
     876:	5a 81       	ldd	r21, Y+2	; 0x02
     878:	c9 01       	movw	r24, r18
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	68 ed       	ldi	r22, 0xD8	; 216
     888:	64 9f       	mul	r22, r20
     88a:	90 01       	movw	r18, r0
     88c:	65 9f       	mul	r22, r21
     88e:	30 0d       	add	r19, r0
     890:	11 24       	eor	r1, r1
     892:	82 0f       	add	r24, r18
     894:	93 1f       	adc	r25, r19
     896:	84 5c       	subi	r24, 0xC4	; 196
     898:	9d 4f       	sbci	r25, 0xFD	; 253
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
     8a0:	2b 81       	ldd	r18, Y+3	; 0x03
     8a2:	3c 81       	ldd	r19, Y+4	; 0x04
     8a4:	49 81       	ldd	r20, Y+1	; 0x01
     8a6:	5a 81       	ldd	r21, Y+2	; 0x02
     8a8:	c9 01       	movw	r24, r18
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	82 0f       	add	r24, r18
     8b0:	93 1f       	adc	r25, r19
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	68 ed       	ldi	r22, 0xD8	; 216
     8b8:	64 9f       	mul	r22, r20
     8ba:	90 01       	movw	r18, r0
     8bc:	65 9f       	mul	r22, r21
     8be:	30 0d       	add	r19, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	84 5c       	subi	r24, 0xC4	; 196
     8c8:	9d 4f       	sbci	r25, 0xFD	; 253
     8ca:	fc 01       	movw	r30, r24
     8cc:	80 81       	ld	r24, Z
}
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <CheckMaze>:

uint16_t * CheckMaze(uint16_t CurposX, uint16_t CurposY){
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	2c 97       	sbiw	r28, 0x0c	; 12
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	9a 87       	std	Y+10, r25	; 0x0a
     8f2:	89 87       	std	Y+9, r24	; 0x09
     8f4:	7c 87       	std	Y+12, r23	; 0x0c
     8f6:	6b 87       	std	Y+11, r22	; 0x0b
	uint16_t  c , r , EuD , minEuD = SquareMaze;
     8f8:	84 e2       	ldi	r24, 0x24	; 36
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9e 83       	std	Y+6, r25	; 0x06
     8fe:	8d 83       	std	Y+5, r24	; 0x05
	static uint16_t pos[2];
	for(c = 0 ; c < SquareMaze ; c++){
     900:	1a 82       	std	Y+2, r1	; 0x02
     902:	19 82       	std	Y+1, r1	; 0x01
     904:	67 c0       	rjmp	.+206    	; 0x9d4 <CheckMaze+0xf8>
		for(r = 0 ; r < SquareMaze ; r++){
     906:	1c 82       	std	Y+4, r1	; 0x04
     908:	1b 82       	std	Y+3, r1	; 0x03
     90a:	5a c0       	rjmp	.+180    	; 0x9c0 <CheckMaze+0xe4>
			if(maze[c][r].isClear == true && maze[c][r].isDone == false) {
     90c:	2b 81       	ldd	r18, Y+3	; 0x03
     90e:	3c 81       	ldd	r19, Y+4	; 0x04
     910:	49 81       	ldd	r20, Y+1	; 0x01
     912:	5a 81       	ldd	r21, Y+2	; 0x02
     914:	c9 01       	movw	r24, r18
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	82 0f       	add	r24, r18
     91c:	93 1f       	adc	r25, r19
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	68 ed       	ldi	r22, 0xD8	; 216
     924:	64 9f       	mul	r22, r20
     926:	90 01       	movw	r18, r0
     928:	65 9f       	mul	r22, r21
     92a:	30 0d       	add	r19, r0
     92c:	11 24       	eor	r1, r1
     92e:	82 0f       	add	r24, r18
     930:	93 1f       	adc	r25, r19
     932:	84 5c       	subi	r24, 0xC4	; 196
     934:	9d 4f       	sbci	r25, 0xFD	; 253
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	e1 f5       	brne	.+120    	; 0x9b6 <CheckMaze+0xda>
     93e:	2b 81       	ldd	r18, Y+3	; 0x03
     940:	3c 81       	ldd	r19, Y+4	; 0x04
     942:	49 81       	ldd	r20, Y+1	; 0x01
     944:	5a 81       	ldd	r21, Y+2	; 0x02
     946:	c9 01       	movw	r24, r18
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	82 0f       	add	r24, r18
     94e:	93 1f       	adc	r25, r19
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	68 ed       	ldi	r22, 0xD8	; 216
     956:	64 9f       	mul	r22, r20
     958:	90 01       	movw	r18, r0
     95a:	65 9f       	mul	r22, r21
     95c:	30 0d       	add	r19, r0
     95e:	11 24       	eor	r1, r1
     960:	82 0f       	add	r24, r18
     962:	93 1f       	adc	r25, r19
     964:	83 5c       	subi	r24, 0xC3	; 195
     966:	9d 4f       	sbci	r25, 0xFD	; 253
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	88 23       	and	r24, r24
     96e:	19 f5       	brne	.+70     	; 0x9b6 <CheckMaze+0xda>
				EuD = EcluideanDist(CurposX,CurposY,c,r);
     970:	2b 81       	ldd	r18, Y+3	; 0x03
     972:	3c 81       	ldd	r19, Y+4	; 0x04
     974:	49 81       	ldd	r20, Y+1	; 0x01
     976:	5a 81       	ldd	r21, Y+2	; 0x02
     978:	6b 85       	ldd	r22, Y+11	; 0x0b
     97a:	7c 85       	ldd	r23, Y+12	; 0x0c
     97c:	89 85       	ldd	r24, Y+9	; 0x09
     97e:	9a 85       	ldd	r25, Y+10	; 0x0a
     980:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <EcluideanDist>
     984:	98 87       	std	Y+8, r25	; 0x08
     986:	8f 83       	std	Y+7, r24	; 0x07
				if(EuD < minEuD){
     988:	2f 81       	ldd	r18, Y+7	; 0x07
     98a:	38 85       	ldd	r19, Y+8	; 0x08
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	9e 81       	ldd	r25, Y+6	; 0x06
     990:	28 17       	cp	r18, r24
     992:	39 07       	cpc	r19, r25
     994:	80 f4       	brcc	.+32     	; 0x9b6 <CheckMaze+0xda>
					pos[0] = c;
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	9a 81       	ldd	r25, Y+2	; 0x02
     99a:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <__data_end+0x1>
     99e:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
					pos[1] = r;
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <__data_end+0x3>
     9aa:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end+0x2>
					minEuD = EuD;
     9ae:	8f 81       	ldd	r24, Y+7	; 0x07
     9b0:	98 85       	ldd	r25, Y+8	; 0x08
     9b2:	9e 83       	std	Y+6, r25	; 0x06
     9b4:	8d 83       	std	Y+5, r24	; 0x05

uint16_t * CheckMaze(uint16_t CurposX, uint16_t CurposY){
	uint16_t  c , r , EuD , minEuD = SquareMaze;
	static uint16_t pos[2];
	for(c = 0 ; c < SquareMaze ; c++){
		for(r = 0 ; r < SquareMaze ; r++){
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	84 97       	sbiw	r24, 0x24	; 36
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <CheckMaze+0xee>
     9c8:	a1 cf       	rjmp	.-190    	; 0x90c <CheckMaze+0x30>
}

uint16_t * CheckMaze(uint16_t CurposX, uint16_t CurposY){
	uint16_t  c , r , EuD , minEuD = SquareMaze;
	static uint16_t pos[2];
	for(c = 0 ; c < SquareMaze ; c++){
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	9a 81       	ldd	r25, Y+2	; 0x02
     9d8:	84 97       	sbiw	r24, 0x24	; 36
     9da:	08 f4       	brcc	.+2      	; 0x9de <CheckMaze+0x102>
     9dc:	94 cf       	rjmp	.-216    	; 0x906 <CheckMaze+0x2a>
					minEuD = EuD;
				}
			}
		}
	}
	return pos;
     9de:	8e e2       	ldi	r24, 0x2E	; 46
     9e0:	92 e0       	ldi	r25, 0x02	; 2
}
     9e2:	2c 96       	adiw	r28, 0x0c	; 12
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <EcluideanDist>:

uint16_t EcluideanDist(uint16_t CurposX, uint16_t CurposY, uint16_t posX, uint16_t posY){
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	2a 97       	sbiw	r28, 0x0a	; 10
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	9c 83       	std	Y+4, r25	; 0x04
     a12:	8b 83       	std	Y+3, r24	; 0x03
     a14:	7e 83       	std	Y+6, r23	; 0x06
     a16:	6d 83       	std	Y+5, r22	; 0x05
     a18:	58 87       	std	Y+8, r21	; 0x08
     a1a:	4f 83       	std	Y+7, r20	; 0x07
     a1c:	3a 87       	std	Y+10, r19	; 0x0a
     a1e:	29 87       	std	Y+9, r18	; 0x09
	uint16_t d;
	d = sqrt(pow((CurposX - posX) , 2) + pow((CurposY - posY), 2));
     a20:	2b 81       	ldd	r18, Y+3	; 0x03
     a22:	3c 81       	ldd	r19, Y+4	; 0x04
     a24:	8f 81       	ldd	r24, Y+7	; 0x07
     a26:	98 85       	ldd	r25, Y+8	; 0x08
     a28:	a9 01       	movw	r20, r18
     a2a:	48 1b       	sub	r20, r24
     a2c:	59 0b       	sbc	r21, r25
     a2e:	ca 01       	movw	r24, r20
     a30:	cc 01       	movw	r24, r24
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__floatunsisf>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	50 e4       	ldi	r21, 0x40	; 64
     a4a:	bc 01       	movw	r22, r24
     a4c:	cd 01       	movw	r24, r26
     a4e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <pow>
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
     a56:	2d 81       	ldd	r18, Y+5	; 0x05
     a58:	3e 81       	ldd	r19, Y+6	; 0x06
     a5a:	89 85       	ldd	r24, Y+9	; 0x09
     a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a5e:	a9 01       	movw	r20, r18
     a60:	48 1b       	sub	r20, r24
     a62:	59 0b       	sbc	r21, r25
     a64:	ca 01       	movw	r24, r20
     a66:	cc 01       	movw	r24, r24
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	bc 01       	movw	r22, r24
     a6e:	cd 01       	movw	r24, r26
     a70:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__floatunsisf>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	50 e4       	ldi	r21, 0x40	; 64
     a80:	bc 01       	movw	r22, r24
     a82:	cd 01       	movw	r24, r26
     a84:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <pow>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	9c 01       	movw	r18, r24
     a8e:	ad 01       	movw	r20, r26
     a90:	c7 01       	movw	r24, r14
     a92:	b6 01       	movw	r22, r12
     a94:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__addsf3>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	bc 01       	movw	r22, r24
     a9e:	cd 01       	movw	r24, r26
     aa0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <sqrt>
     aa4:	dc 01       	movw	r26, r24
     aa6:	cb 01       	movw	r24, r22
     aa8:	bc 01       	movw	r22, r24
     aaa:	cd 01       	movw	r24, r26
     aac:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	9a 83       	std	Y+2, r25	; 0x02
     ab6:	89 83       	std	Y+1, r24	; 0x01
	return d;
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
     aba:	9a 81       	ldd	r25, Y+2	; 0x02
}
     abc:	2a 96       	adiw	r28, 0x0a	; 10
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	08 95       	ret

00000ad6 <initMaze>:

void initMaze(){
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <initMaze+0x6>
     adc:	1f 92       	push	r1
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
	uint16_t c , r ;
	for(c = 0 ; c < SquareMaze ; c++){
     ae2:	1a 82       	std	Y+2, r1	; 0x02
     ae4:	19 82       	std	Y+1, r1	; 0x01
     ae6:	9c c0       	rjmp	.+312    	; 0xc20 <initMaze+0x14a>
		for(r = 0 ; r < SquareMaze ; r++){
     ae8:	1c 82       	std	Y+4, r1	; 0x04
     aea:	1b 82       	std	Y+3, r1	; 0x03
     aec:	8f c0       	rjmp	.+286    	; 0xc0c <initMaze+0x136>
			maze[c][r].px = false;
     aee:	2b 81       	ldd	r18, Y+3	; 0x03
     af0:	3c 81       	ldd	r19, Y+4	; 0x04
     af2:	49 81       	ldd	r20, Y+1	; 0x01
     af4:	5a 81       	ldd	r21, Y+2	; 0x02
     af6:	c9 01       	movw	r24, r18
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	82 0f       	add	r24, r18
     afe:	93 1f       	adc	r25, r19
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	68 ed       	ldi	r22, 0xD8	; 216
     b06:	64 9f       	mul	r22, r20
     b08:	90 01       	movw	r18, r0
     b0a:	65 9f       	mul	r22, r21
     b0c:	30 0d       	add	r19, r0
     b0e:	11 24       	eor	r1, r1
     b10:	82 0f       	add	r24, r18
     b12:	93 1f       	adc	r25, r19
     b14:	88 5c       	subi	r24, 0xC8	; 200
     b16:	9d 4f       	sbci	r25, 0xFD	; 253
     b18:	fc 01       	movw	r30, r24
     b1a:	10 82       	st	Z, r1
			maze[c][r].py = false;
     b1c:	2b 81       	ldd	r18, Y+3	; 0x03
     b1e:	3c 81       	ldd	r19, Y+4	; 0x04
     b20:	49 81       	ldd	r20, Y+1	; 0x01
     b22:	5a 81       	ldd	r21, Y+2	; 0x02
     b24:	c9 01       	movw	r24, r18
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	82 0f       	add	r24, r18
     b2c:	93 1f       	adc	r25, r19
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	68 ed       	ldi	r22, 0xD8	; 216
     b34:	64 9f       	mul	r22, r20
     b36:	90 01       	movw	r18, r0
     b38:	65 9f       	mul	r22, r21
     b3a:	30 0d       	add	r19, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	82 0f       	add	r24, r18
     b40:	93 1f       	adc	r25, r19
     b42:	87 5c       	subi	r24, 0xC7	; 199
     b44:	9d 4f       	sbci	r25, 0xFD	; 253
     b46:	fc 01       	movw	r30, r24
     b48:	10 82       	st	Z, r1
			maze[c][r].mx = false;
     b4a:	2b 81       	ldd	r18, Y+3	; 0x03
     b4c:	3c 81       	ldd	r19, Y+4	; 0x04
     b4e:	49 81       	ldd	r20, Y+1	; 0x01
     b50:	5a 81       	ldd	r21, Y+2	; 0x02
     b52:	c9 01       	movw	r24, r18
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	68 ed       	ldi	r22, 0xD8	; 216
     b62:	64 9f       	mul	r22, r20
     b64:	90 01       	movw	r18, r0
     b66:	65 9f       	mul	r22, r21
     b68:	30 0d       	add	r19, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	86 5c       	subi	r24, 0xC6	; 198
     b72:	9d 4f       	sbci	r25, 0xFD	; 253
     b74:	fc 01       	movw	r30, r24
     b76:	10 82       	st	Z, r1
			maze[c][r].my = false;
     b78:	2b 81       	ldd	r18, Y+3	; 0x03
     b7a:	3c 81       	ldd	r19, Y+4	; 0x04
     b7c:	49 81       	ldd	r20, Y+1	; 0x01
     b7e:	5a 81       	ldd	r21, Y+2	; 0x02
     b80:	c9 01       	movw	r24, r18
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	82 0f       	add	r24, r18
     b88:	93 1f       	adc	r25, r19
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	68 ed       	ldi	r22, 0xD8	; 216
     b90:	64 9f       	mul	r22, r20
     b92:	90 01       	movw	r18, r0
     b94:	65 9f       	mul	r22, r21
     b96:	30 0d       	add	r19, r0
     b98:	11 24       	eor	r1, r1
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	85 5c       	subi	r24, 0xC5	; 197
     ba0:	9d 4f       	sbci	r25, 0xFD	; 253
     ba2:	fc 01       	movw	r30, r24
     ba4:	10 82       	st	Z, r1
			maze[c][r].isClear = false;
     ba6:	2b 81       	ldd	r18, Y+3	; 0x03
     ba8:	3c 81       	ldd	r19, Y+4	; 0x04
     baa:	49 81       	ldd	r20, Y+1	; 0x01
     bac:	5a 81       	ldd	r21, Y+2	; 0x02
     bae:	c9 01       	movw	r24, r18
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	82 0f       	add	r24, r18
     bb6:	93 1f       	adc	r25, r19
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	68 ed       	ldi	r22, 0xD8	; 216
     bbe:	64 9f       	mul	r22, r20
     bc0:	90 01       	movw	r18, r0
     bc2:	65 9f       	mul	r22, r21
     bc4:	30 0d       	add	r19, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
     bcc:	84 5c       	subi	r24, 0xC4	; 196
     bce:	9d 4f       	sbci	r25, 0xFD	; 253
     bd0:	fc 01       	movw	r30, r24
     bd2:	10 82       	st	Z, r1
			maze[c][r].isDone = false;
     bd4:	2b 81       	ldd	r18, Y+3	; 0x03
     bd6:	3c 81       	ldd	r19, Y+4	; 0x04
     bd8:	49 81       	ldd	r20, Y+1	; 0x01
     bda:	5a 81       	ldd	r21, Y+2	; 0x02
     bdc:	c9 01       	movw	r24, r18
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	82 0f       	add	r24, r18
     be4:	93 1f       	adc	r25, r19
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	68 ed       	ldi	r22, 0xD8	; 216
     bec:	64 9f       	mul	r22, r20
     bee:	90 01       	movw	r18, r0
     bf0:	65 9f       	mul	r22, r21
     bf2:	30 0d       	add	r19, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	83 5c       	subi	r24, 0xC3	; 195
     bfc:	9d 4f       	sbci	r25, 0xFD	; 253
     bfe:	fc 01       	movw	r30, r24
     c00:	10 82       	st	Z, r1
}

void initMaze(){
	uint16_t c , r ;
	for(c = 0 ; c < SquareMaze ; c++){
		for(r = 0 ; r < SquareMaze ; r++){
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	84 97       	sbiw	r24, 0x24	; 36
     c12:	08 f4       	brcc	.+2      	; 0xc16 <initMaze+0x140>
     c14:	6c cf       	rjmp	.-296    	; 0xaee <initMaze+0x18>
	return d;
}

void initMaze(){
	uint16_t c , r ;
	for(c = 0 ; c < SquareMaze ; c++){
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	84 97       	sbiw	r24, 0x24	; 36
     c26:	08 f4       	brcc	.+2      	; 0xc2a <initMaze+0x154>
     c28:	5f cf       	rjmp	.-322    	; 0xae8 <initMaze+0x12>
			maze[c][r].my = false;
			maze[c][r].isClear = false;
			maze[c][r].isDone = false;
		}
	}
}
     c2a:	00 00       	nop
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <turnright>:
#include "PinDefined.h"
#include "MotorDriver.h"
#include "GeneralFunc.h"
#include <util/delay.h>

void turnright(){
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	2e 97       	sbiw	r28, 0x0e	; 14
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
	MotorBlock &= (MotorBlock & 0x00);
     c4e:	80 e2       	ldi	r24, 0x20	; 32
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	80 e2       	ldi	r24, 0x20	; 32
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	20 e2       	ldi	r18, 0x20	; 32
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	20 81       	ld	r18, Z
     c66:	32 2f       	mov	r19, r18
     c68:	24 2f       	mov	r18, r20
     c6a:	23 23       	and	r18, r19
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
	MotorBlock |= _BV(MotorIn3);
     c70:	80 e2       	ldi	r24, 0x20	; 32
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	20 e2       	ldi	r18, 0x20	; 32
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	24 60       	ori	r18, 0x04	; 4
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
	analogWrite(0x08,200);
     c82:	68 ec       	ldi	r22, 0xC8	; 200
     c84:	88 e0       	ldi	r24, 0x08	; 8
     c86:	0e 94 94 02 	call	0x528	; 0x528 <analogWrite>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	aa e7       	ldi	r26, 0x7A	; 122
     c90:	b4 e4       	ldi	r27, 0x44	; 68
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	ab 83       	std	Y+3, r26	; 0x03
     c98:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	4a e7       	ldi	r20, 0x7A	; 122
     ca0:	55 e4       	ldi	r21, 0x45	; 69
     ca2:	69 81       	ldd	r22, Y+1	; 0x01
     ca4:	7a 81       	ldd	r23, Y+2	; 0x02
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	af 83       	std	Y+7, r26	; 0x07
     cb8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e8       	ldi	r20, 0x80	; 128
     cc0:	5f e3       	ldi	r21, 0x3F	; 63
     cc2:	6d 81       	ldd	r22, Y+5	; 0x05
     cc4:	7e 81       	ldd	r23, Y+6	; 0x06
     cc6:	8f 81       	ldd	r24, Y+7	; 0x07
     cc8:	98 85       	ldd	r25, Y+8	; 0x08
     cca:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__cmpsf2>
     cce:	88 23       	and	r24, r24
     cd0:	2c f4       	brge	.+10     	; 0xcdc <turnright+0xa2>
		__ticks = 1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	9a 87       	std	Y+10, r25	; 0x0a
     cd8:	89 87       	std	Y+9, r24	; 0x09
     cda:	3f c0       	rjmp	.+126    	; 0xd5a <turnright+0x120>
	else if (__tmp > 65535)
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	3f ef       	ldi	r19, 0xFF	; 255
     ce0:	4f e7       	ldi	r20, 0x7F	; 127
     ce2:	57 e4       	ldi	r21, 0x47	; 71
     ce4:	6d 81       	ldd	r22, Y+5	; 0x05
     ce6:	7e 81       	ldd	r23, Y+6	; 0x06
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__gesf2>
     cf0:	18 16       	cp	r1, r24
     cf2:	4c f5       	brge	.+82     	; 0xd46 <turnright+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e2       	ldi	r20, 0x20	; 32
     cfa:	51 e4       	ldi	r21, 0x41	; 65
     cfc:	69 81       	ldd	r22, Y+1	; 0x01
     cfe:	7a 81       	ldd	r23, Y+2	; 0x02
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	bc 01       	movw	r22, r24
     d0e:	cd 01       	movw	r24, r26
     d10:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	9a 87       	std	Y+10, r25	; 0x0a
     d1a:	89 87       	std	Y+9, r24	; 0x09
     d1c:	0f c0       	rjmp	.+30     	; 0xd3c <turnright+0x102>
     d1e:	80 e9       	ldi	r24, 0x90	; 144
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	9c 87       	std	Y+12, r25	; 0x0c
     d24:	8b 87       	std	Y+11, r24	; 0x0b
     d26:	8b 85       	ldd	r24, Y+11	; 0x0b
     d28:	9c 85       	ldd	r25, Y+12	; 0x0c
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <turnright+0xf0>
     d2e:	9c 87       	std	Y+12, r25	; 0x0c
     d30:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d32:	89 85       	ldd	r24, Y+9	; 0x09
     d34:	9a 85       	ldd	r25, Y+10	; 0x0a
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	9a 87       	std	Y+10, r25	; 0x0a
     d3a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3c:	89 85       	ldd	r24, Y+9	; 0x09
     d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d40:	89 2b       	or	r24, r25
     d42:	69 f7       	brne	.-38     	; 0xd1e <turnright+0xe4>
     d44:	14 c0       	rjmp	.+40     	; 0xd6e <turnright+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d46:	6d 81       	ldd	r22, Y+5	; 0x05
     d48:	7e 81       	ldd	r23, Y+6	; 0x06
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	9a 87       	std	Y+10, r25	; 0x0a
     d58:	89 87       	std	Y+9, r24	; 0x09
     d5a:	89 85       	ldd	r24, Y+9	; 0x09
     d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5e:	9e 87       	std	Y+14, r25	; 0x0e
     d60:	8d 87       	std	Y+13, r24	; 0x0d
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <turnright+0x12c>
     d6a:	9e 87       	std	Y+14, r25	; 0x0e
     d6c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(Delay_Motor);
	stops();
     d6e:	0e 94 bd 08 	call	0x117a	; 0x117a <stops>
}
     d72:	00 00       	nop
     d74:	2e 96       	adiw	r28, 0x0e	; 14
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <turnleft>:

void turnleft(){
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	2e 97       	sbiw	r28, 0x0e	; 14
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
	MotorBlock &= (MotorBlock & 0x00);
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	fc 01       	movw	r30, r24
     da0:	80 81       	ld	r24, Z
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	20 e2       	ldi	r18, 0x20	; 32
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	f9 01       	movw	r30, r18
     db0:	20 81       	ld	r18, Z
     db2:	32 2f       	mov	r19, r18
     db4:	24 2f       	mov	r18, r20
     db6:	23 23       	and	r18, r19
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
	MotorBlock |= _BV(MotorIn1) ;
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	20 e2       	ldi	r18, 0x20	; 32
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	f9 01       	movw	r30, r18
     dc6:	20 81       	ld	r18, Z
     dc8:	21 60       	ori	r18, 0x01	; 1
     dca:	fc 01       	movw	r30, r24
     dcc:	20 83       	st	Z, r18
	analogWrite(0x10,200);
     dce:	68 ec       	ldi	r22, 0xC8	; 200
     dd0:	80 e1       	ldi	r24, 0x10	; 16
     dd2:	0e 94 94 02 	call	0x528	; 0x528 <analogWrite>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	aa e7       	ldi	r26, 0x7A	; 122
     ddc:	b4 e4       	ldi	r27, 0x44	; 68
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	ab 83       	std	Y+3, r26	; 0x03
     de4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	4a e7       	ldi	r20, 0x7A	; 122
     dec:	55 e4       	ldi	r21, 0x45	; 69
     dee:	69 81       	ldd	r22, Y+1	; 0x01
     df0:	7a 81       	ldd	r23, Y+2	; 0x02
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	8d 83       	std	Y+5, r24	; 0x05
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	af 83       	std	Y+7, r26	; 0x07
     e04:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e8       	ldi	r20, 0x80	; 128
     e0c:	5f e3       	ldi	r21, 0x3F	; 63
     e0e:	6d 81       	ldd	r22, Y+5	; 0x05
     e10:	7e 81       	ldd	r23, Y+6	; 0x06
     e12:	8f 81       	ldd	r24, Y+7	; 0x07
     e14:	98 85       	ldd	r25, Y+8	; 0x08
     e16:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__cmpsf2>
     e1a:	88 23       	and	r24, r24
     e1c:	2c f4       	brge	.+10     	; 0xe28 <turnleft+0xa2>
		__ticks = 1;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9a 87       	std	Y+10, r25	; 0x0a
     e24:	89 87       	std	Y+9, r24	; 0x09
     e26:	3f c0       	rjmp	.+126    	; 0xea6 <turnleft+0x120>
	else if (__tmp > 65535)
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	3f ef       	ldi	r19, 0xFF	; 255
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	57 e4       	ldi	r21, 0x47	; 71
     e30:	6d 81       	ldd	r22, Y+5	; 0x05
     e32:	7e 81       	ldd	r23, Y+6	; 0x06
     e34:	8f 81       	ldd	r24, Y+7	; 0x07
     e36:	98 85       	ldd	r25, Y+8	; 0x08
     e38:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__gesf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	4c f5       	brge	.+82     	; 0xe92 <turnleft+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e2       	ldi	r20, 0x20	; 32
     e46:	51 e4       	ldi	r21, 0x41	; 65
     e48:	69 81       	ldd	r22, Y+1	; 0x01
     e4a:	7a 81       	ldd	r23, Y+2	; 0x02
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9a 87       	std	Y+10, r25	; 0x0a
     e66:	89 87       	std	Y+9, r24	; 0x09
     e68:	0f c0       	rjmp	.+30     	; 0xe88 <turnleft+0x102>
     e6a:	80 e9       	ldi	r24, 0x90	; 144
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	9c 87       	std	Y+12, r25	; 0x0c
     e70:	8b 87       	std	Y+11, r24	; 0x0b
     e72:	8b 85       	ldd	r24, Y+11	; 0x0b
     e74:	9c 85       	ldd	r25, Y+12	; 0x0c
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <turnleft+0xf0>
     e7a:	9c 87       	std	Y+12, r25	; 0x0c
     e7c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	9a 87       	std	Y+10, r25	; 0x0a
     e86:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8c:	89 2b       	or	r24, r25
     e8e:	69 f7       	brne	.-38     	; 0xe6a <turnleft+0xe4>
     e90:	14 c0       	rjmp	.+40     	; 0xeba <turnleft+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e92:	6d 81       	ldd	r22, Y+5	; 0x05
     e94:	7e 81       	ldd	r23, Y+6	; 0x06
     e96:	8f 81       	ldd	r24, Y+7	; 0x07
     e98:	98 85       	ldd	r25, Y+8	; 0x08
     e9a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	9a 87       	std	Y+10, r25	; 0x0a
     ea4:	89 87       	std	Y+9, r24	; 0x09
     ea6:	89 85       	ldd	r24, Y+9	; 0x09
     ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eaa:	9e 87       	std	Y+14, r25	; 0x0e
     eac:	8d 87       	std	Y+13, r24	; 0x0d
     eae:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <turnleft+0x12c>
     eb6:	9e 87       	std	Y+14, r25	; 0x0e
     eb8:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(Delay_Motor);
	stops();
     eba:	0e 94 bd 08 	call	0x117a	; 0x117a <stops>
}
     ebe:	00 00       	nop
     ec0:	2e 96       	adiw	r28, 0x0e	; 14
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <forward>:

void forward(){
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	2e 97       	sbiw	r28, 0x0e	; 14
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
	MotorBlock &= (MotorBlock & 0x00);
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	80 e2       	ldi	r24, 0x20	; 32
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	20 e2       	ldi	r18, 0x20	; 32
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	f9 01       	movw	r30, r18
     efc:	20 81       	ld	r18, Z
     efe:	32 2f       	mov	r19, r18
     f00:	24 2f       	mov	r18, r20
     f02:	23 23       	and	r18, r19
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
	MotorBlock |= _BV(MotorIn1) | _BV(MotorIn3) ;
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	20 e2       	ldi	r18, 0x20	; 32
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	f9 01       	movw	r30, r18
     f12:	20 81       	ld	r18, Z
     f14:	25 60       	ori	r18, 0x05	; 5
     f16:	fc 01       	movw	r30, r24
     f18:	20 83       	st	Z, r18
	analogWrite(0x08,200);
     f1a:	68 ec       	ldi	r22, 0xC8	; 200
     f1c:	88 e0       	ldi	r24, 0x08	; 8
     f1e:	0e 94 94 02 	call	0x528	; 0x528 <analogWrite>
	analogWrite(0x10,200);
     f22:	68 ec       	ldi	r22, 0xC8	; 200
     f24:	80 e1       	ldi	r24, 0x10	; 16
     f26:	0e 94 94 02 	call	0x528	; 0x528 <analogWrite>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	aa e7       	ldi	r26, 0x7A	; 122
     f30:	b4 e4       	ldi	r27, 0x44	; 68
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	ab 83       	std	Y+3, r26	; 0x03
     f38:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	4a e7       	ldi	r20, 0x7A	; 122
     f40:	55 e4       	ldi	r21, 0x45	; 69
     f42:	69 81       	ldd	r22, Y+1	; 0x01
     f44:	7a 81       	ldd	r23, Y+2	; 0x02
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	8d 83       	std	Y+5, r24	; 0x05
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	af 83       	std	Y+7, r26	; 0x07
     f58:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e8       	ldi	r20, 0x80	; 128
     f60:	5f e3       	ldi	r21, 0x3F	; 63
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__cmpsf2>
     f6e:	88 23       	and	r24, r24
     f70:	2c f4       	brge	.+10     	; 0xf7c <forward+0xaa>
		__ticks = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9a 87       	std	Y+10, r25	; 0x0a
     f78:	89 87       	std	Y+9, r24	; 0x09
     f7a:	3f c0       	rjmp	.+126    	; 0xffa <forward+0x128>
	else if (__tmp > 65535)
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	3f ef       	ldi	r19, 0xFF	; 255
     f80:	4f e7       	ldi	r20, 0x7F	; 127
     f82:	57 e4       	ldi	r21, 0x47	; 71
     f84:	6d 81       	ldd	r22, Y+5	; 0x05
     f86:	7e 81       	ldd	r23, Y+6	; 0x06
     f88:	8f 81       	ldd	r24, Y+7	; 0x07
     f8a:	98 85       	ldd	r25, Y+8	; 0x08
     f8c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__gesf2>
     f90:	18 16       	cp	r1, r24
     f92:	4c f5       	brge	.+82     	; 0xfe6 <forward+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e2       	ldi	r20, 0x20	; 32
     f9a:	51 e4       	ldi	r21, 0x41	; 65
     f9c:	69 81       	ldd	r22, Y+1	; 0x01
     f9e:	7a 81       	ldd	r23, Y+2	; 0x02
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9a 87       	std	Y+10, r25	; 0x0a
     fba:	89 87       	std	Y+9, r24	; 0x09
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <forward+0x10a>
     fbe:	80 e9       	ldi	r24, 0x90	; 144
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	9c 87       	std	Y+12, r25	; 0x0c
     fc4:	8b 87       	std	Y+11, r24	; 0x0b
     fc6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <forward+0xf8>
     fce:	9c 87       	std	Y+12, r25	; 0x0c
     fd0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	89 85       	ldd	r24, Y+9	; 0x09
     fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	9a 87       	std	Y+10, r25	; 0x0a
     fda:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	89 2b       	or	r24, r25
     fe2:	69 f7       	brne	.-38     	; 0xfbe <forward+0xec>
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <forward+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe6:	6d 81       	ldd	r22, Y+5	; 0x05
     fe8:	7e 81       	ldd	r23, Y+6	; 0x06
     fea:	8f 81       	ldd	r24, Y+7	; 0x07
     fec:	98 85       	ldd	r25, Y+8	; 0x08
     fee:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9a 87       	std	Y+10, r25	; 0x0a
     ff8:	89 87       	std	Y+9, r24	; 0x09
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	9e 87       	std	Y+14, r25	; 0x0e
    1000:	8d 87       	std	Y+13, r24	; 0x0d
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <forward+0x134>
    100a:	9e 87       	std	Y+14, r25	; 0x0e
    100c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(Delay_Motor);
	stops();
    100e:	0e 94 bd 08 	call	0x117a	; 0x117a <stops>
}
    1012:	00 00       	nop
    1014:	2e 96       	adiw	r28, 0x0e	; 14
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <bacrward>:

void bacrward(){
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	2e 97       	sbiw	r28, 0x0e	; 14
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
	MotorBlock &= (MotorBlock & 0x00);
    103a:	80 e2       	ldi	r24, 0x20	; 32
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	80 81       	ld	r24, Z
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	80 e2       	ldi	r24, 0x20	; 32
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	20 e2       	ldi	r18, 0x20	; 32
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	32 2f       	mov	r19, r18
    1054:	24 2f       	mov	r18, r20
    1056:	23 23       	and	r18, r19
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18
	MotorBlock |= _BV(MotorIn2) | _BV(MotorIn4) ;
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	20 e2       	ldi	r18, 0x20	; 32
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	f9 01       	movw	r30, r18
    1066:	20 81       	ld	r18, Z
    1068:	2a 60       	ori	r18, 0x0A	; 10
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
	analogWrite(0x08,200);
    106e:	68 ec       	ldi	r22, 0xC8	; 200
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	0e 94 94 02 	call	0x528	; 0x528 <analogWrite>
	analogWrite(0x10,200);
    1076:	68 ec       	ldi	r22, 0xC8	; 200
    1078:	80 e1       	ldi	r24, 0x10	; 16
    107a:	0e 94 94 02 	call	0x528	; 0x528 <analogWrite>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	aa e7       	ldi	r26, 0x7A	; 122
    1084:	b4 e4       	ldi	r27, 0x44	; 68
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	ab 83       	std	Y+3, r26	; 0x03
    108c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4a e7       	ldi	r20, 0x7A	; 122
    1094:	55 e4       	ldi	r21, 0x45	; 69
    1096:	69 81       	ldd	r22, Y+1	; 0x01
    1098:	7a 81       	ldd	r23, Y+2	; 0x02
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	af 83       	std	Y+7, r26	; 0x07
    10ac:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e8       	ldi	r20, 0x80	; 128
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	6d 81       	ldd	r22, Y+5	; 0x05
    10b8:	7e 81       	ldd	r23, Y+6	; 0x06
    10ba:	8f 81       	ldd	r24, Y+7	; 0x07
    10bc:	98 85       	ldd	r25, Y+8	; 0x08
    10be:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__cmpsf2>
    10c2:	88 23       	and	r24, r24
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <bacrward+0xaa>
		__ticks = 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9a 87       	std	Y+10, r25	; 0x0a
    10cc:	89 87       	std	Y+9, r24	; 0x09
    10ce:	3f c0       	rjmp	.+126    	; 0x114e <bacrward+0x128>
	else if (__tmp > 65535)
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	3f ef       	ldi	r19, 0xFF	; 255
    10d4:	4f e7       	ldi	r20, 0x7F	; 127
    10d6:	57 e4       	ldi	r21, 0x47	; 71
    10d8:	6d 81       	ldd	r22, Y+5	; 0x05
    10da:	7e 81       	ldd	r23, Y+6	; 0x06
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	98 85       	ldd	r25, Y+8	; 0x08
    10e0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__gesf2>
    10e4:	18 16       	cp	r1, r24
    10e6:	4c f5       	brge	.+82     	; 0x113a <bacrward+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e2       	ldi	r20, 0x20	; 32
    10ee:	51 e4       	ldi	r21, 0x41	; 65
    10f0:	69 81       	ldd	r22, Y+1	; 0x01
    10f2:	7a 81       	ldd	r23, Y+2	; 0x02
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	bc 01       	movw	r22, r24
    1102:	cd 01       	movw	r24, r26
    1104:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9a 87       	std	Y+10, r25	; 0x0a
    110e:	89 87       	std	Y+9, r24	; 0x09
    1110:	0f c0       	rjmp	.+30     	; 0x1130 <bacrward+0x10a>
    1112:	80 e9       	ldi	r24, 0x90	; 144
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	9c 87       	std	Y+12, r25	; 0x0c
    1118:	8b 87       	std	Y+11, r24	; 0x0b
    111a:	8b 85       	ldd	r24, Y+11	; 0x0b
    111c:	9c 85       	ldd	r25, Y+12	; 0x0c
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <bacrward+0xf8>
    1122:	9c 87       	std	Y+12, r25	; 0x0c
    1124:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1126:	89 85       	ldd	r24, Y+9	; 0x09
    1128:	9a 85       	ldd	r25, Y+10	; 0x0a
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	9a 87       	std	Y+10, r25	; 0x0a
    112e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	89 2b       	or	r24, r25
    1136:	69 f7       	brne	.-38     	; 0x1112 <bacrward+0xec>
    1138:	14 c0       	rjmp	.+40     	; 0x1162 <bacrward+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113a:	6d 81       	ldd	r22, Y+5	; 0x05
    113c:	7e 81       	ldd	r23, Y+6	; 0x06
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9a 87       	std	Y+10, r25	; 0x0a
    114c:	89 87       	std	Y+9, r24	; 0x09
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	9a 85       	ldd	r25, Y+10	; 0x0a
    1152:	9e 87       	std	Y+14, r25	; 0x0e
    1154:	8d 87       	std	Y+13, r24	; 0x0d
    1156:	8d 85       	ldd	r24, Y+13	; 0x0d
    1158:	9e 85       	ldd	r25, Y+14	; 0x0e
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <bacrward+0x134>
    115e:	9e 87       	std	Y+14, r25	; 0x0e
    1160:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(Delay_Motor);
	stops();
    1162:	0e 94 bd 08 	call	0x117a	; 0x117a <stops>
}
    1166:	00 00       	nop
    1168:	2e 96       	adiw	r28, 0x0e	; 14
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <stops>:

void stops(){
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
  MotorBlock &= (MotorBlock & 0x00);
    1182:	80 e2       	ldi	r24, 0x20	; 32
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	fc 01       	movw	r30, r24
    1188:	80 81       	ld	r24, Z
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	80 e2       	ldi	r24, 0x20	; 32
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	20 e2       	ldi	r18, 0x20	; 32
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	f9 01       	movw	r30, r18
    1198:	20 81       	ld	r18, Z
    119a:	32 2f       	mov	r19, r18
    119c:	24 2f       	mov	r18, r20
    119e:	23 23       	and	r18, r19
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18
  //analogWrite(0x0F, 0);
  //analogWrite(0xF0, 0);
  //_delay_ms(2000);
}
    11a4:	00 00       	nop
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <readObs>:
#include "GeneralFunc.h"
#include "Obs.h"
#include "MapMaze.h"
#include "MotorDriver.h"

uint8_t readObs(uint8_t ObsPin){
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	1f 92       	push	r1
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	89 83       	std	Y+1, r24	; 0x01
	//return analogRead(ObsPin);
	return (ObsBlock & (1 << ObsPin));
    11b8:	86 e2       	ldi	r24, 0x26	; 38
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	fc 01       	movw	r30, r24
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <readObs+0x26>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	2a 95       	dec	r18
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <readObs+0x22>
    11d6:	84 23       	and	r24, r20
}
    11d8:	0f 90       	pop	r0
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <WhereYouGo>:

uint8_t WhereYouGo(){
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
	if (DirToGo.goesto == positifX){
    11e8:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <DirToGo>
    11ec:	88 23       	and	r24, r24
    11ee:	a9 f4       	brne	.+42     	; 0x121a <WhereYouGo+0x3a>
		headdirect.px = head;
    11f0:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <headdirect>
		headdirect.py = tail;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <headdirect+0x1>
		headdirect.mx = tail;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 9f 20 	sts	0x209F, r24	; 0x80209f <headdirect+0x2>
		headdirect.my = tail;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <headdirect+0x3>
		CurrentPos.CurX = CurrentPos.CurX + 1 ;
    1206:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurrentPos>
    120a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurrentPos+0x1>
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <CurrentPos+0x1>
    1214:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <CurrentPos>
    1218:	57 c0       	rjmp	.+174    	; 0x12c8 <WhereYouGo+0xe8>
	}
	else if (DirToGo.goesto == positifY){
    121a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <DirToGo>
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	a9 f4       	brne	.+42     	; 0x124c <WhereYouGo+0x6c>
		headdirect.px = tail;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 9d 20 	sts	0x209D, r24	; 0x80209d <headdirect>
		headdirect.py = head;
    1228:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <headdirect+0x1>
		headdirect.mx = tail;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 9f 20 	sts	0x209F, r24	; 0x80209f <headdirect+0x2>
		headdirect.my = tail;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <headdirect+0x3>
		CurrentPos.CurY = CurrentPos.CurY + 1 ;
    1238:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <CurrentPos+0x2>
    123c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <CurrentPos+0x3>
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <CurrentPos+0x3>
    1246:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <CurrentPos+0x2>
    124a:	3e c0       	rjmp	.+124    	; 0x12c8 <WhereYouGo+0xe8>
	}
	else if (DirToGo.goesto == negatifX){
    124c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <DirToGo>
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	a9 f4       	brne	.+42     	; 0x127e <WhereYouGo+0x9e>
		headdirect.px = tail;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 9d 20 	sts	0x209D, r24	; 0x80209d <headdirect>
		headdirect.py = tail;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <headdirect+0x1>
		headdirect.mx = head;
    1260:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <headdirect+0x2>
		headdirect.my = tail;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <headdirect+0x3>
		CurrentPos.CurX = CurrentPos.CurX - 1 ;
    126a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <CurrentPos>
    126e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <CurrentPos+0x1>
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <CurrentPos+0x1>
    1278:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <CurrentPos>
    127c:	25 c0       	rjmp	.+74     	; 0x12c8 <WhereYouGo+0xe8>
	}
	else if (DirToGo.goesto == negatifY){
    127e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <DirToGo>
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	a9 f4       	brne	.+42     	; 0x12b0 <WhereYouGo+0xd0>
		headdirect.px = tail;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	80 93 9d 20 	sts	0x209D, r24	; 0x80209d <headdirect>
		headdirect.py = tail;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <headdirect+0x1>
		headdirect.mx = tail;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 9f 20 	sts	0x209F, r24	; 0x80209f <headdirect+0x2>
		headdirect.my = head;
    1298:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <headdirect+0x3>
		CurrentPos.CurY = CurrentPos.CurY - 1 ;
    129c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <CurrentPos+0x2>
    12a0:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <CurrentPos+0x3>
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <CurrentPos+0x3>
    12aa:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <CurrentPos+0x2>
    12ae:	0c c0       	rjmp	.+24     	; 0x12c8 <WhereYouGo+0xe8>
	}
	else {
		headdirect.px = tail;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 9d 20 	sts	0x209D, r24	; 0x80209d <headdirect>
		headdirect.py = tail;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <headdirect+0x1>
		headdirect.mx = tail;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 9f 20 	sts	0x209F, r24	; 0x80209f <headdirect+0x2>
		headdirect.my = tail;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <headdirect+0x3>
	}

	if(DirToGo.gomotor == goForward){
    12c8:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <DirToGo+0x1>
    12cc:	88 23       	and	r24, r24
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <WhereYouGo+0xf4>
		//turnleft();
		forward();
    12d0:	0e 94 69 07 	call	0xed2	; 0xed2 <forward>
	}
	if(DirToGo.gomotor == goLeft){
    12d4:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <DirToGo+0x1>
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	11 f4       	brne	.+4      	; 0x12e0 <WhereYouGo+0x100>
		turnleft();
    12dc:	0e 94 c3 06 	call	0xd86	; 0xd86 <turnleft>
	}
	if(DirToGo.gomotor == goRight){
    12e0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <DirToGo+0x1>
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	11 f4       	brne	.+4      	; 0x12ec <WhereYouGo+0x10c>
		turnright();
    12e8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <turnright>
	}
	if(DirToGo.gomotor == goBack){
    12ec:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <DirToGo+0x1>
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <WhereYouGo+0x118>
		bacrward();
    12f4:	0e 94 13 08 	call	0x1026	; 0x1026 <bacrward>
	}

	DirToGo.gomotor = goNull;
    12f8:	84 e0       	ldi	r24, 0x04	; 4
    12fa:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <DirToGo+0x1>
	return true;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
}
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <MotorPinInit>:
 */

#include <avr/io.h>
#include "PinDefined.h"

void MotorPinInit(){
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	DataDirMotor |= _BV(MotorIn1) | _BV(MotorIn2) | _BV(MotorIn3) | _BV(MotorIn4); // set as output set as 1
    130e:	81 e2       	ldi	r24, 0x21	; 33
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	21 e2       	ldi	r18, 0x21	; 33
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	f9 01       	movw	r30, r18
    1318:	20 81       	ld	r18, Z
    131a:	2f 60       	ori	r18, 0x0F	; 15
    131c:	fc 01       	movw	r30, r24
    131e:	20 83       	st	Z, r18
}
    1320:	00 00       	nop
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <ObstacleInit>:


void ObstacleInit(){
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	DataDirObs &= (DataDirObs & 0x00) | ~_BV(ObstacleF0) | ~_BV(ObstacleR) | ~_BV(ObstacleL) | ~_BV(ObstacleB0) ; // set as input set as 0
    1330:	87 e2       	ldi	r24, 0x27	; 39
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	fc 01       	movw	r30, r24
    1336:	80 81       	ld	r24, Z
    1338:	4f ef       	ldi	r20, 0xFF	; 255
    133a:	5f ef       	ldi	r21, 0xFF	; 255
    133c:	87 e2       	ldi	r24, 0x27	; 39
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	27 e2       	ldi	r18, 0x27	; 39
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	20 81       	ld	r18, Z
    1348:	32 2f       	mov	r19, r18
    134a:	24 2f       	mov	r18, r20
    134c:	23 23       	and	r18, r19
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
	PORTC |= _BV(ObstacleF0) | _BV(ObstacleR) | _BV(ObstacleL) | _BV(ObstacleB0) ; // set pull up set as 1
    1352:	88 e2       	ldi	r24, 0x28	; 40
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	28 e2       	ldi	r18, 0x28	; 40
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	f9 01       	movw	r30, r18
    135c:	20 81       	ld	r18, Z
    135e:	2f 60       	ori	r18, 0x0F	; 15
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18
}
    1364:	00 00       	nop
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <ExtInit>:

void ExtInit(){
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	DDRC |= _BV(DDC6);
    1374:	87 e2       	ldi	r24, 0x27	; 39
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	27 e2       	ldi	r18, 0x27	; 39
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	f9 01       	movw	r30, r18
    137e:	20 81       	ld	r18, Z
    1380:	20 64       	ori	r18, 0x40	; 64
    1382:	fc 01       	movw	r30, r24
    1384:	20 83       	st	Z, r18
}
    1386:	00 00       	nop
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <initUSART>:

#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
    1396:	85 ec       	ldi	r24, 0xC5	; 197
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	fc 01       	movw	r30, r24
    139c:	10 82       	st	Z, r1
  UBRR0L = UBRRL_VALUE;
    139e:	84 ec       	ldi	r24, 0xC4	; 196
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	27 e6       	ldi	r18, 0x67	; 103
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
    13a8:	80 ec       	ldi	r24, 0xC0	; 192
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	20 ec       	ldi	r18, 0xC0	; 192
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	f9 01       	movw	r30, r18
    13b2:	20 81       	ld	r18, Z
    13b4:	2d 7f       	andi	r18, 0xFD	; 253
    13b6:	fc 01       	movw	r30, r24
    13b8:	20 83       	st	Z, r18
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
    13ba:	81 ec       	ldi	r24, 0xC1	; 193
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	28 e1       	ldi	r18, 0x18	; 24
    13c0:	fc 01       	movw	r30, r24
    13c2:	20 83       	st	Z, r18
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
    13c4:	82 ec       	ldi	r24, 0xC2	; 194
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	26 e0       	ldi	r18, 0x06	; 6
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
}
    13ce:	00 00       	nop
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <transmitByte>:


void transmitByte(uint8_t data) {
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	1f 92       	push	r1
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	89 83       	std	Y+1, r24	; 0x01
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
    13e2:	80 ec       	ldi	r24, 0xC0	; 192
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	fc 01       	movw	r30, r24
    13e8:	80 81       	ld	r24, Z
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	80 72       	andi	r24, 0x20	; 32
    13f0:	99 27       	eor	r25, r25
    13f2:	89 2b       	or	r24, r25
    13f4:	b1 f3       	breq	.-20     	; 0x13e2 <transmitByte+0xc>
  UDR0 = data;                                            /* send data */
    13f6:	86 ec       	ldi	r24, 0xC6	; 198
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	29 81       	ldd	r18, Y+1	; 0x01
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18
}
    1400:	00 00       	nop
    1402:	0f 90       	pop	r0
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <receiveByte>:

uint8_t receiveByte(void) {
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
    1412:	80 ec       	ldi	r24, 0xC0	; 192
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	fc 01       	movw	r30, r24
    1418:	80 81       	ld	r24, Z
    141a:	88 23       	and	r24, r24
    141c:	d4 f7       	brge	.-12     	; 0x1412 <receiveByte+0x8>
  return UDR0;                                /* return register value */
    141e:	86 ec       	ldi	r24, 0xC6	; 198
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	fc 01       	movw	r30, r24
    1424:	80 81       	ld	r24, Z
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	00 d0       	rcall	.+0      	; 0x1432 <printString+0x6>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	9b 83       	std	Y+3, r25	; 0x03
    1438:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t i = 0;
    143a:	19 82       	std	Y+1, r1	; 0x01
  while (myString[i]) {
    143c:	0e c0       	rjmp	.+28     	; 0x145a <printString+0x2e>
    transmitByte(myString[i]);
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	2a 81       	ldd	r18, Y+2	; 0x02
    1446:	3b 81       	ldd	r19, Y+3	; 0x03
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	fc 01       	movw	r30, r24
    144e:	80 81       	ld	r24, Z
    1450:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
    i++;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	89 83       	std	Y+1, r24	; 0x01

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	2a 81       	ldd	r18, Y+2	; 0x02
    1462:	3b 81       	ldd	r19, Y+3	; 0x03
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	fc 01       	movw	r30, r24
    146a:	80 81       	ld	r24, Z
    146c:	88 23       	and	r24, r24
    146e:	39 f7       	brne	.-50     	; 0x143e <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
    1470:	00 00       	nop
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <readString>:

void readString(char myString[], uint8_t maxLength) {
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	00 d0       	rcall	.+0      	; 0x1484 <readString+0x6>
    1484:	1f 92       	push	r1
    1486:	1f 92       	push	r1
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	8b 83       	std	Y+3, r24	; 0x03
    1490:	6d 83       	std	Y+5, r22	; 0x05
  char response;
  uint8_t i;
  i = 0;
    1492:	19 82       	std	Y+1, r1	; 0x01
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
    1494:	16 c0       	rjmp	.+44     	; 0x14c2 <readString+0x44>
    response = receiveByte();
    1496:	0e 94 05 0a 	call	0x140a	; 0x140a <receiveByte>
    149a:	8a 83       	std	Y+2, r24	; 0x02
    transmitByte(response);                                    /* echo */
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	8d 30       	cpi	r24, 0x0D	; 13
    14a6:	c1 f0       	breq	.+48     	; 0x14d8 <readString+0x5a>
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	82 0f       	add	r24, r18
    14b4:	93 1f       	adc	r25, r19
    14b6:	2a 81       	ldd	r18, Y+2	; 0x02
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18
      i++;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	89 83       	std	Y+1, r24	; 0x01

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	28 17       	cp	r18, r24
    14d2:	39 07       	cpc	r19, r25
    14d4:	04 f3       	brlt	.-64     	; 0x1496 <readString+0x18>
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <readString+0x5c>
    response = receiveByte();
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
    14d8:	00 00       	nop
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	fc 01       	movw	r30, r24
    14ea:	10 82       	st	Z, r1
}
    14ec:	00 00       	nop
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <printByte>:

void printByte(uint8_t byte) {
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	1f 92       	push	r1
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
    150a:	99 81       	ldd	r25, Y+1	; 0x01
    150c:	89 e2       	ldi	r24, 0x29	; 41
    150e:	98 9f       	mul	r25, r24
    1510:	81 2d       	mov	r24, r1
    1512:	11 24       	eor	r1, r1
    1514:	82 95       	swap	r24
    1516:	8f 70       	andi	r24, 0x0F	; 15
    1518:	80 5d       	subi	r24, 0xD0	; 208
    151a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
    151e:	99 81       	ldd	r25, Y+1	; 0x01
    1520:	8d ec       	ldi	r24, 0xCD	; 205
    1522:	98 9f       	mul	r25, r24
    1524:	81 2d       	mov	r24, r1
    1526:	11 24       	eor	r1, r1
    1528:	98 2f       	mov	r25, r24
    152a:	96 95       	lsr	r25
    152c:	96 95       	lsr	r25
    152e:	96 95       	lsr	r25
    1530:	8d ec       	ldi	r24, 0xCD	; 205
    1532:	98 9f       	mul	r25, r24
    1534:	81 2d       	mov	r24, r1
    1536:	11 24       	eor	r1, r1
    1538:	86 95       	lsr	r24
    153a:	86 95       	lsr	r24
    153c:	86 95       	lsr	r24
    153e:	88 0f       	add	r24, r24
    1540:	28 2f       	mov	r18, r24
    1542:	22 0f       	add	r18, r18
    1544:	22 0f       	add	r18, r18
    1546:	82 0f       	add	r24, r18
    1548:	29 2f       	mov	r18, r25
    154a:	28 1b       	sub	r18, r24
    154c:	82 2f       	mov	r24, r18
    154e:	80 5d       	subi	r24, 0xD0	; 208
    1550:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
    1554:	99 81       	ldd	r25, Y+1	; 0x01
    1556:	8d ec       	ldi	r24, 0xCD	; 205
    1558:	98 9f       	mul	r25, r24
    155a:	81 2d       	mov	r24, r1
    155c:	11 24       	eor	r1, r1
    155e:	86 95       	lsr	r24
    1560:	86 95       	lsr	r24
    1562:	86 95       	lsr	r24
    1564:	88 0f       	add	r24, r24
    1566:	28 2f       	mov	r18, r24
    1568:	22 0f       	add	r18, r18
    156a:	22 0f       	add	r18, r18
    156c:	82 0f       	add	r24, r18
    156e:	29 2f       	mov	r18, r25
    1570:	28 1b       	sub	r18, r24
    1572:	82 2f       	mov	r24, r18
    1574:	80 5d       	subi	r24, 0xD0	; 208
    1576:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
}
    157a:	00 00       	nop
    157c:	0f 90       	pop	r0
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <printWord>:

void printWord(uint16_t word) {
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	1f 92       	push	r1
    158a:	1f 92       	push	r1
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	92 95       	swap	r25
    159a:	82 95       	swap	r24
    159c:	8f 70       	andi	r24, 0x0F	; 15
    159e:	89 27       	eor	r24, r25
    15a0:	9f 70       	andi	r25, 0x0F	; 15
    15a2:	89 27       	eor	r24, r25
    15a4:	9c 01       	movw	r18, r24
    15a6:	a7 e4       	ldi	r26, 0x47	; 71
    15a8:	b3 e0       	ldi	r27, 0x03	; 3
    15aa:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__umulhisi3>
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	96 95       	lsr	r25
    15b8:	87 95       	ror	r24
    15ba:	80 5d       	subi	r24, 0xD0	; 208
    15bc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	96 95       	lsr	r25
    15c6:	87 95       	ror	r24
    15c8:	96 95       	lsr	r25
    15ca:	87 95       	ror	r24
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	9c 01       	movw	r18, r24
    15d2:	a5 ec       	ldi	r26, 0xC5	; 197
    15d4:	b0 e2       	ldi	r27, 0x20	; 32
    15d6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__umulhisi3>
    15da:	ac 01       	movw	r20, r24
    15dc:	52 95       	swap	r21
    15de:	42 95       	swap	r20
    15e0:	4f 70       	andi	r20, 0x0F	; 15
    15e2:	45 27       	eor	r20, r21
    15e4:	5f 70       	andi	r21, 0x0F	; 15
    15e6:	45 27       	eor	r20, r21
    15e8:	9a 01       	movw	r18, r20
    15ea:	ad ec       	ldi	r26, 0xCD	; 205
    15ec:	bc ec       	ldi	r27, 0xCC	; 204
    15ee:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__umulhisi3>
    15f2:	96 95       	lsr	r25
    15f4:	87 95       	ror	r24
    15f6:	96 95       	lsr	r25
    15f8:	87 95       	ror	r24
    15fa:	96 95       	lsr	r25
    15fc:	87 95       	ror	r24
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	9c 01       	movw	r18, r24
    1604:	22 0f       	add	r18, r18
    1606:	33 1f       	adc	r19, r19
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	82 0f       	add	r24, r18
    160e:	93 1f       	adc	r25, r19
    1610:	9a 01       	movw	r18, r20
    1612:	28 1b       	sub	r18, r24
    1614:	39 0b       	sbc	r19, r25
    1616:	c9 01       	movw	r24, r18
    1618:	80 5d       	subi	r24, 0xD0	; 208
    161a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	9a 81       	ldd	r25, Y+2	; 0x02
    1622:	96 95       	lsr	r25
    1624:	87 95       	ror	r24
    1626:	96 95       	lsr	r25
    1628:	87 95       	ror	r24
    162a:	9c 01       	movw	r18, r24
    162c:	ab e7       	ldi	r26, 0x7B	; 123
    162e:	b4 e1       	ldi	r27, 0x14	; 20
    1630:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__umulhisi3>
    1634:	ac 01       	movw	r20, r24
    1636:	56 95       	lsr	r21
    1638:	47 95       	ror	r20
    163a:	9a 01       	movw	r18, r20
    163c:	ad ec       	ldi	r26, 0xCD	; 205
    163e:	bc ec       	ldi	r27, 0xCC	; 204
    1640:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__umulhisi3>
    1644:	96 95       	lsr	r25
    1646:	87 95       	ror	r24
    1648:	96 95       	lsr	r25
    164a:	87 95       	ror	r24
    164c:	96 95       	lsr	r25
    164e:	87 95       	ror	r24
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	9c 01       	movw	r18, r24
    1656:	22 0f       	add	r18, r18
    1658:	33 1f       	adc	r19, r19
    165a:	22 0f       	add	r18, r18
    165c:	33 1f       	adc	r19, r19
    165e:	82 0f       	add	r24, r18
    1660:	93 1f       	adc	r25, r19
    1662:	9a 01       	movw	r18, r20
    1664:	28 1b       	sub	r18, r24
    1666:	39 0b       	sbc	r19, r25
    1668:	c9 01       	movw	r24, r18
    166a:	80 5d       	subi	r24, 0xD0	; 208
    166c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	9a 81       	ldd	r25, Y+2	; 0x02
    1674:	9c 01       	movw	r18, r24
    1676:	ad ec       	ldi	r26, 0xCD	; 205
    1678:	bc ec       	ldi	r27, 0xCC	; 204
    167a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__umulhisi3>
    167e:	ac 01       	movw	r20, r24
    1680:	56 95       	lsr	r21
    1682:	47 95       	ror	r20
    1684:	56 95       	lsr	r21
    1686:	47 95       	ror	r20
    1688:	56 95       	lsr	r21
    168a:	47 95       	ror	r20
    168c:	9a 01       	movw	r18, r20
    168e:	ad ec       	ldi	r26, 0xCD	; 205
    1690:	bc ec       	ldi	r27, 0xCC	; 204
    1692:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__umulhisi3>
    1696:	96 95       	lsr	r25
    1698:	87 95       	ror	r24
    169a:	96 95       	lsr	r25
    169c:	87 95       	ror	r24
    169e:	96 95       	lsr	r25
    16a0:	87 95       	ror	r24
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	9c 01       	movw	r18, r24
    16a8:	22 0f       	add	r18, r18
    16aa:	33 1f       	adc	r19, r19
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	9a 01       	movw	r18, r20
    16b6:	28 1b       	sub	r18, r24
    16b8:	39 0b       	sbc	r19, r25
    16ba:	c9 01       	movw	r24, r18
    16bc:	80 5d       	subi	r24, 0xD0	; 208
    16be:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
    16c2:	49 81       	ldd	r20, Y+1	; 0x01
    16c4:	5a 81       	ldd	r21, Y+2	; 0x02
    16c6:	9a 01       	movw	r18, r20
    16c8:	ad ec       	ldi	r26, 0xCD	; 205
    16ca:	bc ec       	ldi	r27, 0xCC	; 204
    16cc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__umulhisi3>
    16d0:	96 95       	lsr	r25
    16d2:	87 95       	ror	r24
    16d4:	96 95       	lsr	r25
    16d6:	87 95       	ror	r24
    16d8:	96 95       	lsr	r25
    16da:	87 95       	ror	r24
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	9c 01       	movw	r18, r24
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	22 0f       	add	r18, r18
    16e8:	33 1f       	adc	r19, r19
    16ea:	82 0f       	add	r24, r18
    16ec:	93 1f       	adc	r25, r19
    16ee:	9a 01       	movw	r18, r20
    16f0:	28 1b       	sub	r18, r24
    16f2:	39 0b       	sbc	r19, r25
    16f4:	c9 01       	movw	r24, r18
    16f6:	80 5d       	subi	r24, 0xD0	; 208
    16f8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
}
    16fc:	00 00       	nop
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <printBinaryByte>:

void printBinaryByte(uint8_t byte) {
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	1f 92       	push	r1
    170e:	1f 92       	push	r1
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	8a 83       	std	Y+2, r24	; 0x02
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
    1716:	87 e0       	ldi	r24, 0x07	; 7
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	1c c0       	rjmp	.+56     	; 0x1754 <printBinaryByte+0x4c>
    if (bit_is_set(byte, bit))
    171c:	ce 01       	movw	r24, r28
    171e:	02 96       	adiw	r24, 0x02	; 2
    1720:	fc 01       	movw	r30, r24
    1722:	80 81       	ld	r24, Z
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	29 81       	ldd	r18, Y+1	; 0x01
    172a:	22 2f       	mov	r18, r18
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <printBinaryByte+0x2c>
    1730:	95 95       	asr	r25
    1732:	87 95       	ror	r24
    1734:	2a 95       	dec	r18
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <printBinaryByte+0x28>
    1738:	81 70       	andi	r24, 0x01	; 1
    173a:	99 27       	eor	r25, r25
    173c:	89 2b       	or	r24, r25
    173e:	21 f0       	breq	.+8      	; 0x1748 <printBinaryByte+0x40>
      transmitByte('1');
    1740:	81 e3       	ldi	r24, 0x31	; 49
    1742:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
    1746:	03 c0       	rjmp	.+6      	; 0x174e <printBinaryByte+0x46>
    else
      transmitByte('0');
    1748:	80 e3       	ldi	r24, 0x30	; 48
    174a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	81 50       	subi	r24, 0x01	; 1
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	8f 3f       	cpi	r24, 0xFF	; 255
    1758:	09 f7       	brne	.-62     	; 0x171c <printBinaryByte+0x14>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
    175a:	00 00       	nop
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	08 95       	ret

00001766 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	1f 92       	push	r1
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	89 83       	std	Y+1, r24	; 0x01
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	8a 30       	cpi	r24, 0x0A	; 10
    1776:	18 f4       	brcc	.+6      	; 0x177e <nibbleToHexCharacter+0x18>
    return ('0' + nibble);
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	80 5d       	subi	r24, 0xD0	; 208
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <nibbleToHexCharacter+0x1c>
  }
  else {
    return ('A' + nibble - 10);
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	89 5c       	subi	r24, 0xC9	; 201
  }
}
    1782:	0f 90       	pop	r0
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <printHexByte>:

void printHexByte(uint8_t byte) {
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	1f 92       	push	r1
    1790:	1f 92       	push	r1
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	8a 83       	std	Y+2, r24	; 0x02
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	82 95       	swap	r24
    179c:	8f 70       	andi	r24, 0x0F	; 15
    179e:	89 83       	std	Y+1, r24	; 0x01
  transmitByte(nibbleToHexCharacter(nibble));
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <nibbleToHexCharacter>
    17a6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
  nibble = byte & 0b00001111;
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	8f 70       	andi	r24, 0x0F	; 15
    17ae:	89 83       	std	Y+1, r24	; 0x01
  transmitByte(nibbleToHexCharacter(nibble));
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <nibbleToHexCharacter>
    17b6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
}
    17ba:	00 00       	nop
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <getNumber>:

uint8_t getNumber(void) {
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <getNumber+0x6>
    17cc:	1f 92       	push	r1
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
  // Gets a numerical 0-255 from the serial port.
  // Converts from string to number.
  char hundreds = '0';
    17d2:	80 e3       	ldi	r24, 0x30	; 48
    17d4:	8c 83       	std	Y+4, r24	; 0x04
  char tens = '0';
    17d6:	80 e3       	ldi	r24, 0x30	; 48
    17d8:	89 83       	std	Y+1, r24	; 0x01
  char ones = '0';
    17da:	80 e3       	ldi	r24, 0x30	; 48
    17dc:	8a 83       	std	Y+2, r24	; 0x02
  char thisChar = '0';
    17de:	80 e3       	ldi	r24, 0x30	; 48
    17e0:	8b 83       	std	Y+3, r24	; 0x03
  do {                                                   /* shift over */
    hundreds = tens;
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	8c 83       	std	Y+4, r24	; 0x04
    tens = ones;
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    ones = thisChar;
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	8a 83       	std	Y+2, r24	; 0x02
    thisChar = receiveByte();                   /* get a new character */
    17ee:	0e 94 05 0a 	call	0x140a	; 0x140a <receiveByte>
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    transmitByte(thisChar);                                    /* echo */
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <transmitByte>
  } while (thisChar != '\r');                     /* until type return */
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	8d 30       	cpi	r24, 0x0D	; 13
    17fe:	89 f7       	brne	.-30     	; 0x17e2 <getNumber+0x1c>
  return (100 * (hundreds - '0') + 10 * (tens - '0') + ones - '0');
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	c0 97       	sbiw	r24, 0x30	; 48
    1808:	98 2f       	mov	r25, r24
    180a:	84 e6       	ldi	r24, 0x64	; 100
    180c:	98 9f       	mul	r25, r24
    180e:	20 2d       	mov	r18, r0
    1810:	11 24       	eor	r1, r1
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	c0 97       	sbiw	r24, 0x30	; 48
    181a:	88 0f       	add	r24, r24
    181c:	98 2f       	mov	r25, r24
    181e:	99 0f       	add	r25, r25
    1820:	99 0f       	add	r25, r25
    1822:	89 0f       	add	r24, r25
    1824:	92 2f       	mov	r25, r18
    1826:	98 0f       	add	r25, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	89 0f       	add	r24, r25
    182c:	80 53       	subi	r24, 0x30	; 48
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <main>:
#include "GeneralFunc.h"
#include "USART.h"
#include "Obs.h"
#include <util/delay.h>

int main(){
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	StateRobo.stateRobo = init;
    1844:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <StateRobo>
	CurrentPos.CurX = SquareMaze / 2;
    1848:	82 e1       	ldi	r24, 0x12	; 18
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <CurrentPos+0x1>
    1850:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <CurrentPos>
	CurrentPos.CurY = SquareMaze / 2;
    1854:	82 e1       	ldi	r24, 0x12	; 18
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <CurrentPos+0x3>
    185c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <CurrentPos+0x2>
	DirToGo.goesto = positifX;
    1860:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <DirToGo>
	DirToGo.gomotor = goForward;
    1864:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <DirToGo+0x1>
	headdirect.px = head;
    1868:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <headdirect>
	headdirect.py = tail;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <headdirect+0x1>
	headdirect.mx = tail;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 93 9f 20 	sts	0x209F, r24	; 0x80209f <headdirect+0x2>
	headdirect.my = tail;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <headdirect+0x3>
	initMaze();
    187e:	0e 94 6b 05 	call	0xad6	; 0xad6 <initMaze>
	MotorPinInit();
    1882:	0e 94 83 09 	call	0x1306	; 0x1306 <MotorPinInit>
	ObstacleInit();
    1886:	0e 94 94 09 	call	0x1328	; 0x1328 <ObstacleInit>
	pwm_init();
    188a:	0e 94 cf 02 	call	0x59e	; 0x59e <pwm_init>
	adc_init();
    188e:	0e 94 19 03 	call	0x632	; 0x632 <adc_init>
	initUSART();
    1892:	0e 94 c7 09 	call	0x138e	; 0x138e <initUSART>
	printString("hello World");
    1896:	82 e2       	ldi	r24, 0x22	; 34
    1898:	92 e0       	ldi	r25, 0x02	; 2
    189a:	0e 94 16 0a 	call	0x142c	; 0x142c <printString>
	//DDRB |= _BV(DDB5);
	//initUSART();
	//printString("Hello World");

	while(1){
		FiniteState(StateRobo.stateRobo);
    189e:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <StateRobo>
    18a2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <FiniteState>
		//_delay_ms(1000);
		//forward();
		//receiveString = receiveByte();
		//transmitByte(receiveString);
		//PORTB |= _BV(receiveString);
	}
    18a6:	fb cf       	rjmp	.-10     	; 0x189e <main+0x62>

000018a8 <__umulhisi3>:
    18a8:	a2 9f       	mul	r26, r18
    18aa:	b0 01       	movw	r22, r0
    18ac:	b3 9f       	mul	r27, r19
    18ae:	c0 01       	movw	r24, r0
    18b0:	a3 9f       	mul	r26, r19
    18b2:	70 0d       	add	r23, r0
    18b4:	81 1d       	adc	r24, r1
    18b6:	11 24       	eor	r1, r1
    18b8:	91 1d       	adc	r25, r1
    18ba:	b2 9f       	mul	r27, r18
    18bc:	70 0d       	add	r23, r0
    18be:	81 1d       	adc	r24, r1
    18c0:	11 24       	eor	r1, r1
    18c2:	91 1d       	adc	r25, r1
    18c4:	08 95       	ret

000018c6 <__subsf3>:
    18c6:	50 58       	subi	r21, 0x80	; 128

000018c8 <__addsf3>:
    18c8:	bb 27       	eor	r27, r27
    18ca:	aa 27       	eor	r26, r26
    18cc:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__addsf3x>
    18d0:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__fp_round>
    18d4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__fp_pscA>
    18d8:	38 f0       	brcs	.+14     	; 0x18e8 <__addsf3+0x20>
    18da:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscB>
    18de:	20 f0       	brcs	.+8      	; 0x18e8 <__addsf3+0x20>
    18e0:	39 f4       	brne	.+14     	; 0x18f0 <__addsf3+0x28>
    18e2:	9f 3f       	cpi	r25, 0xFF	; 255
    18e4:	19 f4       	brne	.+6      	; 0x18ec <__addsf3+0x24>
    18e6:	26 f4       	brtc	.+8      	; 0x18f0 <__addsf3+0x28>
    18e8:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>
    18ec:	0e f4       	brtc	.+2      	; 0x18f0 <__addsf3+0x28>
    18ee:	e0 95       	com	r30
    18f0:	e7 fb       	bst	r30, 7
    18f2:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>

000018f6 <__addsf3x>:
    18f6:	e9 2f       	mov	r30, r25
    18f8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__fp_split3>
    18fc:	58 f3       	brcs	.-42     	; 0x18d4 <__addsf3+0xc>
    18fe:	ba 17       	cp	r27, r26
    1900:	62 07       	cpc	r22, r18
    1902:	73 07       	cpc	r23, r19
    1904:	84 07       	cpc	r24, r20
    1906:	95 07       	cpc	r25, r21
    1908:	20 f0       	brcs	.+8      	; 0x1912 <__addsf3x+0x1c>
    190a:	79 f4       	brne	.+30     	; 0x192a <__addsf3x+0x34>
    190c:	a6 f5       	brtc	.+104    	; 0x1976 <__addsf3x+0x80>
    190e:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_zero>
    1912:	0e f4       	brtc	.+2      	; 0x1916 <__addsf3x+0x20>
    1914:	e0 95       	com	r30
    1916:	0b 2e       	mov	r0, r27
    1918:	ba 2f       	mov	r27, r26
    191a:	a0 2d       	mov	r26, r0
    191c:	0b 01       	movw	r0, r22
    191e:	b9 01       	movw	r22, r18
    1920:	90 01       	movw	r18, r0
    1922:	0c 01       	movw	r0, r24
    1924:	ca 01       	movw	r24, r20
    1926:	a0 01       	movw	r20, r0
    1928:	11 24       	eor	r1, r1
    192a:	ff 27       	eor	r31, r31
    192c:	59 1b       	sub	r21, r25
    192e:	99 f0       	breq	.+38     	; 0x1956 <__addsf3x+0x60>
    1930:	59 3f       	cpi	r21, 0xF9	; 249
    1932:	50 f4       	brcc	.+20     	; 0x1948 <__addsf3x+0x52>
    1934:	50 3e       	cpi	r21, 0xE0	; 224
    1936:	68 f1       	brcs	.+90     	; 0x1992 <__addsf3x+0x9c>
    1938:	1a 16       	cp	r1, r26
    193a:	f0 40       	sbci	r31, 0x00	; 0
    193c:	a2 2f       	mov	r26, r18
    193e:	23 2f       	mov	r18, r19
    1940:	34 2f       	mov	r19, r20
    1942:	44 27       	eor	r20, r20
    1944:	58 5f       	subi	r21, 0xF8	; 248
    1946:	f3 cf       	rjmp	.-26     	; 0x192e <__addsf3x+0x38>
    1948:	46 95       	lsr	r20
    194a:	37 95       	ror	r19
    194c:	27 95       	ror	r18
    194e:	a7 95       	ror	r26
    1950:	f0 40       	sbci	r31, 0x00	; 0
    1952:	53 95       	inc	r21
    1954:	c9 f7       	brne	.-14     	; 0x1948 <__addsf3x+0x52>
    1956:	7e f4       	brtc	.+30     	; 0x1976 <__addsf3x+0x80>
    1958:	1f 16       	cp	r1, r31
    195a:	ba 0b       	sbc	r27, r26
    195c:	62 0b       	sbc	r22, r18
    195e:	73 0b       	sbc	r23, r19
    1960:	84 0b       	sbc	r24, r20
    1962:	ba f0       	brmi	.+46     	; 0x1992 <__addsf3x+0x9c>
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	a1 f0       	breq	.+40     	; 0x1990 <__addsf3x+0x9a>
    1968:	ff 0f       	add	r31, r31
    196a:	bb 1f       	adc	r27, r27
    196c:	66 1f       	adc	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	88 1f       	adc	r24, r24
    1972:	c2 f7       	brpl	.-16     	; 0x1964 <__addsf3x+0x6e>
    1974:	0e c0       	rjmp	.+28     	; 0x1992 <__addsf3x+0x9c>
    1976:	ba 0f       	add	r27, r26
    1978:	62 1f       	adc	r22, r18
    197a:	73 1f       	adc	r23, r19
    197c:	84 1f       	adc	r24, r20
    197e:	48 f4       	brcc	.+18     	; 0x1992 <__addsf3x+0x9c>
    1980:	87 95       	ror	r24
    1982:	77 95       	ror	r23
    1984:	67 95       	ror	r22
    1986:	b7 95       	ror	r27
    1988:	f7 95       	ror	r31
    198a:	9e 3f       	cpi	r25, 0xFE	; 254
    198c:	08 f0       	brcs	.+2      	; 0x1990 <__addsf3x+0x9a>
    198e:	b0 cf       	rjmp	.-160    	; 0x18f0 <__addsf3+0x28>
    1990:	93 95       	inc	r25
    1992:	88 0f       	add	r24, r24
    1994:	08 f0       	brcs	.+2      	; 0x1998 <__addsf3x+0xa2>
    1996:	99 27       	eor	r25, r25
    1998:	ee 0f       	add	r30, r30
    199a:	97 95       	ror	r25
    199c:	87 95       	ror	r24
    199e:	08 95       	ret

000019a0 <__cmpsf2>:
    19a0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fp_cmp>
    19a4:	08 f4       	brcc	.+2      	; 0x19a8 <__cmpsf2+0x8>
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	08 95       	ret

000019aa <__fixunssfsi>:
    19aa:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fp_splitA>
    19ae:	88 f0       	brcs	.+34     	; 0x19d2 <__fixunssfsi+0x28>
    19b0:	9f 57       	subi	r25, 0x7F	; 127
    19b2:	98 f0       	brcs	.+38     	; 0x19da <__fixunssfsi+0x30>
    19b4:	b9 2f       	mov	r27, r25
    19b6:	99 27       	eor	r25, r25
    19b8:	b7 51       	subi	r27, 0x17	; 23
    19ba:	b0 f0       	brcs	.+44     	; 0x19e8 <__fixunssfsi+0x3e>
    19bc:	e1 f0       	breq	.+56     	; 0x19f6 <__fixunssfsi+0x4c>
    19be:	66 0f       	add	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	1a f0       	brmi	.+6      	; 0x19ce <__fixunssfsi+0x24>
    19c8:	ba 95       	dec	r27
    19ca:	c9 f7       	brne	.-14     	; 0x19be <__fixunssfsi+0x14>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <__fixunssfsi+0x4c>
    19ce:	b1 30       	cpi	r27, 0x01	; 1
    19d0:	91 f0       	breq	.+36     	; 0x19f6 <__fixunssfsi+0x4c>
    19d2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__fp_zero>
    19d6:	b1 e0       	ldi	r27, 0x01	; 1
    19d8:	08 95       	ret
    19da:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_zero>
    19de:	67 2f       	mov	r22, r23
    19e0:	78 2f       	mov	r23, r24
    19e2:	88 27       	eor	r24, r24
    19e4:	b8 5f       	subi	r27, 0xF8	; 248
    19e6:	39 f0       	breq	.+14     	; 0x19f6 <__fixunssfsi+0x4c>
    19e8:	b9 3f       	cpi	r27, 0xF9	; 249
    19ea:	cc f3       	brlt	.-14     	; 0x19de <__fixunssfsi+0x34>
    19ec:	86 95       	lsr	r24
    19ee:	77 95       	ror	r23
    19f0:	67 95       	ror	r22
    19f2:	b3 95       	inc	r27
    19f4:	d9 f7       	brne	.-10     	; 0x19ec <__fixunssfsi+0x42>
    19f6:	3e f4       	brtc	.+14     	; 0x1a06 <__fixunssfsi+0x5c>
    19f8:	90 95       	com	r25
    19fa:	80 95       	com	r24
    19fc:	70 95       	com	r23
    19fe:	61 95       	neg	r22
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	08 95       	ret

00001a08 <__floatunsisf>:
    1a08:	e8 94       	clt
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <__floatsisf+0x12>

00001a0c <__floatsisf>:
    1a0c:	97 fb       	bst	r25, 7
    1a0e:	3e f4       	brtc	.+14     	; 0x1a1e <__floatsisf+0x12>
    1a10:	90 95       	com	r25
    1a12:	80 95       	com	r24
    1a14:	70 95       	com	r23
    1a16:	61 95       	neg	r22
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	99 23       	and	r25, r25
    1a20:	a9 f0       	breq	.+42     	; 0x1a4c <__floatsisf+0x40>
    1a22:	f9 2f       	mov	r31, r25
    1a24:	96 e9       	ldi	r25, 0x96	; 150
    1a26:	bb 27       	eor	r27, r27
    1a28:	93 95       	inc	r25
    1a2a:	f6 95       	lsr	r31
    1a2c:	87 95       	ror	r24
    1a2e:	77 95       	ror	r23
    1a30:	67 95       	ror	r22
    1a32:	b7 95       	ror	r27
    1a34:	f1 11       	cpse	r31, r1
    1a36:	f8 cf       	rjmp	.-16     	; 0x1a28 <__floatsisf+0x1c>
    1a38:	fa f4       	brpl	.+62     	; 0x1a78 <__floatsisf+0x6c>
    1a3a:	bb 0f       	add	r27, r27
    1a3c:	11 f4       	brne	.+4      	; 0x1a42 <__floatsisf+0x36>
    1a3e:	60 ff       	sbrs	r22, 0
    1a40:	1b c0       	rjmp	.+54     	; 0x1a78 <__floatsisf+0x6c>
    1a42:	6f 5f       	subi	r22, 0xFF	; 255
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	8f 4f       	sbci	r24, 0xFF	; 255
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	16 c0       	rjmp	.+44     	; 0x1a78 <__floatsisf+0x6c>
    1a4c:	88 23       	and	r24, r24
    1a4e:	11 f0       	breq	.+4      	; 0x1a54 <__floatsisf+0x48>
    1a50:	96 e9       	ldi	r25, 0x96	; 150
    1a52:	11 c0       	rjmp	.+34     	; 0x1a76 <__floatsisf+0x6a>
    1a54:	77 23       	and	r23, r23
    1a56:	21 f0       	breq	.+8      	; 0x1a60 <__floatsisf+0x54>
    1a58:	9e e8       	ldi	r25, 0x8E	; 142
    1a5a:	87 2f       	mov	r24, r23
    1a5c:	76 2f       	mov	r23, r22
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <__floatsisf+0x5e>
    1a60:	66 23       	and	r22, r22
    1a62:	71 f0       	breq	.+28     	; 0x1a80 <__floatsisf+0x74>
    1a64:	96 e8       	ldi	r25, 0x86	; 134
    1a66:	86 2f       	mov	r24, r22
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	2a f0       	brmi	.+10     	; 0x1a78 <__floatsisf+0x6c>
    1a6e:	9a 95       	dec	r25
    1a70:	66 0f       	add	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	88 1f       	adc	r24, r24
    1a76:	da f7       	brpl	.-10     	; 0x1a6e <__floatsisf+0x62>
    1a78:	88 0f       	add	r24, r24
    1a7a:	96 95       	lsr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	97 f9       	bld	r25, 7
    1a80:	08 95       	ret

00001a82 <__fp_cmp>:
    1a82:	99 0f       	add	r25, r25
    1a84:	00 08       	sbc	r0, r0
    1a86:	55 0f       	add	r21, r21
    1a88:	aa 0b       	sbc	r26, r26
    1a8a:	e0 e8       	ldi	r30, 0x80	; 128
    1a8c:	fe ef       	ldi	r31, 0xFE	; 254
    1a8e:	16 16       	cp	r1, r22
    1a90:	17 06       	cpc	r1, r23
    1a92:	e8 07       	cpc	r30, r24
    1a94:	f9 07       	cpc	r31, r25
    1a96:	c0 f0       	brcs	.+48     	; 0x1ac8 <__fp_cmp+0x46>
    1a98:	12 16       	cp	r1, r18
    1a9a:	13 06       	cpc	r1, r19
    1a9c:	e4 07       	cpc	r30, r20
    1a9e:	f5 07       	cpc	r31, r21
    1aa0:	98 f0       	brcs	.+38     	; 0x1ac8 <__fp_cmp+0x46>
    1aa2:	62 1b       	sub	r22, r18
    1aa4:	73 0b       	sbc	r23, r19
    1aa6:	84 0b       	sbc	r24, r20
    1aa8:	95 0b       	sbc	r25, r21
    1aaa:	39 f4       	brne	.+14     	; 0x1aba <__fp_cmp+0x38>
    1aac:	0a 26       	eor	r0, r26
    1aae:	61 f0       	breq	.+24     	; 0x1ac8 <__fp_cmp+0x46>
    1ab0:	23 2b       	or	r18, r19
    1ab2:	24 2b       	or	r18, r20
    1ab4:	25 2b       	or	r18, r21
    1ab6:	21 f4       	brne	.+8      	; 0x1ac0 <__fp_cmp+0x3e>
    1ab8:	08 95       	ret
    1aba:	0a 26       	eor	r0, r26
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <__fp_cmp+0x3e>
    1abe:	a1 40       	sbci	r26, 0x01	; 1
    1ac0:	a6 95       	lsr	r26
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	81 1d       	adc	r24, r1
    1ac6:	81 1d       	adc	r24, r1
    1ac8:	08 95       	ret

00001aca <__fp_inf>:
    1aca:	97 f9       	bld	r25, 7
    1acc:	9f 67       	ori	r25, 0x7F	; 127
    1ace:	80 e8       	ldi	r24, 0x80	; 128
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	08 95       	ret

00001ad6 <__fp_nan>:
    1ad6:	9f ef       	ldi	r25, 0xFF	; 255
    1ad8:	80 ec       	ldi	r24, 0xC0	; 192
    1ada:	08 95       	ret

00001adc <__fp_pscA>:
    1adc:	00 24       	eor	r0, r0
    1ade:	0a 94       	dec	r0
    1ae0:	16 16       	cp	r1, r22
    1ae2:	17 06       	cpc	r1, r23
    1ae4:	18 06       	cpc	r1, r24
    1ae6:	09 06       	cpc	r0, r25
    1ae8:	08 95       	ret

00001aea <__fp_pscB>:
    1aea:	00 24       	eor	r0, r0
    1aec:	0a 94       	dec	r0
    1aee:	12 16       	cp	r1, r18
    1af0:	13 06       	cpc	r1, r19
    1af2:	14 06       	cpc	r1, r20
    1af4:	05 06       	cpc	r0, r21
    1af6:	08 95       	ret

00001af8 <__fp_round>:
    1af8:	09 2e       	mov	r0, r25
    1afa:	03 94       	inc	r0
    1afc:	00 0c       	add	r0, r0
    1afe:	11 f4       	brne	.+4      	; 0x1b04 <__fp_round+0xc>
    1b00:	88 23       	and	r24, r24
    1b02:	52 f0       	brmi	.+20     	; 0x1b18 <__fp_round+0x20>
    1b04:	bb 0f       	add	r27, r27
    1b06:	40 f4       	brcc	.+16     	; 0x1b18 <__fp_round+0x20>
    1b08:	bf 2b       	or	r27, r31
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <__fp_round+0x18>
    1b0c:	60 ff       	sbrs	r22, 0
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <__fp_round+0x20>
    1b10:	6f 5f       	subi	r22, 0xFF	; 255
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	8f 4f       	sbci	r24, 0xFF	; 255
    1b16:	9f 4f       	sbci	r25, 0xFF	; 255
    1b18:	08 95       	ret

00001b1a <__fp_split3>:
    1b1a:	57 fd       	sbrc	r21, 7
    1b1c:	90 58       	subi	r25, 0x80	; 128
    1b1e:	44 0f       	add	r20, r20
    1b20:	55 1f       	adc	r21, r21
    1b22:	59 f0       	breq	.+22     	; 0x1b3a <__fp_splitA+0x10>
    1b24:	5f 3f       	cpi	r21, 0xFF	; 255
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <__fp_splitA+0x1a>
    1b28:	47 95       	ror	r20

00001b2a <__fp_splitA>:
    1b2a:	88 0f       	add	r24, r24
    1b2c:	97 fb       	bst	r25, 7
    1b2e:	99 1f       	adc	r25, r25
    1b30:	61 f0       	breq	.+24     	; 0x1b4a <__fp_splitA+0x20>
    1b32:	9f 3f       	cpi	r25, 0xFF	; 255
    1b34:	79 f0       	breq	.+30     	; 0x1b54 <__fp_splitA+0x2a>
    1b36:	87 95       	ror	r24
    1b38:	08 95       	ret
    1b3a:	12 16       	cp	r1, r18
    1b3c:	13 06       	cpc	r1, r19
    1b3e:	14 06       	cpc	r1, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	f2 cf       	rjmp	.-28     	; 0x1b28 <__fp_split3+0xe>
    1b44:	46 95       	lsr	r20
    1b46:	f1 df       	rcall	.-30     	; 0x1b2a <__fp_splitA>
    1b48:	08 c0       	rjmp	.+16     	; 0x1b5a <__fp_splitA+0x30>
    1b4a:	16 16       	cp	r1, r22
    1b4c:	17 06       	cpc	r1, r23
    1b4e:	18 06       	cpc	r1, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	f1 cf       	rjmp	.-30     	; 0x1b36 <__fp_splitA+0xc>
    1b54:	86 95       	lsr	r24
    1b56:	71 05       	cpc	r23, r1
    1b58:	61 05       	cpc	r22, r1
    1b5a:	08 94       	sec
    1b5c:	08 95       	ret

00001b5e <__fp_zero>:
    1b5e:	e8 94       	clt

00001b60 <__fp_szero>:
    1b60:	bb 27       	eor	r27, r27
    1b62:	66 27       	eor	r22, r22
    1b64:	77 27       	eor	r23, r23
    1b66:	cb 01       	movw	r24, r22
    1b68:	97 f9       	bld	r25, 7
    1b6a:	08 95       	ret

00001b6c <__gesf2>:
    1b6c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fp_cmp>
    1b70:	08 f4       	brcc	.+2      	; 0x1b74 <__gesf2+0x8>
    1b72:	8f ef       	ldi	r24, 0xFF	; 255
    1b74:	08 95       	ret

00001b76 <__mulsf3>:
    1b76:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__mulsf3x>
    1b7a:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__fp_round>
    1b7e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__fp_pscA>
    1b82:	38 f0       	brcs	.+14     	; 0x1b92 <__mulsf3+0x1c>
    1b84:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscB>
    1b88:	20 f0       	brcs	.+8      	; 0x1b92 <__mulsf3+0x1c>
    1b8a:	95 23       	and	r25, r21
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <__mulsf3+0x1c>
    1b8e:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    1b92:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>
    1b96:	11 24       	eor	r1, r1
    1b98:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>

00001b9c <__mulsf3x>:
    1b9c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__fp_split3>
    1ba0:	70 f3       	brcs	.-36     	; 0x1b7e <__mulsf3+0x8>

00001ba2 <__mulsf3_pse>:
    1ba2:	95 9f       	mul	r25, r21
    1ba4:	c1 f3       	breq	.-16     	; 0x1b96 <__mulsf3+0x20>
    1ba6:	95 0f       	add	r25, r21
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	55 1f       	adc	r21, r21
    1bac:	62 9f       	mul	r22, r18
    1bae:	f0 01       	movw	r30, r0
    1bb0:	72 9f       	mul	r23, r18
    1bb2:	bb 27       	eor	r27, r27
    1bb4:	f0 0d       	add	r31, r0
    1bb6:	b1 1d       	adc	r27, r1
    1bb8:	63 9f       	mul	r22, r19
    1bba:	aa 27       	eor	r26, r26
    1bbc:	f0 0d       	add	r31, r0
    1bbe:	b1 1d       	adc	r27, r1
    1bc0:	aa 1f       	adc	r26, r26
    1bc2:	64 9f       	mul	r22, r20
    1bc4:	66 27       	eor	r22, r22
    1bc6:	b0 0d       	add	r27, r0
    1bc8:	a1 1d       	adc	r26, r1
    1bca:	66 1f       	adc	r22, r22
    1bcc:	82 9f       	mul	r24, r18
    1bce:	22 27       	eor	r18, r18
    1bd0:	b0 0d       	add	r27, r0
    1bd2:	a1 1d       	adc	r26, r1
    1bd4:	62 1f       	adc	r22, r18
    1bd6:	73 9f       	mul	r23, r19
    1bd8:	b0 0d       	add	r27, r0
    1bda:	a1 1d       	adc	r26, r1
    1bdc:	62 1f       	adc	r22, r18
    1bde:	83 9f       	mul	r24, r19
    1be0:	a0 0d       	add	r26, r0
    1be2:	61 1d       	adc	r22, r1
    1be4:	22 1f       	adc	r18, r18
    1be6:	74 9f       	mul	r23, r20
    1be8:	33 27       	eor	r19, r19
    1bea:	a0 0d       	add	r26, r0
    1bec:	61 1d       	adc	r22, r1
    1bee:	23 1f       	adc	r18, r19
    1bf0:	84 9f       	mul	r24, r20
    1bf2:	60 0d       	add	r22, r0
    1bf4:	21 1d       	adc	r18, r1
    1bf6:	82 2f       	mov	r24, r18
    1bf8:	76 2f       	mov	r23, r22
    1bfa:	6a 2f       	mov	r22, r26
    1bfc:	11 24       	eor	r1, r1
    1bfe:	9f 57       	subi	r25, 0x7F	; 127
    1c00:	50 40       	sbci	r21, 0x00	; 0
    1c02:	9a f0       	brmi	.+38     	; 0x1c2a <__mulsf3_pse+0x88>
    1c04:	f1 f0       	breq	.+60     	; 0x1c42 <__mulsf3_pse+0xa0>
    1c06:	88 23       	and	r24, r24
    1c08:	4a f0       	brmi	.+18     	; 0x1c1c <__mulsf3_pse+0x7a>
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	66 1f       	adc	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	88 1f       	adc	r24, r24
    1c16:	91 50       	subi	r25, 0x01	; 1
    1c18:	50 40       	sbci	r21, 0x00	; 0
    1c1a:	a9 f7       	brne	.-22     	; 0x1c06 <__mulsf3_pse+0x64>
    1c1c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c1e:	51 05       	cpc	r21, r1
    1c20:	80 f0       	brcs	.+32     	; 0x1c42 <__mulsf3_pse+0xa0>
    1c22:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    1c26:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>
    1c2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c2c:	e4 f3       	brlt	.-8      	; 0x1c26 <__mulsf3_pse+0x84>
    1c2e:	98 3e       	cpi	r25, 0xE8	; 232
    1c30:	d4 f3       	brlt	.-12     	; 0x1c26 <__mulsf3_pse+0x84>
    1c32:	86 95       	lsr	r24
    1c34:	77 95       	ror	r23
    1c36:	67 95       	ror	r22
    1c38:	b7 95       	ror	r27
    1c3a:	f7 95       	ror	r31
    1c3c:	e7 95       	ror	r30
    1c3e:	9f 5f       	subi	r25, 0xFF	; 255
    1c40:	c1 f7       	brne	.-16     	; 0x1c32 <__mulsf3_pse+0x90>
    1c42:	fe 2b       	or	r31, r30
    1c44:	88 0f       	add	r24, r24
    1c46:	91 1d       	adc	r25, r1
    1c48:	96 95       	lsr	r25
    1c4a:	87 95       	ror	r24
    1c4c:	97 f9       	bld	r25, 7
    1c4e:	08 95       	ret

00001c50 <pow>:
    1c50:	fa 01       	movw	r30, r20
    1c52:	ee 0f       	add	r30, r30
    1c54:	ff 1f       	adc	r31, r31
    1c56:	30 96       	adiw	r30, 0x00	; 0
    1c58:	21 05       	cpc	r18, r1
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	a1 f1       	breq	.+104    	; 0x1cc6 <pow+0x76>
    1c5e:	61 15       	cp	r22, r1
    1c60:	71 05       	cpc	r23, r1
    1c62:	61 f4       	brne	.+24     	; 0x1c7c <pow+0x2c>
    1c64:	80 38       	cpi	r24, 0x80	; 128
    1c66:	bf e3       	ldi	r27, 0x3F	; 63
    1c68:	9b 07       	cpc	r25, r27
    1c6a:	49 f1       	breq	.+82     	; 0x1cbe <pow+0x6e>
    1c6c:	68 94       	set
    1c6e:	90 38       	cpi	r25, 0x80	; 128
    1c70:	81 05       	cpc	r24, r1
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <pow+0x3c>
    1c74:	80 38       	cpi	r24, 0x80	; 128
    1c76:	bf ef       	ldi	r27, 0xFF	; 255
    1c78:	9b 07       	cpc	r25, r27
    1c7a:	41 f0       	breq	.+16     	; 0x1c8c <pow+0x3c>
    1c7c:	99 23       	and	r25, r25
    1c7e:	4a f5       	brpl	.+82     	; 0x1cd2 <pow+0x82>
    1c80:	ff 3f       	cpi	r31, 0xFF	; 255
    1c82:	e1 05       	cpc	r30, r1
    1c84:	31 05       	cpc	r19, r1
    1c86:	21 05       	cpc	r18, r1
    1c88:	19 f1       	breq	.+70     	; 0x1cd0 <pow+0x80>
    1c8a:	e8 94       	clt
    1c8c:	08 94       	sec
    1c8e:	e7 95       	ror	r30
    1c90:	d9 01       	movw	r26, r18
    1c92:	aa 23       	and	r26, r26
    1c94:	29 f4       	brne	.+10     	; 0x1ca0 <pow+0x50>
    1c96:	ab 2f       	mov	r26, r27
    1c98:	be 2f       	mov	r27, r30
    1c9a:	f8 5f       	subi	r31, 0xF8	; 248
    1c9c:	d0 f3       	brcs	.-12     	; 0x1c92 <pow+0x42>
    1c9e:	10 c0       	rjmp	.+32     	; 0x1cc0 <pow+0x70>
    1ca0:	ff 5f       	subi	r31, 0xFF	; 255
    1ca2:	70 f4       	brcc	.+28     	; 0x1cc0 <pow+0x70>
    1ca4:	a6 95       	lsr	r26
    1ca6:	e0 f7       	brcc	.-8      	; 0x1ca0 <pow+0x50>
    1ca8:	f7 39       	cpi	r31, 0x97	; 151
    1caa:	50 f0       	brcs	.+20     	; 0x1cc0 <pow+0x70>
    1cac:	19 f0       	breq	.+6      	; 0x1cb4 <pow+0x64>
    1cae:	ff 3a       	cpi	r31, 0xAF	; 175
    1cb0:	38 f4       	brcc	.+14     	; 0x1cc0 <pow+0x70>
    1cb2:	9f 77       	andi	r25, 0x7F	; 127
    1cb4:	9f 93       	push	r25
    1cb6:	0d d0       	rcall	.+26     	; 0x1cd2 <pow+0x82>
    1cb8:	0f 90       	pop	r0
    1cba:	07 fc       	sbrc	r0, 7
    1cbc:	90 58       	subi	r25, 0x80	; 128
    1cbe:	08 95       	ret
    1cc0:	46 f0       	brts	.+16     	; 0x1cd2 <pow+0x82>
    1cc2:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	80 e8       	ldi	r24, 0x80	; 128
    1ccc:	9f e3       	ldi	r25, 0x3F	; 63
    1cce:	08 95       	ret
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	9f 77       	andi	r25, 0x7F	; 127
    1cd4:	5f 93       	push	r21
    1cd6:	4f 93       	push	r20
    1cd8:	3f 93       	push	r19
    1cda:	2f 93       	push	r18
    1cdc:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <log>
    1ce0:	2f 91       	pop	r18
    1ce2:	3f 91       	pop	r19
    1ce4:	4f 91       	pop	r20
    1ce6:	5f 91       	pop	r21
    1ce8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__mulsf3>
    1cec:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <exp>
    1cf0:	19 f4       	brne	.+6      	; 0x1cf8 <pow+0xa8>
    1cf2:	16 f4       	brtc	.+4      	; 0x1cf8 <pow+0xa8>
    1cf4:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>
    1cf8:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_mpack>

00001cfc <sqrt>:
    1cfc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fp_splitA>
    1d00:	b8 f3       	brcs	.-18     	; 0x1cf0 <pow+0xa0>
    1d02:	99 23       	and	r25, r25
    1d04:	c9 f3       	breq	.-14     	; 0x1cf8 <pow+0xa8>
    1d06:	b6 f3       	brts	.-20     	; 0x1cf4 <pow+0xa4>
    1d08:	9f 57       	subi	r25, 0x7F	; 127
    1d0a:	55 0b       	sbc	r21, r21
    1d0c:	87 ff       	sbrs	r24, 7
    1d0e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__fp_norm2>
    1d12:	00 24       	eor	r0, r0
    1d14:	a0 e6       	ldi	r26, 0x60	; 96
    1d16:	40 ea       	ldi	r20, 0xA0	; 160
    1d18:	90 01       	movw	r18, r0
    1d1a:	80 58       	subi	r24, 0x80	; 128
    1d1c:	56 95       	lsr	r21
    1d1e:	97 95       	ror	r25
    1d20:	28 f4       	brcc	.+10     	; 0x1d2c <sqrt+0x30>
    1d22:	80 5c       	subi	r24, 0xC0	; 192
    1d24:	66 0f       	add	r22, r22
    1d26:	77 1f       	adc	r23, r23
    1d28:	88 1f       	adc	r24, r24
    1d2a:	20 f0       	brcs	.+8      	; 0x1d34 <sqrt+0x38>
    1d2c:	26 17       	cp	r18, r22
    1d2e:	37 07       	cpc	r19, r23
    1d30:	48 07       	cpc	r20, r24
    1d32:	30 f4       	brcc	.+12     	; 0x1d40 <sqrt+0x44>
    1d34:	62 1b       	sub	r22, r18
    1d36:	73 0b       	sbc	r23, r19
    1d38:	84 0b       	sbc	r24, r20
    1d3a:	20 29       	or	r18, r0
    1d3c:	31 29       	or	r19, r1
    1d3e:	4a 2b       	or	r20, r26
    1d40:	a6 95       	lsr	r26
    1d42:	17 94       	ror	r1
    1d44:	07 94       	ror	r0
    1d46:	20 25       	eor	r18, r0
    1d48:	31 25       	eor	r19, r1
    1d4a:	4a 27       	eor	r20, r26
    1d4c:	58 f7       	brcc	.-42     	; 0x1d24 <sqrt+0x28>
    1d4e:	66 0f       	add	r22, r22
    1d50:	77 1f       	adc	r23, r23
    1d52:	88 1f       	adc	r24, r24
    1d54:	20 f0       	brcs	.+8      	; 0x1d5e <sqrt+0x62>
    1d56:	26 17       	cp	r18, r22
    1d58:	37 07       	cpc	r19, r23
    1d5a:	48 07       	cpc	r20, r24
    1d5c:	30 f4       	brcc	.+12     	; 0x1d6a <sqrt+0x6e>
    1d5e:	62 0b       	sbc	r22, r18
    1d60:	73 0b       	sbc	r23, r19
    1d62:	84 0b       	sbc	r24, r20
    1d64:	20 0d       	add	r18, r0
    1d66:	31 1d       	adc	r19, r1
    1d68:	41 1d       	adc	r20, r1
    1d6a:	a0 95       	com	r26
    1d6c:	81 f7       	brne	.-32     	; 0x1d4e <sqrt+0x52>
    1d6e:	b9 01       	movw	r22, r18
    1d70:	84 2f       	mov	r24, r20
    1d72:	91 58       	subi	r25, 0x81	; 129
    1d74:	88 0f       	add	r24, r24
    1d76:	96 95       	lsr	r25
    1d78:	87 95       	ror	r24
    1d7a:	08 95       	ret
    1d7c:	29 f4       	brne	.+10     	; 0x1d88 <sqrt+0x8c>
    1d7e:	16 f0       	brts	.+4      	; 0x1d84 <sqrt+0x88>
    1d80:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    1d84:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_zero>
    1d88:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>

00001d8c <exp>:
    1d8c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fp_splitA>
    1d90:	a8 f3       	brcs	.-22     	; 0x1d7c <sqrt+0x80>
    1d92:	96 38       	cpi	r25, 0x86	; 134
    1d94:	a0 f7       	brcc	.-24     	; 0x1d7e <sqrt+0x82>
    1d96:	07 f8       	bld	r0, 7
    1d98:	0f 92       	push	r0
    1d9a:	e8 94       	clt
    1d9c:	2b e3       	ldi	r18, 0x3B	; 59
    1d9e:	3a ea       	ldi	r19, 0xAA	; 170
    1da0:	48 eb       	ldi	r20, 0xB8	; 184
    1da2:	5f e7       	ldi	r21, 0x7F	; 127
    1da4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3_pse>
    1da8:	0f 92       	push	r0
    1daa:	0f 92       	push	r0
    1dac:	0f 92       	push	r0
    1dae:	4d b7       	in	r20, 0x3d	; 61
    1db0:	5e b7       	in	r21, 0x3e	; 62
    1db2:	0f 92       	push	r0
    1db4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <modf>
    1db8:	e4 ee       	ldi	r30, 0xE4	; 228
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fp_powser>
    1dc0:	4f 91       	pop	r20
    1dc2:	5f 91       	pop	r21
    1dc4:	ef 91       	pop	r30
    1dc6:	ff 91       	pop	r31
    1dc8:	e5 95       	asr	r30
    1dca:	ee 1f       	adc	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	49 f0       	breq	.+18     	; 0x1de2 <exp+0x56>
    1dd0:	fe 57       	subi	r31, 0x7E	; 126
    1dd2:	e0 68       	ori	r30, 0x80	; 128
    1dd4:	44 27       	eor	r20, r20
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	44 1f       	adc	r20, r20
    1dda:	fa 95       	dec	r31
    1ddc:	e1 f7       	brne	.-8      	; 0x1dd6 <exp+0x4a>
    1dde:	41 95       	neg	r20
    1de0:	55 0b       	sbc	r21, r21
    1de2:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <ldexp>
    1de6:	0f 90       	pop	r0
    1de8:	07 fe       	sbrs	r0, 7
    1dea:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <inverse>
    1dee:	08 95       	ret

00001df0 <__fp_mpack>:
    1df0:	9f 3f       	cpi	r25, 0xFF	; 255
    1df2:	31 f0       	breq	.+12     	; 0x1e00 <__fp_mpack_finite+0xc>

00001df4 <__fp_mpack_finite>:
    1df4:	91 50       	subi	r25, 0x01	; 1
    1df6:	20 f4       	brcc	.+8      	; 0x1e00 <__fp_mpack_finite+0xc>
    1df8:	87 95       	ror	r24
    1dfa:	77 95       	ror	r23
    1dfc:	67 95       	ror	r22
    1dfe:	b7 95       	ror	r27
    1e00:	88 0f       	add	r24, r24
    1e02:	91 1d       	adc	r25, r1
    1e04:	96 95       	lsr	r25
    1e06:	87 95       	ror	r24
    1e08:	97 f9       	bld	r25, 7
    1e0a:	08 95       	ret

00001e0c <__fp_norm2>:
    1e0c:	91 50       	subi	r25, 0x01	; 1
    1e0e:	50 40       	sbci	r21, 0x00	; 0
    1e10:	66 0f       	add	r22, r22
    1e12:	77 1f       	adc	r23, r23
    1e14:	88 1f       	adc	r24, r24
    1e16:	d2 f7       	brpl	.-12     	; 0x1e0c <__fp_norm2>
    1e18:	08 95       	ret

00001e1a <__fp_powser>:
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	1f 93       	push	r17
    1e20:	0f 93       	push	r16
    1e22:	ff 92       	push	r15
    1e24:	ef 92       	push	r14
    1e26:	df 92       	push	r13
    1e28:	7b 01       	movw	r14, r22
    1e2a:	8c 01       	movw	r16, r24
    1e2c:	68 94       	set
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <__fp_powser+0x22>
    1e30:	da 2e       	mov	r13, r26
    1e32:	ef 01       	movw	r28, r30
    1e34:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__mulsf3x>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e8 94       	clt
    1e3c:	a5 91       	lpm	r26, Z+
    1e3e:	25 91       	lpm	r18, Z+
    1e40:	35 91       	lpm	r19, Z+
    1e42:	45 91       	lpm	r20, Z+
    1e44:	55 91       	lpm	r21, Z+
    1e46:	a6 f3       	brts	.-24     	; 0x1e30 <__fp_powser+0x16>
    1e48:	ef 01       	movw	r28, r30
    1e4a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__addsf3x>
    1e4e:	fe 01       	movw	r30, r28
    1e50:	97 01       	movw	r18, r14
    1e52:	a8 01       	movw	r20, r16
    1e54:	da 94       	dec	r13
    1e56:	69 f7       	brne	.-38     	; 0x1e32 <__fp_powser+0x18>
    1e58:	df 90       	pop	r13
    1e5a:	ef 90       	pop	r14
    1e5c:	ff 90       	pop	r15
    1e5e:	0f 91       	pop	r16
    1e60:	1f 91       	pop	r17
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <inverse>:
    1e68:	9b 01       	movw	r18, r22
    1e6a:	ac 01       	movw	r20, r24
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	80 e8       	ldi	r24, 0x80	; 128
    1e72:	9f e3       	ldi	r25, 0x3F	; 63
    1e74:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__divsf3>
    1e78:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    1e7c:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_mpack>

00001e80 <ldexp>:
    1e80:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fp_splitA>
    1e84:	d8 f3       	brcs	.-10     	; 0x1e7c <inverse+0x14>
    1e86:	99 23       	and	r25, r25
    1e88:	c9 f3       	breq	.-14     	; 0x1e7c <inverse+0x14>
    1e8a:	94 0f       	add	r25, r20
    1e8c:	51 1d       	adc	r21, r1
    1e8e:	a3 f3       	brvs	.-24     	; 0x1e78 <inverse+0x10>
    1e90:	91 50       	subi	r25, 0x01	; 1
    1e92:	50 40       	sbci	r21, 0x00	; 0
    1e94:	94 f0       	brlt	.+36     	; 0x1eba <ldexp+0x3a>
    1e96:	59 f0       	breq	.+22     	; 0x1eae <ldexp+0x2e>
    1e98:	88 23       	and	r24, r24
    1e9a:	32 f0       	brmi	.+12     	; 0x1ea8 <ldexp+0x28>
    1e9c:	66 0f       	add	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	91 50       	subi	r25, 0x01	; 1
    1ea4:	50 40       	sbci	r21, 0x00	; 0
    1ea6:	c1 f7       	brne	.-16     	; 0x1e98 <ldexp+0x18>
    1ea8:	9e 3f       	cpi	r25, 0xFE	; 254
    1eaa:	51 05       	cpc	r21, r1
    1eac:	2c f7       	brge	.-54     	; 0x1e78 <inverse+0x10>
    1eae:	88 0f       	add	r24, r24
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	96 95       	lsr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	97 f9       	bld	r25, 7
    1eb8:	08 95       	ret
    1eba:	5f 3f       	cpi	r21, 0xFF	; 255
    1ebc:	ac f0       	brlt	.+42     	; 0x1ee8 <ldexp+0x68>
    1ebe:	98 3e       	cpi	r25, 0xE8	; 232
    1ec0:	9c f0       	brlt	.+38     	; 0x1ee8 <ldexp+0x68>
    1ec2:	bb 27       	eor	r27, r27
    1ec4:	86 95       	lsr	r24
    1ec6:	77 95       	ror	r23
    1ec8:	67 95       	ror	r22
    1eca:	b7 95       	ror	r27
    1ecc:	08 f4       	brcc	.+2      	; 0x1ed0 <ldexp+0x50>
    1ece:	b1 60       	ori	r27, 0x01	; 1
    1ed0:	93 95       	inc	r25
    1ed2:	c1 f7       	brne	.-16     	; 0x1ec4 <ldexp+0x44>
    1ed4:	bb 0f       	add	r27, r27
    1ed6:	58 f7       	brcc	.-42     	; 0x1eae <ldexp+0x2e>
    1ed8:	11 f4       	brne	.+4      	; 0x1ede <ldexp+0x5e>
    1eda:	60 ff       	sbrs	r22, 0
    1edc:	e8 cf       	rjmp	.-48     	; 0x1eae <ldexp+0x2e>
    1ede:	6f 5f       	subi	r22, 0xFF	; 255
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee6:	e3 cf       	rjmp	.-58     	; 0x1eae <ldexp+0x2e>
    1ee8:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>
    1eec:	16 f0       	brts	.+4      	; 0x1ef2 <ldexp+0x72>
    1eee:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_mpack>
    1ef2:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>
    1ef6:	68 94       	set
    1ef8:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>

00001efc <log>:
    1efc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fp_splitA>
    1f00:	a8 f3       	brcs	.-22     	; 0x1eec <ldexp+0x6c>
    1f02:	99 23       	and	r25, r25
    1f04:	c1 f3       	breq	.-16     	; 0x1ef6 <ldexp+0x76>
    1f06:	ae f3       	brts	.-22     	; 0x1ef2 <ldexp+0x72>
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	1f 93       	push	r17
    1f0e:	0f 93       	push	r16
    1f10:	ff 92       	push	r15
    1f12:	c9 2f       	mov	r28, r25
    1f14:	dd 27       	eor	r29, r29
    1f16:	88 23       	and	r24, r24
    1f18:	2a f0       	brmi	.+10     	; 0x1f24 <log+0x28>
    1f1a:	21 97       	sbiw	r28, 0x01	; 1
    1f1c:	66 0f       	add	r22, r22
    1f1e:	77 1f       	adc	r23, r23
    1f20:	88 1f       	adc	r24, r24
    1f22:	da f7       	brpl	.-10     	; 0x1f1a <log+0x1e>
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f eb       	ldi	r21, 0xBF	; 191
    1f2c:	9f e3       	ldi	r25, 0x3F	; 63
    1f2e:	88 39       	cpi	r24, 0x98	; 152
    1f30:	20 f0       	brcs	.+8      	; 0x1f3a <log+0x3e>
    1f32:	80 3e       	cpi	r24, 0xE0	; 224
    1f34:	38 f0       	brcs	.+14     	; 0x1f44 <log+0x48>
    1f36:	21 96       	adiw	r28, 0x01	; 1
    1f38:	8f 77       	andi	r24, 0x7F	; 127
    1f3a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__addsf3>
    1f3e:	ec e0       	ldi	r30, 0x0C	; 12
    1f40:	f1 e0       	ldi	r31, 0x01	; 1
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <log+0x50>
    1f44:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__addsf3>
    1f48:	e9 e3       	ldi	r30, 0x39	; 57
    1f4a:	f1 e0       	ldi	r31, 0x01	; 1
    1f4c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fp_powser>
    1f50:	8b 01       	movw	r16, r22
    1f52:	be 01       	movw	r22, r28
    1f54:	ec 01       	movw	r28, r24
    1f56:	fb 2e       	mov	r15, r27
    1f58:	6f 57       	subi	r22, 0x7F	; 127
    1f5a:	71 09       	sbc	r23, r1
    1f5c:	75 95       	asr	r23
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 0b       	sbc	r24, r24
    1f62:	99 0b       	sbc	r25, r25
    1f64:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__floatsisf>
    1f68:	28 e1       	ldi	r18, 0x18	; 24
    1f6a:	32 e7       	ldi	r19, 0x72	; 114
    1f6c:	41 e3       	ldi	r20, 0x31	; 49
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__mulsf3x>
    1f74:	af 2d       	mov	r26, r15
    1f76:	98 01       	movw	r18, r16
    1f78:	ae 01       	movw	r20, r28
    1f7a:	ff 90       	pop	r15
    1f7c:	0f 91       	pop	r16
    1f7e:	1f 91       	pop	r17
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__addsf3x>
    1f88:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__fp_round>

00001f8c <modf>:
    1f8c:	fa 01       	movw	r30, r20
    1f8e:	dc 01       	movw	r26, r24
    1f90:	aa 0f       	add	r26, r26
    1f92:	bb 1f       	adc	r27, r27
    1f94:	9b 01       	movw	r18, r22
    1f96:	ac 01       	movw	r20, r24
    1f98:	bf 57       	subi	r27, 0x7F	; 127
    1f9a:	28 f4       	brcc	.+10     	; 0x1fa6 <modf+0x1a>
    1f9c:	22 27       	eor	r18, r18
    1f9e:	33 27       	eor	r19, r19
    1fa0:	44 27       	eor	r20, r20
    1fa2:	50 78       	andi	r21, 0x80	; 128
    1fa4:	20 c0       	rjmp	.+64     	; 0x1fe6 <modf+0x5a>
    1fa6:	b7 51       	subi	r27, 0x17	; 23
    1fa8:	90 f4       	brcc	.+36     	; 0x1fce <modf+0x42>
    1faa:	ab 2f       	mov	r26, r27
    1fac:	00 24       	eor	r0, r0
    1fae:	46 95       	lsr	r20
    1fb0:	37 95       	ror	r19
    1fb2:	27 95       	ror	r18
    1fb4:	01 1c       	adc	r0, r1
    1fb6:	a3 95       	inc	r26
    1fb8:	d2 f3       	brmi	.-12     	; 0x1fae <modf+0x22>
    1fba:	00 20       	and	r0, r0
    1fbc:	71 f0       	breq	.+28     	; 0x1fda <modf+0x4e>
    1fbe:	22 0f       	add	r18, r18
    1fc0:	33 1f       	adc	r19, r19
    1fc2:	44 1f       	adc	r20, r20
    1fc4:	b3 95       	inc	r27
    1fc6:	da f3       	brmi	.-10     	; 0x1fbe <modf+0x32>
    1fc8:	0e d0       	rcall	.+28     	; 0x1fe6 <modf+0x5a>
    1fca:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__subsf3>
    1fce:	61 30       	cpi	r22, 0x01	; 1
    1fd0:	71 05       	cpc	r23, r1
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	8a 07       	cpc	r24, r26
    1fd6:	b9 46       	sbci	r27, 0x69	; 105
    1fd8:	30 f4       	brcc	.+12     	; 0x1fe6 <modf+0x5a>
    1fda:	9b 01       	movw	r18, r22
    1fdc:	ac 01       	movw	r20, r24
    1fde:	66 27       	eor	r22, r22
    1fe0:	77 27       	eor	r23, r23
    1fe2:	88 27       	eor	r24, r24
    1fe4:	90 78       	andi	r25, 0x80	; 128
    1fe6:	30 96       	adiw	r30, 0x00	; 0
    1fe8:	21 f0       	breq	.+8      	; 0x1ff2 <modf+0x66>
    1fea:	20 83       	st	Z, r18
    1fec:	31 83       	std	Z+1, r19	; 0x01
    1fee:	42 83       	std	Z+2, r20	; 0x02
    1ff0:	53 83       	std	Z+3, r21	; 0x03
    1ff2:	08 95       	ret

00001ff4 <__divsf3>:
    1ff4:	0e 94 0e 10 	call	0x201c	; 0x201c <__divsf3x>
    1ff8:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__fp_round>
    1ffc:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscB>
    2000:	58 f0       	brcs	.+22     	; 0x2018 <__divsf3+0x24>
    2002:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__fp_pscA>
    2006:	40 f0       	brcs	.+16     	; 0x2018 <__divsf3+0x24>
    2008:	29 f4       	brne	.+10     	; 0x2014 <__divsf3+0x20>
    200a:	5f 3f       	cpi	r21, 0xFF	; 255
    200c:	29 f0       	breq	.+10     	; 0x2018 <__divsf3+0x24>
    200e:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    2012:	51 11       	cpse	r21, r1
    2014:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>
    2018:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>

0000201c <__divsf3x>:
    201c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__fp_split3>
    2020:	68 f3       	brcs	.-38     	; 0x1ffc <__divsf3+0x8>

00002022 <__divsf3_pse>:
    2022:	99 23       	and	r25, r25
    2024:	b1 f3       	breq	.-20     	; 0x2012 <__divsf3+0x1e>
    2026:	55 23       	and	r21, r21
    2028:	91 f3       	breq	.-28     	; 0x200e <__divsf3+0x1a>
    202a:	95 1b       	sub	r25, r21
    202c:	55 0b       	sbc	r21, r21
    202e:	bb 27       	eor	r27, r27
    2030:	aa 27       	eor	r26, r26
    2032:	62 17       	cp	r22, r18
    2034:	73 07       	cpc	r23, r19
    2036:	84 07       	cpc	r24, r20
    2038:	38 f0       	brcs	.+14     	; 0x2048 <__divsf3_pse+0x26>
    203a:	9f 5f       	subi	r25, 0xFF	; 255
    203c:	5f 4f       	sbci	r21, 0xFF	; 255
    203e:	22 0f       	add	r18, r18
    2040:	33 1f       	adc	r19, r19
    2042:	44 1f       	adc	r20, r20
    2044:	aa 1f       	adc	r26, r26
    2046:	a9 f3       	breq	.-22     	; 0x2032 <__divsf3_pse+0x10>
    2048:	35 d0       	rcall	.+106    	; 0x20b4 <__divsf3_pse+0x92>
    204a:	0e 2e       	mov	r0, r30
    204c:	3a f0       	brmi	.+14     	; 0x205c <__divsf3_pse+0x3a>
    204e:	e0 e8       	ldi	r30, 0x80	; 128
    2050:	32 d0       	rcall	.+100    	; 0x20b6 <__divsf3_pse+0x94>
    2052:	91 50       	subi	r25, 0x01	; 1
    2054:	50 40       	sbci	r21, 0x00	; 0
    2056:	e6 95       	lsr	r30
    2058:	00 1c       	adc	r0, r0
    205a:	ca f7       	brpl	.-14     	; 0x204e <__divsf3_pse+0x2c>
    205c:	2b d0       	rcall	.+86     	; 0x20b4 <__divsf3_pse+0x92>
    205e:	fe 2f       	mov	r31, r30
    2060:	29 d0       	rcall	.+82     	; 0x20b4 <__divsf3_pse+0x92>
    2062:	66 0f       	add	r22, r22
    2064:	77 1f       	adc	r23, r23
    2066:	88 1f       	adc	r24, r24
    2068:	bb 1f       	adc	r27, r27
    206a:	26 17       	cp	r18, r22
    206c:	37 07       	cpc	r19, r23
    206e:	48 07       	cpc	r20, r24
    2070:	ab 07       	cpc	r26, r27
    2072:	b0 e8       	ldi	r27, 0x80	; 128
    2074:	09 f0       	breq	.+2      	; 0x2078 <__divsf3_pse+0x56>
    2076:	bb 0b       	sbc	r27, r27
    2078:	80 2d       	mov	r24, r0
    207a:	bf 01       	movw	r22, r30
    207c:	ff 27       	eor	r31, r31
    207e:	93 58       	subi	r25, 0x83	; 131
    2080:	5f 4f       	sbci	r21, 0xFF	; 255
    2082:	3a f0       	brmi	.+14     	; 0x2092 <__divsf3_pse+0x70>
    2084:	9e 3f       	cpi	r25, 0xFE	; 254
    2086:	51 05       	cpc	r21, r1
    2088:	78 f0       	brcs	.+30     	; 0x20a8 <__divsf3_pse+0x86>
    208a:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    208e:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>
    2092:	5f 3f       	cpi	r21, 0xFF	; 255
    2094:	e4 f3       	brlt	.-8      	; 0x208e <__divsf3_pse+0x6c>
    2096:	98 3e       	cpi	r25, 0xE8	; 232
    2098:	d4 f3       	brlt	.-12     	; 0x208e <__divsf3_pse+0x6c>
    209a:	86 95       	lsr	r24
    209c:	77 95       	ror	r23
    209e:	67 95       	ror	r22
    20a0:	b7 95       	ror	r27
    20a2:	f7 95       	ror	r31
    20a4:	9f 5f       	subi	r25, 0xFF	; 255
    20a6:	c9 f7       	brne	.-14     	; 0x209a <__divsf3_pse+0x78>
    20a8:	88 0f       	add	r24, r24
    20aa:	91 1d       	adc	r25, r1
    20ac:	96 95       	lsr	r25
    20ae:	87 95       	ror	r24
    20b0:	97 f9       	bld	r25, 7
    20b2:	08 95       	ret
    20b4:	e1 e0       	ldi	r30, 0x01	; 1
    20b6:	66 0f       	add	r22, r22
    20b8:	77 1f       	adc	r23, r23
    20ba:	88 1f       	adc	r24, r24
    20bc:	bb 1f       	adc	r27, r27
    20be:	62 17       	cp	r22, r18
    20c0:	73 07       	cpc	r23, r19
    20c2:	84 07       	cpc	r24, r20
    20c4:	ba 07       	cpc	r27, r26
    20c6:	20 f0       	brcs	.+8      	; 0x20d0 <__divsf3_pse+0xae>
    20c8:	62 1b       	sub	r22, r18
    20ca:	73 0b       	sbc	r23, r19
    20cc:	84 0b       	sbc	r24, r20
    20ce:	ba 0b       	sbc	r27, r26
    20d0:	ee 1f       	adc	r30, r30
    20d2:	88 f7       	brcc	.-30     	; 0x20b6 <__divsf3_pse+0x94>
    20d4:	e0 95       	com	r30
    20d6:	08 95       	ret

000020d8 <_exit>:
    20d8:	f8 94       	cli

000020da <__stop_program>:
    20da:	ff cf       	rjmp	.-2      	; 0x20da <__stop_program>


Brave_Adventurer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800200  00002dda  00002e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001c3a  00800342  00800342  00002fb0  2**0
                  ALLOC
  3 .stab         00003bdc  00000000  00000000  00002fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001626  00000000  00000000  00006b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000081b2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000081c4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  00008dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000098da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  000098f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <CheckObs+0x480>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ea ed       	ldi	r30, 0xDA	; 218
     17e:	fd e2       	ldi	r31, 0x2D	; 45
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a2 34       	cpi	r26, 0x42	; 66
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	2f e1       	ldi	r18, 0x1F	; 31
     192:	a2 e4       	ldi	r26, 0x42	; 66
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ac 37       	cpi	r26, 0x7C	; 124
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 b8 12 	call	0x2570	; 0x2570 <main>
     1a4:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <FiniteState>:
#include "MapMaze.h"
#include "Obs.h"
#include "USART.h"
#include "util/delay.h"

void FiniteState(state currentState){
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	89 83       	std	Y+1, r24	; 0x01

	switch(currentState)
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	88 2f       	mov	r24, r24
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	91 05       	cpc	r25, r1
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <FiniteState+0x1a>
     1c4:	47 c0       	rjmp	.+142    	; 0x254 <FiniteState+0xa8>
     1c6:	83 30       	cpi	r24, 0x03	; 3
     1c8:	91 05       	cpc	r25, r1
     1ca:	2c f4       	brge	.+10     	; 0x1d6 <FiniteState+0x2a>
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	79 f0       	breq	.+30     	; 0x1ee <FiniteState+0x42>
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	21 f1       	breq	.+72     	; 0x21c <FiniteState+0x70>
			stops();
			StateRobo.stateRobo = null;
			break;
	}

}
     1d4:	b0 c0       	rjmp	.+352    	; 0x336 <FiniteState+0x18a>
#include "USART.h"
#include "util/delay.h"

void FiniteState(state currentState){

	switch(currentState)
     1d6:	84 30       	cpi	r24, 0x04	; 4
     1d8:	91 05       	cpc	r25, r1
     1da:	09 f4       	brne	.+2      	; 0x1de <FiniteState+0x32>
     1dc:	8e c0       	rjmp	.+284    	; 0x2fa <FiniteState+0x14e>
     1de:	84 30       	cpi	r24, 0x04	; 4
     1e0:	91 05       	cpc	r25, r1
     1e2:	0c f4       	brge	.+2      	; 0x1e6 <FiniteState+0x3a>
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <FiniteState+0xe6>
     1e6:	05 97       	sbiw	r24, 0x05	; 5
     1e8:	09 f4       	brne	.+2      	; 0x1ec <FiniteState+0x40>
     1ea:	9f c0       	rjmp	.+318    	; 0x32a <FiniteState+0x17e>
			stops();
			StateRobo.stateRobo = null;
			break;
	}

}
     1ec:	a4 c0       	rjmp	.+328    	; 0x336 <FiniteState+0x18a>
void FiniteState(state currentState){

	switch(currentState)
	{
		case init :
			CheckObs(CurrentPos.CurX, CurrentPos.CurY);
     1ee:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <CurrentPos+0x2>
     1f2:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <CurrentPos+0x3>
     1f6:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <CurrentPos>
     1fa:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <CurrentPos+0x1>
     1fe:	b9 01       	movw	r22, r18
     200:	0e 94 70 02 	call	0x4e0	; 0x4e0 <CheckObs>
			WhereYouGo();
     204:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <WhereYouGo>
			StateRobo.stateRobo = lookaround;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
			printString("init \r \n");
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
			CurStateRobo.stateRobo = init;
     216:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <CurStateRobo>
			break;
     21a:	8d c0       	rjmp	.+282    	; 0x336 <FiniteState+0x18a>
		case lookaround :
			if(CheckObs(CurrentPos.CurX, CurrentPos.CurY) == true){
     21c:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <CurrentPos+0x2>
     220:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <CurrentPos+0x3>
     224:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <CurrentPos>
     228:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <CurrentPos+0x1>
     22c:	b9 01       	movw	r22, r18
     22e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <CheckObs>
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	41 f4       	brne	.+16     	; 0x246 <FiniteState+0x9a>
				StateRobo.stateRobo = step;
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
				printString("Lookaround \r \n");
     23c:	89 e0       	ldi	r24, 0x09	; 9
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
     244:	03 c0       	rjmp	.+6      	; 0x24c <FiniteState+0xa0>
			}
			else{
				StateRobo.stateRobo = endway;
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
			}
			CurStateRobo.stateRobo = lookaround;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <CurStateRobo>
			break;
     252:	71 c0       	rjmp	.+226    	; 0x336 <FiniteState+0x18a>
		case step :
			WhereYouGo();
     254:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <WhereYouGo>
			printString("Step \r \n");
     258:	88 e1       	ldi	r24, 0x18	; 24
     25a:	92 e0       	ldi	r25, 0x02	; 2
     25c:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
			if(CurStateRobo.stateRobo == lookaround) StateRobo.stateRobo = lookaround;
     260:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <CurStateRobo>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	19 f4       	brne	.+6      	; 0x26e <FiniteState+0xc2>
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
			if(CurStateRobo.stateRobo == endway) StateRobo.stateRobo = endway;
     26e:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <CurStateRobo>
     272:	83 30       	cpi	r24, 0x03	; 3
     274:	19 f4       	brne	.+6      	; 0x27c <FiniteState+0xd0>
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
			if(CurStateRobo.stateRobo == backhome) StateRobo.stateRobo = backhome;
     27c:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <CurStateRobo>
     280:	84 30       	cpi	r24, 0x04	; 4
     282:	19 f4       	brne	.+6      	; 0x28a <FiniteState+0xde>
     284:	84 e0       	ldi	r24, 0x04	; 4
     286:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
			CurStateRobo.stateRobo = step;
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <CurStateRobo>
			break;
     290:	52 c0       	rjmp	.+164    	; 0x336 <FiniteState+0x18a>
		case endway :
			imstuck = FindTheDest(CurrentPos.CurX, CurrentPos.CurY);
     292:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <CurrentPos+0x2>
     296:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <CurrentPos+0x3>
     29a:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <CurrentPos>
     29e:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <CurrentPos+0x1>
     2a2:	b9 01       	movw	r22, r18
     2a4:	0e 94 57 0d 	call	0x1aae	; 0x1aae <FindTheDest>
     2a8:	80 93 75 1f 	sts	0x1F75, r24	; 0x801f75 <imstuck>
			if (imstuck == false){
     2ac:	80 91 75 1f 	lds	r24, 0x1F75	; 0x801f75 <imstuck>
     2b0:	88 23       	and	r24, r24
     2b2:	41 f4       	brne	.+16     	; 0x2c4 <FiniteState+0x118>
				printString("FALSE");
     2b4:	81 e2       	ldi	r24, 0x21	; 33
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				StateRobo.stateRobo = step;
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
     2c2:	17 c0       	rjmp	.+46     	; 0x2f2 <FiniteState+0x146>
			}
			else if (imstuck == neither){
     2c4:	80 91 75 1f 	lds	r24, 0x1F75	; 0x801f75 <imstuck>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	41 f4       	brne	.+16     	; 0x2dc <FiniteState+0x130>
				StateRobo.stateRobo = backhome;
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
				printString("NEITHER");
     2d2:	87 e2       	ldi	r24, 0x27	; 39
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
     2da:	0b c0       	rjmp	.+22     	; 0x2f2 <FiniteState+0x146>
			}
			else if (imstuck == true){
     2dc:	80 91 75 1f 	lds	r24, 0x1F75	; 0x801f75 <imstuck>
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	39 f4       	brne	.+14     	; 0x2f2 <FiniteState+0x146>
				printString("TRUE");
     2e4:	8f e2       	ldi	r24, 0x2F	; 47
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				StateRobo.stateRobo = lookaround;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
			}
			CurStateRobo.stateRobo = endway;
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <CurStateRobo>
			break;
     2f8:	1e c0       	rjmp	.+60     	; 0x336 <FiniteState+0x18a>
		case backhome :
			/*
			 * This is very complicated, return to home position
			 *
			 */
			if (BackToHome(CurrentPos.CurX, CurrentPos.CurY) == false){
     2fa:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <CurrentPos+0x2>
     2fe:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <CurrentPos+0x3>
     302:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <CurrentPos>
     306:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <CurrentPos+0x1>
     30a:	b9 01       	movw	r22, r18
     30c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <BackToHome>
     310:	89 2b       	or	r24, r25
     312:	21 f4       	brne	.+8      	; 0x31c <FiniteState+0x170>
				StateRobo.stateRobo = step;
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
     31a:	03 c0       	rjmp	.+6      	; 0x322 <FiniteState+0x176>
			}
			else{
				StateRobo.stateRobo = null;
     31c:	85 e0       	ldi	r24, 0x05	; 5
     31e:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
			}
			CurStateRobo.stateRobo = backhome;
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <CurStateRobo>
			break;
     328:	06 c0       	rjmp	.+12     	; 0x336 <FiniteState+0x18a>
		case null :
			stops();
     32a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <stops>
			StateRobo.stateRobo = null;
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	80 93 74 1f 	sts	0x1F74, r24	; 0x801f74 <StateRobo>
			break;
     334:	00 00       	nop
	}

}
     336:	00 00       	nop
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <analogWrite>:

#include <avr/io.h>
#include "GeneralFunc.h"
#include "PinDefined.h"

void analogWrite(uint8_t pin, uint8_t val){
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	1f 92       	push	r1
     346:	1f 92       	push	r1
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	6a 83       	std	Y+2, r22	; 0x02

 DDRH |= (DDRH & 0x00) | (pin & 0xFF);
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	fc 01       	movw	r30, r24
     356:	80 81       	ld	r24, Z
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	48 2f       	mov	r20, r24
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	21 e0       	ldi	r18, 0x01	; 1
     364:	31 e0       	ldi	r19, 0x01	; 1
     366:	f9 01       	movw	r30, r18
     368:	20 81       	ld	r18, Z
     36a:	32 2f       	mov	r19, r18
     36c:	24 2f       	mov	r18, r20
     36e:	23 2b       	or	r18, r19
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
 switch(pin){
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	80 31       	cpi	r24, 0x10	; 16
     37c:	91 05       	cpc	r25, r1
     37e:	99 f0       	breq	.+38     	; 0x3a6 <analogWrite+0x66>
     380:	81 31       	cpi	r24, 0x11	; 17
     382:	91 05       	cpc	r25, r1
     384:	e9 f0       	breq	.+58     	; 0x3c0 <analogWrite+0x80>
     386:	08 97       	sbiw	r24, 0x08	; 8
     388:	09 f0       	breq	.+2      	; 0x38c <analogWrite+0x4c>
  	  case(0x11):
		OCR4A = val;
  	  	OCR4B = val;
  	  break;
  }
}
     38a:	2b c0       	rjmp	.+86     	; 0x3e2 <analogWrite+0xa2>
void analogWrite(uint8_t pin, uint8_t val){

 DDRH |= (DDRH & 0x00) | (pin & 0xFF);
 switch(pin){
  	  case(0x08):
		OCR4A = val;
     38c:	88 ea       	ldi	r24, 0xA8	; 168
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	2a 81       	ldd	r18, Y+2	; 0x02
     392:	22 2f       	mov	r18, r18
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	fc 01       	movw	r30, r24
     398:	31 83       	std	Z+1, r19	; 0x01
     39a:	20 83       	st	Z, r18
  	  	printString("4A \r\n");
     39c:	84 e3       	ldi	r24, 0x34	; 52
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
  	  break;
     3a4:	1e c0       	rjmp	.+60     	; 0x3e2 <analogWrite+0xa2>
  	  case(0x10):
		OCR4B = val;
     3a6:	8a ea       	ldi	r24, 0xAA	; 170
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	2a 81       	ldd	r18, Y+2	; 0x02
     3ac:	22 2f       	mov	r18, r18
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	fc 01       	movw	r30, r24
     3b2:	31 83       	std	Z+1, r19	; 0x01
     3b4:	20 83       	st	Z, r18
  	  	printString("4B \r\n");
     3b6:	8a e3       	ldi	r24, 0x3A	; 58
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
  	  break;
     3be:	11 c0       	rjmp	.+34     	; 0x3e2 <analogWrite+0xa2>
  	  case(0x11):
		OCR4A = val;
     3c0:	88 ea       	ldi	r24, 0xA8	; 168
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2a 81       	ldd	r18, Y+2	; 0x02
     3c6:	22 2f       	mov	r18, r18
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	31 83       	std	Z+1, r19	; 0x01
     3ce:	20 83       	st	Z, r18
  	  	OCR4B = val;
     3d0:	8a ea       	ldi	r24, 0xAA	; 170
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2a 81       	ldd	r18, Y+2	; 0x02
     3d6:	22 2f       	mov	r18, r18
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	fc 01       	movw	r30, r24
     3dc:	31 83       	std	Z+1, r19	; 0x01
     3de:	20 83       	st	Z, r18
  	  break;
     3e0:	00 00       	nop
  }
}
     3e2:	00 00       	nop
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <pwm_init>:

void pwm_init(){
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
  TCCR4A |= _BV(COM4A1) | _BV(COM4B1) | _BV(WGM41) | _BV(WGM40);
     3f6:	80 ea       	ldi	r24, 0xA0	; 160
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	20 ea       	ldi	r18, 0xA0	; 160
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	f9 01       	movw	r30, r18
     400:	20 81       	ld	r18, Z
     402:	23 6a       	ori	r18, 0xA3	; 163
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
  TCCR4B |= _BV(CS41) | _BV(CS40);
     408:	81 ea       	ldi	r24, 0xA1	; 161
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	21 ea       	ldi	r18, 0xA1	; 161
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	23 60       	ori	r18, 0x03	; 3
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18

}
     41a:	00 00       	nop
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <analogRead>:

uint16_t analogRead(uint8_t port){
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	1f 92       	push	r1
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xF0) | (port & 0x0F);
     42e:	8c e7       	ldi	r24, 0x7C	; 124
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	2c e7       	ldi	r18, 0x7C	; 124
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	f9 01       	movw	r30, r18
     438:	20 81       	ld	r18, Z
     43a:	32 2f       	mov	r19, r18
     43c:	30 7f       	andi	r19, 0xF0	; 240
     43e:	29 81       	ldd	r18, Y+1	; 0x01
     440:	2f 70       	andi	r18, 0x0F	; 15
     442:	23 2b       	or	r18, r19
     444:	fc 01       	movw	r30, r24
     446:	20 83       	st	Z, r18

	ADCSRA |= (1 << ADSC);
     448:	8a e7       	ldi	r24, 0x7A	; 122
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	2a e7       	ldi	r18, 0x7A	; 122
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	f9 01       	movw	r30, r18
     452:	20 81       	ld	r18, Z
     454:	20 64       	ori	r18, 0x40	; 64
     456:	fc 01       	movw	r30, r24
     458:	20 83       	st	Z, r18

	while(ADCSRA & (1<<ADSC));
     45a:	00 00       	nop
     45c:	8a e7       	ldi	r24, 0x7A	; 122
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	80 81       	ld	r24, Z
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 74       	andi	r24, 0x40	; 64
     46a:	99 27       	eor	r25, r25
     46c:	89 2b       	or	r24, r25
     46e:	b1 f7       	brne	.-20     	; 0x45c <analogRead+0x3a>

	return ADC;
     470:	88 e7       	ldi	r24, 0x78	; 120
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	fc 01       	movw	r30, r24
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
}
     47a:	0f 90       	pop	r0
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <adc_init>:

void adc_init(){
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= _BV(REFS0);
     48a:	8c e7       	ldi	r24, 0x7C	; 124
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	2c e7       	ldi	r18, 0x7C	; 124
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	f9 01       	movw	r30, r18
     494:	20 81       	ld	r18, Z
     496:	20 64       	ori	r18, 0x40	; 64
     498:	fc 01       	movw	r30, r24
     49a:	20 83       	st	Z, r18
	ADCSRA |= _BV(ADPS2) | _BV(ADEN);
     49c:	8a e7       	ldi	r24, 0x7A	; 122
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	2a e7       	ldi	r18, 0x7A	; 122
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	24 68       	ori	r18, 0x84	; 132
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18
}
     4ae:	00 00       	nop
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <mapping>:

uint8_t mapping(uint16_t val){
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <mapping+0x6>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	9b 83       	std	Y+3, r25	; 0x03
     4c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t mapped;

	mapped = val / (1023 / 255);
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	9b 81       	ldd	r25, Y+3	; 0x03
     4c8:	96 95       	lsr	r25
     4ca:	87 95       	ror	r24
     4cc:	96 95       	lsr	r25
     4ce:	87 95       	ror	r24
     4d0:	89 83       	std	Y+1, r24	; 0x01

	return mapped;
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <CheckObs>:
#include "MapMaze.h"
#include "PinDefined.h"
#include "Obs.h"
#include <math.h>

bool CheckObs(uint16_t posX,uint16_t posY ){
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <CheckObs+0x8>
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	7c 83       	std	Y+4, r23	; 0x04
     4f4:	6b 83       	std	Y+3, r22	; 0x03
	if(((posX+1) <= SquareMaze) & ((posY+1) <= SquareMaze)){
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	31 e0       	ldi	r19, 0x01	; 1
     4fe:	cd 97       	sbiw	r24, 0x3d	; 61
     500:	08 f0       	brcs	.+2      	; 0x504 <CheckObs+0x24>
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	21 e0       	ldi	r18, 0x01	; 1
     50c:	cd 97       	sbiw	r24, 0x3d	; 61
     50e:	08 f0       	brcs	.+2      	; 0x512 <CheckObs+0x32>
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	83 2f       	mov	r24, r19
     514:	82 23       	and	r24, r18
     516:	88 23       	and	r24, r24
     518:	09 f4       	brne	.+2      	; 0x51c <CheckObs+0x3c>
     51a:	b8 c3       	rjmp	.+1904   	; 0xc8c <CheckObs+0x7ac>
		if(isExecute == true){
     51c:	80 91 73 1f 	lds	r24, 0x1F73	; 0x801f73 <isExecute>
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	09 f0       	breq	.+2      	; 0x526 <CheckObs+0x46>
     524:	b1 c3       	rjmp	.+1890   	; 0xc88 <CheckObs+0x7a8>
			printString("CheckOBS \r \n");
     526:	80 e4       	ldi	r24, 0x40	; 64
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
			if (headdirect.px == head){
     52e:	80 91 76 1f 	lds	r24, 0x1F76	; 0x801f76 <headdirect>
     532:	88 23       	and	r24, r24
     534:	09 f0       	breq	.+2      	; 0x538 <CheckObs+0x58>
     536:	e4 c0       	rjmp	.+456    	; 0x700 <CheckObs+0x220>
				printString("Head px ");
     538:	8d e4       	ldi	r24, 0x4D	; 77
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if((readObs(ObstacleB0) == PINtoInt(ObstacleB0)) & (maze[posX - 1][posY].isClear == false)){
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     546:	18 2f       	mov	r17, r24
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     54e:	41 e0       	ldi	r20, 0x01	; 1
     550:	18 17       	cp	r17, r24
     552:	09 f0       	breq	.+2      	; 0x556 <CheckObs+0x76>
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	5c e3       	ldi	r21, 0x3C	; 60
     55e:	58 9f       	mul	r21, r24
     560:	90 01       	movw	r18, r0
     562:	59 9f       	mul	r21, r25
     564:	30 0d       	add	r19, r0
     566:	11 24       	eor	r1, r1
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	9c 81       	ldd	r25, Y+4	; 0x04
     56c:	82 0f       	add	r24, r18
     56e:	93 1f       	adc	r25, r19
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	81 5b       	subi	r24, 0xB1	; 177
     576:	9c 4f       	sbci	r25, 0xFC	; 252
     578:	fc 01       	movw	r30, r24
     57a:	90 81       	ld	r25, Z
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	99 23       	and	r25, r25
     580:	09 f0       	breq	.+2      	; 0x584 <CheckObs+0xa4>
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	84 23       	and	r24, r20
     586:	88 23       	and	r24, r24
     588:	91 f0       	breq	.+36     	; 0x5ae <CheckObs+0xce>
					UpdateArray((posX - 1), posY);
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	9a 81       	ldd	r25, Y+2	; 0x02
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	2b 81       	ldd	r18, Y+3	; 0x03
     592:	3c 81       	ldd	r19, Y+4	; 0x04
     594:	b9 01       	movw	r22, r18
     596:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = negatifX;
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goBack;
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" B \r \n");
     5a6:	86 e5       	ldi	r24, 0x56	; 86
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleL) == PINtoInt(ObstacleL)) & (maze[posX][posY + 1].isClear == false)){
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     5b4:	18 2f       	mov	r17, r24
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	18 17       	cp	r17, r24
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <CheckObs+0xe4>
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	49 81       	ldd	r20, Y+1	; 0x01
     5cc:	5a 81       	ldd	r21, Y+2	; 0x02
     5ce:	7c e3       	ldi	r23, 0x3C	; 60
     5d0:	74 9f       	mul	r23, r20
     5d2:	90 01       	movw	r18, r0
     5d4:	75 9f       	mul	r23, r21
     5d6:	30 0d       	add	r19, r0
     5d8:	11 24       	eor	r1, r1
     5da:	82 0f       	add	r24, r18
     5dc:	93 1f       	adc	r25, r19
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	81 5b       	subi	r24, 0xB1	; 177
     5e4:	9c 4f       	sbci	r25, 0xFC	; 252
     5e6:	fc 01       	movw	r30, r24
     5e8:	90 81       	ld	r25, Z
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	99 23       	and	r25, r25
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <CheckObs+0x112>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	86 23       	and	r24, r22
     5f4:	88 23       	and	r24, r24
     5f6:	a1 f0       	breq	.+40     	; 0x620 <CheckObs+0x140>
					UpdateArray(posX, (posY + 1));
     5f8:	8b 81       	ldd	r24, Y+3	; 0x03
     5fa:	9c 81       	ldd	r25, Y+4	; 0x04
     5fc:	9c 01       	movw	r18, r24
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	b9 01       	movw	r22, r18
     608:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = positifY;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goLeft;
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" L ");
     618:	8d e5       	ldi	r24, 0x5D	; 93
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleR) == PINtoInt(ObstacleR)) & (maze[posX][posY - 1].isClear == false)){
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     626:	18 2f       	mov	r17, r24
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	18 17       	cp	r17, r24
     632:	09 f0       	breq	.+2      	; 0x636 <CheckObs+0x156>
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	9c 81       	ldd	r25, Y+4	; 0x04
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	49 81       	ldd	r20, Y+1	; 0x01
     63e:	5a 81       	ldd	r21, Y+2	; 0x02
     640:	7c e3       	ldi	r23, 0x3C	; 60
     642:	74 9f       	mul	r23, r20
     644:	90 01       	movw	r18, r0
     646:	75 9f       	mul	r23, r21
     648:	30 0d       	add	r19, r0
     64a:	11 24       	eor	r1, r1
     64c:	82 0f       	add	r24, r18
     64e:	93 1f       	adc	r25, r19
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	81 5b       	subi	r24, 0xB1	; 177
     656:	9c 4f       	sbci	r25, 0xFC	; 252
     658:	fc 01       	movw	r30, r24
     65a:	90 81       	ld	r25, Z
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	99 23       	and	r25, r25
     660:	09 f0       	breq	.+2      	; 0x664 <CheckObs+0x184>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	86 23       	and	r24, r22
     666:	88 23       	and	r24, r24
     668:	a1 f0       	breq	.+40     	; 0x692 <CheckObs+0x1b2>
					UpdateArray(posX, (posY - 1));
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	9c 81       	ldd	r25, Y+4	; 0x04
     66e:	9c 01       	movw	r18, r24
     670:	21 50       	subi	r18, 0x01	; 1
     672:	31 09       	sbc	r19, r1
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	9a 81       	ldd	r25, Y+2	; 0x02
     678:	b9 01       	movw	r22, r18
     67a:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = negatifY;
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goRight;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" R ");
     68a:	81 e6       	ldi	r24, 0x61	; 97
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleF0) == PINtoInt(ObstacleF0)) & (maze[posX + 1][posY].isClear == false)){
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     698:	18 2f       	mov	r17, r24
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	18 17       	cp	r17, r24
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <CheckObs+0x1c8>
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	5c e3       	ldi	r21, 0x3C	; 60
     6b0:	58 9f       	mul	r21, r24
     6b2:	90 01       	movw	r18, r0
     6b4:	59 9f       	mul	r21, r25
     6b6:	30 0d       	add	r19, r0
     6b8:	11 24       	eor	r1, r1
     6ba:	8b 81       	ldd	r24, Y+3	; 0x03
     6bc:	9c 81       	ldd	r25, Y+4	; 0x04
     6be:	82 0f       	add	r24, r18
     6c0:	93 1f       	adc	r25, r19
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	81 5b       	subi	r24, 0xB1	; 177
     6c8:	9c 4f       	sbci	r25, 0xFC	; 252
     6ca:	fc 01       	movw	r30, r24
     6cc:	90 81       	ld	r25, Z
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	99 23       	and	r25, r25
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <CheckObs+0x1f6>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	84 23       	and	r24, r20
     6d8:	88 23       	and	r24, r24
     6da:	09 f4       	brne	.+2      	; 0x6de <CheckObs+0x1fe>
     6dc:	d3 c2       	rjmp	.+1446   	; 0xc84 <CheckObs+0x7a4>
					UpdateArray((posX + 1), posY);
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	2b 81       	ldd	r18, Y+3	; 0x03
     6e6:	3c 81       	ldd	r19, Y+4	; 0x04
     6e8:	b9 01       	movw	r22, r18
     6ea:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = positifX;
     6ee:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
					DirToGo.gomotor = goForward;
     6f2:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
					printString(" F \r \n");
     6f6:	85 e6       	ldi	r24, 0x65	; 101
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
     6fe:	c2 c2       	rjmp	.+1412   	; 0xc84 <CheckObs+0x7a4>
				}
			}
			else if (headdirect.py == head){
     700:	80 91 77 1f 	lds	r24, 0x1F77	; 0x801f77 <headdirect+0x1>
     704:	88 23       	and	r24, r24
     706:	09 f0       	breq	.+2      	; 0x70a <CheckObs+0x22a>
     708:	e4 c0       	rjmp	.+456    	; 0x8d2 <CheckObs+0x3f2>
				printString("Head py ");
     70a:	8c e6       	ldi	r24, 0x6C	; 108
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if((readObs(ObstacleB0) == PINtoInt(ObstacleB0)) & (maze[posX][posY - 1].isClear == false)){
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     718:	18 2f       	mov	r17, r24
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	18 17       	cp	r17, r24
     724:	09 f0       	breq	.+2      	; 0x728 <CheckObs+0x248>
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	9c 81       	ldd	r25, Y+4	; 0x04
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	49 81       	ldd	r20, Y+1	; 0x01
     730:	5a 81       	ldd	r21, Y+2	; 0x02
     732:	7c e3       	ldi	r23, 0x3C	; 60
     734:	74 9f       	mul	r23, r20
     736:	90 01       	movw	r18, r0
     738:	75 9f       	mul	r23, r21
     73a:	30 0d       	add	r19, r0
     73c:	11 24       	eor	r1, r1
     73e:	82 0f       	add	r24, r18
     740:	93 1f       	adc	r25, r19
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	81 5b       	subi	r24, 0xB1	; 177
     748:	9c 4f       	sbci	r25, 0xFC	; 252
     74a:	fc 01       	movw	r30, r24
     74c:	90 81       	ld	r25, Z
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	99 23       	and	r25, r25
     752:	09 f0       	breq	.+2      	; 0x756 <CheckObs+0x276>
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	86 23       	and	r24, r22
     758:	88 23       	and	r24, r24
     75a:	a1 f0       	breq	.+40     	; 0x784 <CheckObs+0x2a4>
					UpdateArray(posX, (posY - 1));
     75c:	8b 81       	ldd	r24, Y+3	; 0x03
     75e:	9c 81       	ldd	r25, Y+4	; 0x04
     760:	9c 01       	movw	r18, r24
     762:	21 50       	subi	r18, 0x01	; 1
     764:	31 09       	sbc	r19, r1
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	b9 01       	movw	r22, r18
     76c:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = negatifY;
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goBack;
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" B \r \n");
     77c:	86 e5       	ldi	r24, 0x56	; 86
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleL) == PINtoInt(ObstacleL)) & (maze[posX - 1][posY].isClear == false)){
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     78a:	18 2f       	mov	r17, r24
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	18 17       	cp	r17, r24
     796:	09 f0       	breq	.+2      	; 0x79a <CheckObs+0x2ba>
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	5c e3       	ldi	r21, 0x3C	; 60
     7a2:	58 9f       	mul	r21, r24
     7a4:	90 01       	movw	r18, r0
     7a6:	59 9f       	mul	r21, r25
     7a8:	30 0d       	add	r19, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	9c 81       	ldd	r25, Y+4	; 0x04
     7b0:	82 0f       	add	r24, r18
     7b2:	93 1f       	adc	r25, r19
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	81 5b       	subi	r24, 0xB1	; 177
     7ba:	9c 4f       	sbci	r25, 0xFC	; 252
     7bc:	fc 01       	movw	r30, r24
     7be:	90 81       	ld	r25, Z
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	99 23       	and	r25, r25
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <CheckObs+0x2e8>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	84 23       	and	r24, r20
     7ca:	88 23       	and	r24, r24
     7cc:	91 f0       	breq	.+36     	; 0x7f2 <CheckObs+0x312>
					UpdateArray((posX -1), posY);
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	2b 81       	ldd	r18, Y+3	; 0x03
     7d6:	3c 81       	ldd	r19, Y+4	; 0x04
     7d8:	b9 01       	movw	r22, r18
     7da:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = negatifX;
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goLeft;
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" L ");
     7ea:	8d e5       	ldi	r24, 0x5D	; 93
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleR) == PINtoInt(ObstacleR)) & (maze[posX + 1][posY].isClear == false)){
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     7f8:	18 2f       	mov	r17, r24
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	18 17       	cp	r17, r24
     804:	09 f0       	breq	.+2      	; 0x808 <CheckObs+0x328>
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	5c e3       	ldi	r21, 0x3C	; 60
     810:	58 9f       	mul	r21, r24
     812:	90 01       	movw	r18, r0
     814:	59 9f       	mul	r21, r25
     816:	30 0d       	add	r19, r0
     818:	11 24       	eor	r1, r1
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	9c 81       	ldd	r25, Y+4	; 0x04
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	81 5b       	subi	r24, 0xB1	; 177
     828:	9c 4f       	sbci	r25, 0xFC	; 252
     82a:	fc 01       	movw	r30, r24
     82c:	90 81       	ld	r25, Z
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	99 23       	and	r25, r25
     832:	09 f0       	breq	.+2      	; 0x836 <CheckObs+0x356>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	84 23       	and	r24, r20
     838:	88 23       	and	r24, r24
     83a:	89 f0       	breq	.+34     	; 0x85e <CheckObs+0x37e>
					UpdateArray((posX + 1), posY);
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	2b 81       	ldd	r18, Y+3	; 0x03
     844:	3c 81       	ldd	r19, Y+4	; 0x04
     846:	b9 01       	movw	r22, r18
     848:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = positifX;
     84c:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
					DirToGo.gomotor = goRight;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" R ");
     856:	81 e6       	ldi	r24, 0x61	; 97
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleF0) == PINtoInt(ObstacleF0)) & (maze[posX][posY + 1].isClear == false)){
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     864:	18 2f       	mov	r17, r24
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	18 17       	cp	r17, r24
     870:	09 f0       	breq	.+2      	; 0x874 <CheckObs+0x394>
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	9c 81       	ldd	r25, Y+4	; 0x04
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	49 81       	ldd	r20, Y+1	; 0x01
     87c:	5a 81       	ldd	r21, Y+2	; 0x02
     87e:	7c e3       	ldi	r23, 0x3C	; 60
     880:	74 9f       	mul	r23, r20
     882:	90 01       	movw	r18, r0
     884:	75 9f       	mul	r23, r21
     886:	30 0d       	add	r19, r0
     888:	11 24       	eor	r1, r1
     88a:	82 0f       	add	r24, r18
     88c:	93 1f       	adc	r25, r19
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	81 5b       	subi	r24, 0xB1	; 177
     894:	9c 4f       	sbci	r25, 0xFC	; 252
     896:	fc 01       	movw	r30, r24
     898:	90 81       	ld	r25, Z
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	99 23       	and	r25, r25
     89e:	09 f0       	breq	.+2      	; 0x8a2 <CheckObs+0x3c2>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	86 23       	and	r24, r22
     8a4:	88 23       	and	r24, r24
     8a6:	09 f4       	brne	.+2      	; 0x8aa <CheckObs+0x3ca>
     8a8:	ed c1       	rjmp	.+986    	; 0xc84 <CheckObs+0x7a4>
					UpdateArray(posX, (posY + 1));
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	9c 81       	ldd	r25, Y+4	; 0x04
     8ae:	9c 01       	movw	r18, r24
     8b0:	2f 5f       	subi	r18, 0xFF	; 255
     8b2:	3f 4f       	sbci	r19, 0xFF	; 255
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	b9 01       	movw	r22, r18
     8ba:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = positifY;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goForward;
     8c4:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
					printString(" F \r\n ");
     8c8:	85 e7       	ldi	r24, 0x75	; 117
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
     8d0:	d9 c1       	rjmp	.+946    	; 0xc84 <CheckObs+0x7a4>
				}
			}
			else if (headdirect.mx == head){
     8d2:	80 91 78 1f 	lds	r24, 0x1F78	; 0x801f78 <headdirect+0x2>
     8d6:	88 23       	and	r24, r24
     8d8:	09 f0       	breq	.+2      	; 0x8dc <CheckObs+0x3fc>
     8da:	e4 c0       	rjmp	.+456    	; 0xaa4 <CheckObs+0x5c4>
				printString("Head mx ");
     8dc:	8c e7       	ldi	r24, 0x7C	; 124
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if((readObs(ObstacleB0) == PINtoInt(ObstacleB0)) & (maze[posX + 1][posY].isClear == false)){
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     8ea:	18 2f       	mov	r17, r24
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     8f2:	41 e0       	ldi	r20, 0x01	; 1
     8f4:	18 17       	cp	r17, r24
     8f6:	09 f0       	breq	.+2      	; 0x8fa <CheckObs+0x41a>
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	9a 81       	ldd	r25, Y+2	; 0x02
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	5c e3       	ldi	r21, 0x3C	; 60
     902:	58 9f       	mul	r21, r24
     904:	90 01       	movw	r18, r0
     906:	59 9f       	mul	r21, r25
     908:	30 0d       	add	r19, r0
     90a:	11 24       	eor	r1, r1
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	82 0f       	add	r24, r18
     912:	93 1f       	adc	r25, r19
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	81 5b       	subi	r24, 0xB1	; 177
     91a:	9c 4f       	sbci	r25, 0xFC	; 252
     91c:	fc 01       	movw	r30, r24
     91e:	90 81       	ld	r25, Z
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	99 23       	and	r25, r25
     924:	09 f0       	breq	.+2      	; 0x928 <CheckObs+0x448>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	84 23       	and	r24, r20
     92a:	88 23       	and	r24, r24
     92c:	89 f0       	breq	.+34     	; 0x950 <CheckObs+0x470>
					UpdateArray((posX + 1), posY);
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	2b 81       	ldd	r18, Y+3	; 0x03
     936:	3c 81       	ldd	r19, Y+4	; 0x04
     938:	b9 01       	movw	r22, r18
     93a:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = positifX;
     93e:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
					DirToGo.gomotor = goBack;
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" B \r \n");
     948:	86 e5       	ldi	r24, 0x56	; 86
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleL) == PINtoInt(ObstacleL)) & (maze[posX][posY - 1].isClear == false)){
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     956:	18 2f       	mov	r17, r24
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	18 17       	cp	r17, r24
     962:	09 f0       	breq	.+2      	; 0x966 <CheckObs+0x486>
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	8b 81       	ldd	r24, Y+3	; 0x03
     968:	9c 81       	ldd	r25, Y+4	; 0x04
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	49 81       	ldd	r20, Y+1	; 0x01
     96e:	5a 81       	ldd	r21, Y+2	; 0x02
     970:	7c e3       	ldi	r23, 0x3C	; 60
     972:	74 9f       	mul	r23, r20
     974:	90 01       	movw	r18, r0
     976:	75 9f       	mul	r23, r21
     978:	30 0d       	add	r19, r0
     97a:	11 24       	eor	r1, r1
     97c:	82 0f       	add	r24, r18
     97e:	93 1f       	adc	r25, r19
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	81 5b       	subi	r24, 0xB1	; 177
     986:	9c 4f       	sbci	r25, 0xFC	; 252
     988:	fc 01       	movw	r30, r24
     98a:	90 81       	ld	r25, Z
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	99 23       	and	r25, r25
     990:	09 f0       	breq	.+2      	; 0x994 <CheckObs+0x4b4>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	86 23       	and	r24, r22
     996:	88 23       	and	r24, r24
     998:	a1 f0       	breq	.+40     	; 0x9c2 <CheckObs+0x4e2>
					UpdateArray(posX, (posY - 1));
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	9c 01       	movw	r18, r24
     9a0:	21 50       	subi	r18, 0x01	; 1
     9a2:	31 09       	sbc	r19, r1
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	9a 81       	ldd	r25, Y+2	; 0x02
     9a8:	b9 01       	movw	r22, r18
     9aa:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = negatifY;
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goLeft;
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" L ");
     9ba:	8d e5       	ldi	r24, 0x5D	; 93
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleR) == PINtoInt(ObstacleR)) & (maze[posX][posY + 1].isClear == false)){
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     9c8:	18 2f       	mov	r17, r24
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	18 17       	cp	r17, r24
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <CheckObs+0x4f8>
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	49 81       	ldd	r20, Y+1	; 0x01
     9e0:	5a 81       	ldd	r21, Y+2	; 0x02
     9e2:	7c e3       	ldi	r23, 0x3C	; 60
     9e4:	74 9f       	mul	r23, r20
     9e6:	90 01       	movw	r18, r0
     9e8:	75 9f       	mul	r23, r21
     9ea:	30 0d       	add	r19, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	82 0f       	add	r24, r18
     9f0:	93 1f       	adc	r25, r19
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	81 5b       	subi	r24, 0xB1	; 177
     9f8:	9c 4f       	sbci	r25, 0xFC	; 252
     9fa:	fc 01       	movw	r30, r24
     9fc:	90 81       	ld	r25, Z
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	99 23       	and	r25, r25
     a02:	09 f0       	breq	.+2      	; 0xa06 <CheckObs+0x526>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	86 23       	and	r24, r22
     a08:	88 23       	and	r24, r24
     a0a:	a1 f0       	breq	.+40     	; 0xa34 <CheckObs+0x554>
					UpdateArray(posX, (posY + 1));
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	9c 01       	movw	r18, r24
     a12:	2f 5f       	subi	r18, 0xFF	; 255
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	b9 01       	movw	r22, r18
     a1c:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = positifY;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goRight;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" R ");
     a2c:	81 e6       	ldi	r24, 0x61	; 97
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleF0) == PINtoInt(ObstacleF0)) & (maze[posX - 1][posY].isClear == false)){
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     a3a:	18 2f       	mov	r17, r24
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	18 17       	cp	r17, r24
     a46:	09 f0       	breq	.+2      	; 0xa4a <CheckObs+0x56a>
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	5c e3       	ldi	r21, 0x3C	; 60
     a52:	58 9f       	mul	r21, r24
     a54:	90 01       	movw	r18, r0
     a56:	59 9f       	mul	r21, r25
     a58:	30 0d       	add	r19, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	82 0f       	add	r24, r18
     a62:	93 1f       	adc	r25, r19
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	81 5b       	subi	r24, 0xB1	; 177
     a6a:	9c 4f       	sbci	r25, 0xFC	; 252
     a6c:	fc 01       	movw	r30, r24
     a6e:	90 81       	ld	r25, Z
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	99 23       	and	r25, r25
     a74:	09 f0       	breq	.+2      	; 0xa78 <CheckObs+0x598>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	84 23       	and	r24, r20
     a7a:	88 23       	and	r24, r24
     a7c:	09 f4       	brne	.+2      	; 0xa80 <CheckObs+0x5a0>
     a7e:	02 c1       	rjmp	.+516    	; 0xc84 <CheckObs+0x7a4>
					UpdateArray((posX - 1), posY);
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	9a 81       	ldd	r25, Y+2	; 0x02
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	2b 81       	ldd	r18, Y+3	; 0x03
     a88:	3c 81       	ldd	r19, Y+4	; 0x04
     a8a:	b9 01       	movw	r22, r18
     a8c:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = negatifX;
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goForward;
     a96:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
					printString(" F \r\n ");
     a9a:	85 e7       	ldi	r24, 0x75	; 117
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
     aa2:	f0 c0       	rjmp	.+480    	; 0xc84 <CheckObs+0x7a4>
				}
			}
			else if (headdirect.my == head){
     aa4:	80 91 79 1f 	lds	r24, 0x1F79	; 0x801f79 <headdirect+0x3>
     aa8:	88 23       	and	r24, r24
     aaa:	09 f0       	breq	.+2      	; 0xaae <CheckObs+0x5ce>
     aac:	e3 c0       	rjmp	.+454    	; 0xc74 <CheckObs+0x794>
				printString("Head my ");
     aae:	85 e8       	ldi	r24, 0x85	; 133
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if((readObs(ObstacleB0) == PINtoInt(ObstacleB0)) & (maze[posX][posY + 1].isClear == false)){
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     abc:	18 2f       	mov	r17, r24
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	18 17       	cp	r17, r24
     ac8:	09 f0       	breq	.+2      	; 0xacc <CheckObs+0x5ec>
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	9c 81       	ldd	r25, Y+4	; 0x04
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	49 81       	ldd	r20, Y+1	; 0x01
     ad4:	5a 81       	ldd	r21, Y+2	; 0x02
     ad6:	7c e3       	ldi	r23, 0x3C	; 60
     ad8:	74 9f       	mul	r23, r20
     ada:	90 01       	movw	r18, r0
     adc:	75 9f       	mul	r23, r21
     ade:	30 0d       	add	r19, r0
     ae0:	11 24       	eor	r1, r1
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	81 5b       	subi	r24, 0xB1	; 177
     aec:	9c 4f       	sbci	r25, 0xFC	; 252
     aee:	fc 01       	movw	r30, r24
     af0:	90 81       	ld	r25, Z
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	99 23       	and	r25, r25
     af6:	09 f0       	breq	.+2      	; 0xafa <CheckObs+0x61a>
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	86 23       	and	r24, r22
     afc:	88 23       	and	r24, r24
     afe:	a1 f0       	breq	.+40     	; 0xb28 <CheckObs+0x648>
					UpdateArray(posX, (posY + 1));
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	9c 01       	movw	r18, r24
     b06:	2f 5f       	subi	r18, 0xFF	; 255
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	b9 01       	movw	r22, r18
     b10:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = positifY;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goBack;
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" B \r \n");
     b20:	86 e5       	ldi	r24, 0x56	; 86
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleL) == PINtoInt(ObstacleL)) & (maze[posX + 1][posY].isClear == false)){
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     b2e:	18 2f       	mov	r17, r24
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	18 17       	cp	r17, r24
     b3a:	09 f0       	breq	.+2      	; 0xb3e <CheckObs+0x65e>
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	9a 81       	ldd	r25, Y+2	; 0x02
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	5c e3       	ldi	r21, 0x3C	; 60
     b46:	58 9f       	mul	r21, r24
     b48:	90 01       	movw	r18, r0
     b4a:	59 9f       	mul	r21, r25
     b4c:	30 0d       	add	r19, r0
     b4e:	11 24       	eor	r1, r1
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	82 0f       	add	r24, r18
     b56:	93 1f       	adc	r25, r19
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	81 5b       	subi	r24, 0xB1	; 177
     b5e:	9c 4f       	sbci	r25, 0xFC	; 252
     b60:	fc 01       	movw	r30, r24
     b62:	90 81       	ld	r25, Z
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	99 23       	and	r25, r25
     b68:	09 f0       	breq	.+2      	; 0xb6c <CheckObs+0x68c>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	84 23       	and	r24, r20
     b6e:	88 23       	and	r24, r24
     b70:	89 f0       	breq	.+34     	; 0xb94 <CheckObs+0x6b4>
					UpdateArray((posX + 1), posY);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	2b 81       	ldd	r18, Y+3	; 0x03
     b7a:	3c 81       	ldd	r19, Y+4	; 0x04
     b7c:	b9 01       	movw	r22, r18
     b7e:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = positifX;
     b82:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
					DirToGo.gomotor = goLeft;
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" L ");
     b8c:	8d e5       	ldi	r24, 0x5D	; 93
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleR) == PINtoInt(ObstacleR)) & (maze[posX - 1][posY].isClear == false)){
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     b9a:	18 2f       	mov	r17, r24
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	18 17       	cp	r17, r24
     ba6:	09 f0       	breq	.+2      	; 0xbaa <CheckObs+0x6ca>
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	5c e3       	ldi	r21, 0x3C	; 60
     bb2:	58 9f       	mul	r21, r24
     bb4:	90 01       	movw	r18, r0
     bb6:	59 9f       	mul	r21, r25
     bb8:	30 0d       	add	r19, r0
     bba:	11 24       	eor	r1, r1
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	9c 81       	ldd	r25, Y+4	; 0x04
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	81 5b       	subi	r24, 0xB1	; 177
     bca:	9c 4f       	sbci	r25, 0xFC	; 252
     bcc:	fc 01       	movw	r30, r24
     bce:	90 81       	ld	r25, Z
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	99 23       	and	r25, r25
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <CheckObs+0x6f8>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	84 23       	and	r24, r20
     bda:	88 23       	and	r24, r24
     bdc:	91 f0       	breq	.+36     	; 0xc02 <CheckObs+0x722>
					UpdateArray((posX - 1), posY);
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	2b 81       	ldd	r18, Y+3	; 0x03
     be6:	3c 81       	ldd	r19, Y+4	; 0x04
     be8:	b9 01       	movw	r22, r18
     bea:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = negatifX;
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goRight;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
					printString(" R ");
     bfa:	81 e6       	ldi	r24, 0x61	; 97
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				}
				if((readObs(ObstacleF0) == PINtoInt(ObstacleF0)) & (maze[posX][posY - 1].isClear == false)){
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
     c08:	18 2f       	mov	r17, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	18 17       	cp	r17, r24
     c14:	09 f0       	breq	.+2      	; 0xc18 <CheckObs+0x738>
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	49 81       	ldd	r20, Y+1	; 0x01
     c20:	5a 81       	ldd	r21, Y+2	; 0x02
     c22:	7c e3       	ldi	r23, 0x3C	; 60
     c24:	74 9f       	mul	r23, r20
     c26:	90 01       	movw	r18, r0
     c28:	75 9f       	mul	r23, r21
     c2a:	30 0d       	add	r19, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	82 0f       	add	r24, r18
     c30:	93 1f       	adc	r25, r19
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	81 5b       	subi	r24, 0xB1	; 177
     c38:	9c 4f       	sbci	r25, 0xFC	; 252
     c3a:	fc 01       	movw	r30, r24
     c3c:	90 81       	ld	r25, Z
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	99 23       	and	r25, r25
     c42:	09 f0       	breq	.+2      	; 0xc46 <CheckObs+0x766>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	86 23       	and	r24, r22
     c48:	88 23       	and	r24, r24
     c4a:	e1 f0       	breq	.+56     	; 0xc84 <CheckObs+0x7a4>
					UpdateArray(posX, (posY - 1));
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	9c 01       	movw	r18, r24
     c52:	21 50       	subi	r18, 0x01	; 1
     c54:	31 09       	sbc	r19, r1
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	b9 01       	movw	r22, r18
     c5c:	0e 94 55 06 	call	0xcaa	; 0xcaa <UpdateArray>
					DirToGo.goesto = negatifY;
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
					DirToGo.gomotor = goForward;
     c66:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
					printString(" F \r\n ");
     c6a:	85 e7       	ldi	r24, 0x75	; 117
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
     c72:	08 c0       	rjmp	.+16     	; 0xc84 <CheckObs+0x7a4>
				}
			}
			else {
				DirToGo.goesto = goNull;
     c74:	84 e0       	ldi	r24, 0x04	; 4
     c76:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
				DirToGo.gomotor = goBack;
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
				return false;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	0b c0       	rjmp	.+22     	; 0xc9a <CheckObs+0x7ba>
			}
			isExecute = false;
     c84:	10 92 73 1f 	sts	0x1F73, r1	; 0x801f73 <isExecute>
		}
		return true;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	07 c0       	rjmp	.+14     	; 0xc9a <CheckObs+0x7ba>
	}
	else {
		DirToGo.goesto = goNull;
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
		DirToGo.gomotor = goNull;
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
		return false;
     c98:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	08 95       	ret

00000caa <UpdateArray>:

bool UpdateArray(uint16_t posX, uint16_t posY) {
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <UpdateArray+0x6>
     cb0:	1f 92       	push	r1
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	7c 83       	std	Y+4, r23	; 0x04
     cbc:	6b 83       	std	Y+3, r22	; 0x03
	return maze[posX][posY].isClear = true ;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	4c e3       	ldi	r20, 0x3C	; 60
     cc4:	48 9f       	mul	r20, r24
     cc6:	90 01       	movw	r18, r0
     cc8:	49 9f       	mul	r20, r25
     cca:	30 0d       	add	r19, r0
     ccc:	11 24       	eor	r1, r1
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	81 5b       	subi	r24, 0xB1	; 177
     cdc:	9c 4f       	sbci	r25, 0xFC	; 252
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	fc 01       	movw	r30, r24
     ce2:	20 83       	st	Z, r18
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	4c e3       	ldi	r20, 0x3C	; 60
     cea:	48 9f       	mul	r20, r24
     cec:	90 01       	movw	r18, r0
     cee:	49 9f       	mul	r20, r25
     cf0:	30 0d       	add	r19, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	82 0f       	add	r24, r18
     cfa:	93 1f       	adc	r25, r19
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	81 5b       	subi	r24, 0xB1	; 177
     d02:	9c 4f       	sbci	r25, 0xFC	; 252
     d04:	fc 01       	movw	r30, r24
     d06:	80 81       	ld	r24, Z
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <CheckMaze>:

uint16_t * CheckMaze(uint16_t CurposX, uint16_t CurposY){
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	2c 97       	sbiw	r28, 0x0c	; 12
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	9a 87       	std	Y+10, r25	; 0x0a
     d2c:	89 87       	std	Y+9, r24	; 0x09
     d2e:	7c 87       	std	Y+12, r23	; 0x0c
     d30:	6b 87       	std	Y+11, r22	; 0x0b
	uint16_t  posx , posy , EuD , minEuD = SquareMaze;
     d32:	8c e3       	ldi	r24, 0x3C	; 60
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9e 83       	std	Y+6, r25	; 0x06
     d38:	8d 83       	std	Y+5, r24	; 0x05
	static uint16_t pos[2] = {0,0};
	for(posx = 0 ; posx < SquareMaze ; posx++){
     d3a:	1a 82       	std	Y+2, r1	; 0x02
     d3c:	19 82       	std	Y+1, r1	; 0x01
     d3e:	6e c0       	rjmp	.+220    	; 0xe1c <CheckMaze+0x106>
		for(posy = 0  ; posy < SquareMaze ; posy++){
     d40:	1c 82       	std	Y+4, r1	; 0x04
     d42:	1b 82       	std	Y+3, r1	; 0x03
     d44:	61 c0       	rjmp	.+194    	; 0xe08 <CheckMaze+0xf2>
			if(maze[posx][posy].isClear == true && maze[posx][posy].isDone == false) {
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	4c e3       	ldi	r20, 0x3C	; 60
     d4c:	48 9f       	mul	r20, r24
     d4e:	90 01       	movw	r18, r0
     d50:	49 9f       	mul	r20, r25
     d52:	30 0d       	add	r19, r0
     d54:	11 24       	eor	r1, r1
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	81 5b       	subi	r24, 0xB1	; 177
     d64:	9c 4f       	sbci	r25, 0xFC	; 252
     d66:	fc 01       	movw	r30, r24
     d68:	80 81       	ld	r24, Z
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	09 f0       	breq	.+2      	; 0xd70 <CheckMaze+0x5a>
     d6e:	47 c0       	rjmp	.+142    	; 0xdfe <CheckMaze+0xe8>
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	4c e3       	ldi	r20, 0x3C	; 60
     d76:	48 9f       	mul	r20, r24
     d78:	90 01       	movw	r18, r0
     d7a:	49 9f       	mul	r20, r25
     d7c:	30 0d       	add	r19, r0
     d7e:	11 24       	eor	r1, r1
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	82 0f       	add	r24, r18
     d86:	93 1f       	adc	r25, r19
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	80 5b       	subi	r24, 0xB0	; 176
     d8e:	9c 4f       	sbci	r25, 0xFC	; 252
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	88 23       	and	r24, r24
     d96:	99 f5       	brne	.+102    	; 0xdfe <CheckMaze+0xe8>
				EuD = EcluideanDist(CurposX,CurposY,posx,posy);
     d98:	2b 81       	ldd	r18, Y+3	; 0x03
     d9a:	3c 81       	ldd	r19, Y+4	; 0x04
     d9c:	49 81       	ldd	r20, Y+1	; 0x01
     d9e:	5a 81       	ldd	r21, Y+2	; 0x02
     da0:	6b 85       	ldd	r22, Y+11	; 0x0b
     da2:	7c 85       	ldd	r23, Y+12	; 0x0c
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
     dac:	98 87       	std	Y+8, r25	; 0x08
     dae:	8f 83       	std	Y+7, r24	; 0x07
				printWord(EuD);
     db0:	8f 81       	ldd	r24, Y+7	; 0x07
     db2:	98 85       	ldd	r25, Y+8	; 0x08
     db4:	0e 94 32 11 	call	0x2264	; 0x2264 <printWord>
				printString(" ");
     db8:	8e e8       	ldi	r24, 0x8E	; 142
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				printWord(minEuD);
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	0e 94 32 11 	call	0x2264	; 0x2264 <printWord>
				printString(" | ");
     dc8:	80 e9       	ldi	r24, 0x90	; 144
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if(EuD < minEuD){
     dd0:	2f 81       	ldd	r18, Y+7	; 0x07
     dd2:	38 85       	ldd	r19, Y+8	; 0x08
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	28 17       	cp	r18, r24
     dda:	39 07       	cpc	r19, r25
     ddc:	80 f4       	brcc	.+32     	; 0xdfe <CheckMaze+0xe8>
					pos[0] = posx;
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <__data_end+0x1>
     de6:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <__data_end>
					pos[1] = posy;
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <__data_end+0x3>
     df2:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <__data_end+0x2>
					minEuD = EuD;
     df6:	8f 81       	ldd	r24, Y+7	; 0x07
     df8:	98 85       	ldd	r25, Y+8	; 0x08
     dfa:	9e 83       	std	Y+6, r25	; 0x06
     dfc:	8d 83       	std	Y+5, r24	; 0x05

uint16_t * CheckMaze(uint16_t CurposX, uint16_t CurposY){
	uint16_t  posx , posy , EuD , minEuD = SquareMaze;
	static uint16_t pos[2] = {0,0};
	for(posx = 0 ; posx < SquareMaze ; posx++){
		for(posy = 0  ; posy < SquareMaze ; posy++){
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	cc 97       	sbiw	r24, 0x3c	; 60
     e0e:	08 f4       	brcc	.+2      	; 0xe12 <CheckMaze+0xfc>
     e10:	9a cf       	rjmp	.-204    	; 0xd46 <CheckMaze+0x30>
}

uint16_t * CheckMaze(uint16_t CurposX, uint16_t CurposY){
	uint16_t  posx , posy , EuD , minEuD = SquareMaze;
	static uint16_t pos[2] = {0,0};
	for(posx = 0 ; posx < SquareMaze ; posx++){
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	cc 97       	sbiw	r24, 0x3c	; 60
     e22:	08 f4       	brcc	.+2      	; 0xe26 <CheckMaze+0x110>
     e24:	8d cf       	rjmp	.-230    	; 0xd40 <CheckMaze+0x2a>
				}

			}
		}
	}
	printWord(pos);
     e26:	82 e4       	ldi	r24, 0x42	; 66
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	0e 94 32 11 	call	0x2264	; 0x2264 <printWord>
	return pos;
     e2e:	82 e4       	ldi	r24, 0x42	; 66
     e30:	93 e0       	ldi	r25, 0x03	; 3
}
     e32:	2c 96       	adiw	r28, 0x0c	; 12
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <EcluideanDist>:

uint16_t EcluideanDist(uint16_t CurposX, uint16_t CurposY, uint16_t posX, uint16_t posY){
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2a 97       	sbiw	r28, 0x0a	; 10
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
     e64:	7e 83       	std	Y+6, r23	; 0x06
     e66:	6d 83       	std	Y+5, r22	; 0x05
     e68:	58 87       	std	Y+8, r21	; 0x08
     e6a:	4f 83       	std	Y+7, r20	; 0x07
     e6c:	3a 87       	std	Y+10, r19	; 0x0a
     e6e:	29 87       	std	Y+9, r18	; 0x09
	uint16_t d;
	d = sqrt(pow((CurposX - posX) , 2) + pow((CurposY - posY), 2));
     e70:	2b 81       	ldd	r18, Y+3	; 0x03
     e72:	3c 81       	ldd	r19, Y+4	; 0x04
     e74:	8f 81       	ldd	r24, Y+7	; 0x07
     e76:	98 85       	ldd	r25, Y+8	; 0x08
     e78:	a9 01       	movw	r20, r18
     e7a:	48 1b       	sub	r20, r24
     e7c:	59 0b       	sbc	r21, r25
     e7e:	ca 01       	movw	r24, r20
     e80:	cc 01       	movw	r24, r24
     e82:	a0 e0       	ldi	r26, 0x00	; 0
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 83 13 	call	0x2706	; 0x2706 <__floatunsisf>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	50 e4       	ldi	r21, 0x40	; 64
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 a7 14 	call	0x294e	; 0x294e <pow>
     ea2:	6b 01       	movw	r12, r22
     ea4:	7c 01       	movw	r14, r24
     ea6:	2d 81       	ldd	r18, Y+5	; 0x05
     ea8:	3e 81       	ldd	r19, Y+6	; 0x06
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	a9 01       	movw	r20, r18
     eb0:	48 1b       	sub	r20, r24
     eb2:	59 0b       	sbc	r21, r25
     eb4:	ca 01       	movw	r24, r20
     eb6:	cc 01       	movw	r24, r24
     eb8:	a0 e0       	ldi	r26, 0x00	; 0
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	bc 01       	movw	r22, r24
     ebe:	cd 01       	movw	r24, r26
     ec0:	0e 94 83 13 	call	0x2706	; 0x2706 <__floatunsisf>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e4       	ldi	r21, 0x40	; 64
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 a7 14 	call	0x294e	; 0x294e <pow>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	9c 01       	movw	r18, r24
     ede:	ad 01       	movw	r20, r26
     ee0:	c7 01       	movw	r24, r14
     ee2:	b6 01       	movw	r22, r12
     ee4:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__addsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <sqrt>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
	return d;
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f0c:	2a 96       	adiw	r28, 0x0a	; 10
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	08 95       	ret

00000f26 <initMaze>:

void initMaze(){
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <initMaze+0x6>
     f2c:	1f 92       	push	r1
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	uint16_t c , r ;
	for(c = 0 ; c < SquareMaze ; c++){
     f32:	1a 82       	std	Y+2, r1	; 0x02
     f34:	19 82       	std	Y+1, r1	; 0x01
     f36:	35 c0       	rjmp	.+106    	; 0xfa2 <initMaze+0x7c>
		for(r = 0 ; r < SquareMaze ; r++){
     f38:	1c 82       	std	Y+4, r1	; 0x04
     f3a:	1b 82       	std	Y+3, r1	; 0x03
     f3c:	29 c0       	rjmp	.+82     	; 0xf90 <initMaze+0x6a>
			maze[c][r].isClear = false;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	4c e3       	ldi	r20, 0x3C	; 60
     f44:	48 9f       	mul	r20, r24
     f46:	90 01       	movw	r18, r0
     f48:	49 9f       	mul	r20, r25
     f4a:	30 0d       	add	r19, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	81 5b       	subi	r24, 0xB1	; 177
     f5c:	9c 4f       	sbci	r25, 0xFC	; 252
     f5e:	fc 01       	movw	r30, r24
     f60:	10 82       	st	Z, r1
			maze[c][r].isDone = false;
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	4c e3       	ldi	r20, 0x3C	; 60
     f68:	48 9f       	mul	r20, r24
     f6a:	90 01       	movw	r18, r0
     f6c:	49 9f       	mul	r20, r25
     f6e:	30 0d       	add	r19, r0
     f70:	11 24       	eor	r1, r1
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	82 0f       	add	r24, r18
     f78:	93 1f       	adc	r25, r19
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	80 5b       	subi	r24, 0xB0	; 176
     f80:	9c 4f       	sbci	r25, 0xFC	; 252
     f82:	fc 01       	movw	r30, r24
     f84:	10 82       	st	Z, r1
}

void initMaze(){
	uint16_t c , r ;
	for(c = 0 ; c < SquareMaze ; c++){
		for(r = 0 ; r < SquareMaze ; r++){
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	9c 83       	std	Y+4, r25	; 0x04
     f8e:	8b 83       	std	Y+3, r24	; 0x03
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	cc 97       	sbiw	r24, 0x3c	; 60
     f96:	98 f2       	brcs	.-90     	; 0xf3e <initMaze+0x18>
	return d;
}

void initMaze(){
	uint16_t c , r ;
	for(c = 0 ; c < SquareMaze ; c++){
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	cc 97       	sbiw	r24, 0x3c	; 60
     fa8:	38 f2       	brcs	.-114    	; 0xf38 <initMaze+0x12>
		for(r = 0 ; r < SquareMaze ; r++){
			maze[c][r].isClear = false;
			maze[c][r].isDone = false;
		}
	}
}
     faa:	00 00       	nop
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <TothatBox>:

bool TothatBox(uint16_t posX,uint16_t posY, uint16_t posXDes, uint16_t posYDes ){
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	2a 97       	sbiw	r28, 0x0a	; 10
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	7e 83       	std	Y+6, r23	; 0x06
     fd6:	6d 83       	std	Y+5, r22	; 0x05
     fd8:	58 87       	std	Y+8, r21	; 0x08
     fda:	4f 83       	std	Y+7, r20	; 0x07
     fdc:	3a 87       	std	Y+10, r19	; 0x0a
     fde:	29 87       	std	Y+9, r18	; 0x09
	printString("To that Box");
     fe0:	84 e9       	ldi	r24, 0x94	; 148
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	uint16_t Eclid = 999;
     fe8:	87 ee       	ldi	r24, 0xE7	; 231
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
	if(EcluideanDist(posXDes, posYDes, posX, posY) == 0){
     ff0:	2d 81       	ldd	r18, Y+5	; 0x05
     ff2:	3e 81       	ldd	r19, Y+6	; 0x06
     ff4:	4b 81       	ldd	r20, Y+3	; 0x03
     ff6:	5c 81       	ldd	r21, Y+4	; 0x04
     ff8:	69 85       	ldd	r22, Y+9	; 0x09
     ffa:	7a 85       	ldd	r23, Y+10	; 0x0a
     ffc:	8f 81       	ldd	r24, Y+7	; 0x07
     ffe:	98 85       	ldd	r25, Y+8	; 0x08
    1000:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1004:	89 2b       	or	r24, r25
    1006:	09 f0       	breq	.+2      	; 0x100a <TothatBox+0x50>
    1008:	47 c5       	rjmp	.+2702   	; 0x1a98 <TothatBox+0xade>
		if(isExecute == true){
    100a:	80 91 73 1f 	lds	r24, 0x1F73	; 0x801f73 <isExecute>
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	09 f0       	breq	.+2      	; 0x1014 <TothatBox+0x5a>
    1012:	40 c5       	rjmp	.+2688   	; 0x1a94 <TothatBox+0xada>
			printString("To That Box \r \n");
    1014:	80 ea       	ldi	r24, 0xA0	; 160
    1016:	92 e0       	ldi	r25, 0x02	; 2
    1018:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
			if (headdirect.px == head){
    101c:	80 91 76 1f 	lds	r24, 0x1F76	; 0x801f76 <headdirect>
    1020:	88 23       	and	r24, r24
    1022:	09 f0       	breq	.+2      	; 0x1026 <TothatBox+0x6c>
    1024:	48 c1       	rjmp	.+656    	; 0x12b6 <TothatBox+0x2fc>
				printString("Head px ");
    1026:	8d e4       	ldi	r24, 0x4D	; 77
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if((readObs(ObstacleB0) == PINtoInt(ObstacleB0)) & (maze[posX - 1][posY].isClear == false)){
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    1034:	18 2f       	mov	r17, r24
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    103c:	41 e0       	ldi	r20, 0x01	; 1
    103e:	18 17       	cp	r17, r24
    1040:	09 f0       	breq	.+2      	; 0x1044 <TothatBox+0x8a>
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	5c e3       	ldi	r21, 0x3C	; 60
    104c:	58 9f       	mul	r21, r24
    104e:	90 01       	movw	r18, r0
    1050:	59 9f       	mul	r21, r25
    1052:	30 0d       	add	r19, r0
    1054:	11 24       	eor	r1, r1
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	81 5b       	subi	r24, 0xB1	; 177
    1064:	9c 4f       	sbci	r25, 0xFC	; 252
    1066:	fc 01       	movw	r30, r24
    1068:	90 81       	ld	r25, Z
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	99 23       	and	r25, r25
    106e:	09 f0       	breq	.+2      	; 0x1072 <TothatBox+0xb8>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	84 23       	and	r24, r20
    1074:	88 23       	and	r24, r24
    1076:	61 f1       	breq	.+88     	; 0x10d0 <TothatBox+0x116>
					if (EcluideanDist(posXDes, posYDes, (posX - 1), posY) <= Eclid){
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	ac 01       	movw	r20, r24
    107e:	41 50       	subi	r20, 0x01	; 1
    1080:	51 09       	sbc	r21, r1
    1082:	2d 81       	ldd	r18, Y+5	; 0x05
    1084:	3e 81       	ldd	r19, Y+6	; 0x06
    1086:	69 85       	ldd	r22, Y+9	; 0x09
    1088:	7a 85       	ldd	r23, Y+10	; 0x0a
    108a:	8f 81       	ldd	r24, Y+7	; 0x07
    108c:	98 85       	ldd	r25, Y+8	; 0x08
    108e:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1092:	9c 01       	movw	r18, r24
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	82 17       	cp	r24, r18
    109a:	93 07       	cpc	r25, r19
    109c:	c8 f0       	brcs	.+50     	; 0x10d0 <TothatBox+0x116>
						DirToGo.goesto = negatifX;
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goBack;
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" B \r \n");
    10aa:	86 e5       	ldi	r24, 0x56	; 86
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, (posX - 1), posY);
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	ac 01       	movw	r20, r24
    10b8:	41 50       	subi	r20, 0x01	; 1
    10ba:	51 09       	sbc	r21, r1
    10bc:	2d 81       	ldd	r18, Y+5	; 0x05
    10be:	3e 81       	ldd	r19, Y+6	; 0x06
    10c0:	69 85       	ldd	r22, Y+9	; 0x09
    10c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10c4:	8f 81       	ldd	r24, Y+7	; 0x07
    10c6:	98 85       	ldd	r25, Y+8	; 0x08
    10c8:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleL) == PINtoInt(ObstacleL)) & (maze[posX][posY + 1].isClear == false)){
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    10d6:	18 2f       	mov	r17, r24
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	18 17       	cp	r17, r24
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <TothatBox+0x12c>
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	4b 81       	ldd	r20, Y+3	; 0x03
    10ee:	5c 81       	ldd	r21, Y+4	; 0x04
    10f0:	7c e3       	ldi	r23, 0x3C	; 60
    10f2:	74 9f       	mul	r23, r20
    10f4:	90 01       	movw	r18, r0
    10f6:	75 9f       	mul	r23, r21
    10f8:	30 0d       	add	r19, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	82 0f       	add	r24, r18
    10fe:	93 1f       	adc	r25, r19
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	81 5b       	subi	r24, 0xB1	; 177
    1106:	9c 4f       	sbci	r25, 0xFC	; 252
    1108:	fc 01       	movw	r30, r24
    110a:	90 81       	ld	r25, Z
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	99 23       	and	r25, r25
    1110:	09 f0       	breq	.+2      	; 0x1114 <TothatBox+0x15a>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	86 23       	and	r24, r22
    1116:	88 23       	and	r24, r24
    1118:	61 f1       	breq	.+88     	; 0x1172 <TothatBox+0x1b8>
					if( EcluideanDist(posXDes, posYDes, posX, (posY + 1)) < Eclid){
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	9c 01       	movw	r18, r24
    1120:	2f 5f       	subi	r18, 0xFF	; 255
    1122:	3f 4f       	sbci	r19, 0xFF	; 255
    1124:	4b 81       	ldd	r20, Y+3	; 0x03
    1126:	5c 81       	ldd	r21, Y+4	; 0x04
    1128:	69 85       	ldd	r22, Y+9	; 0x09
    112a:	7a 85       	ldd	r23, Y+10	; 0x0a
    112c:	8f 81       	ldd	r24, Y+7	; 0x07
    112e:	98 85       	ldd	r25, Y+8	; 0x08
    1130:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1134:	9c 01       	movw	r18, r24
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	28 17       	cp	r18, r24
    113c:	39 07       	cpc	r19, r25
    113e:	c8 f4       	brcc	.+50     	; 0x1172 <TothatBox+0x1b8>
						DirToGo.goesto = positifY;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goLeft;
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" L ");
    114c:	8d e5       	ldi	r24, 0x5D	; 93
    114e:	92 e0       	ldi	r25, 0x02	; 2
    1150:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, posX, (posY + 1));
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	9c 01       	movw	r18, r24
    115a:	2f 5f       	subi	r18, 0xFF	; 255
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	4b 81       	ldd	r20, Y+3	; 0x03
    1160:	5c 81       	ldd	r21, Y+4	; 0x04
    1162:	69 85       	ldd	r22, Y+9	; 0x09
    1164:	7a 85       	ldd	r23, Y+10	; 0x0a
    1166:	8f 81       	ldd	r24, Y+7	; 0x07
    1168:	98 85       	ldd	r25, Y+8	; 0x08
    116a:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleR) == PINtoInt(ObstacleR)) & (maze[posX][posY - 1].isClear == false)){
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    1178:	18 2f       	mov	r17, r24
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	18 17       	cp	r17, r24
    1184:	09 f0       	breq	.+2      	; 0x1188 <TothatBox+0x1ce>
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	4b 81       	ldd	r20, Y+3	; 0x03
    1190:	5c 81       	ldd	r21, Y+4	; 0x04
    1192:	7c e3       	ldi	r23, 0x3C	; 60
    1194:	74 9f       	mul	r23, r20
    1196:	90 01       	movw	r18, r0
    1198:	75 9f       	mul	r23, r21
    119a:	30 0d       	add	r19, r0
    119c:	11 24       	eor	r1, r1
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	81 5b       	subi	r24, 0xB1	; 177
    11a8:	9c 4f       	sbci	r25, 0xFC	; 252
    11aa:	fc 01       	movw	r30, r24
    11ac:	90 81       	ld	r25, Z
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	99 23       	and	r25, r25
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <TothatBox+0x1fc>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	86 23       	and	r24, r22
    11b8:	88 23       	and	r24, r24
    11ba:	61 f1       	breq	.+88     	; 0x1214 <TothatBox+0x25a>
					if( EcluideanDist(posXDes, posYDes, posX, (posY - 1)) < Eclid){
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	9c 01       	movw	r18, r24
    11c2:	21 50       	subi	r18, 0x01	; 1
    11c4:	31 09       	sbc	r19, r1
    11c6:	4b 81       	ldd	r20, Y+3	; 0x03
    11c8:	5c 81       	ldd	r21, Y+4	; 0x04
    11ca:	69 85       	ldd	r22, Y+9	; 0x09
    11cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07
    11d0:	98 85       	ldd	r25, Y+8	; 0x08
    11d2:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    11d6:	9c 01       	movw	r18, r24
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	28 17       	cp	r18, r24
    11de:	39 07       	cpc	r19, r25
    11e0:	c8 f4       	brcc	.+50     	; 0x1214 <TothatBox+0x25a>
						DirToGo.goesto = negatifY;
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goRight;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" R ");
    11ee:	81 e6       	ldi	r24, 0x61	; 97
    11f0:	92 e0       	ldi	r25, 0x02	; 2
    11f2:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, posX, (posY - 1));
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	9c 01       	movw	r18, r24
    11fc:	21 50       	subi	r18, 0x01	; 1
    11fe:	31 09       	sbc	r19, r1
    1200:	4b 81       	ldd	r20, Y+3	; 0x03
    1202:	5c 81       	ldd	r21, Y+4	; 0x04
    1204:	69 85       	ldd	r22, Y+9	; 0x09
    1206:	7a 85       	ldd	r23, Y+10	; 0x0a
    1208:	8f 81       	ldd	r24, Y+7	; 0x07
    120a:	98 85       	ldd	r25, Y+8	; 0x08
    120c:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleF0) == PINtoInt(ObstacleF0)) & (maze[posX + 1][posY].isClear == false)){
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    121a:	18 2f       	mov	r17, r24
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	18 17       	cp	r17, r24
    1226:	09 f0       	breq	.+2      	; 0x122a <TothatBox+0x270>
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	5c e3       	ldi	r21, 0x3C	; 60
    1232:	58 9f       	mul	r21, r24
    1234:	90 01       	movw	r18, r0
    1236:	59 9f       	mul	r21, r25
    1238:	30 0d       	add	r19, r0
    123a:	11 24       	eor	r1, r1
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	9e 81       	ldd	r25, Y+6	; 0x06
    1240:	82 0f       	add	r24, r18
    1242:	93 1f       	adc	r25, r19
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	81 5b       	subi	r24, 0xB1	; 177
    124a:	9c 4f       	sbci	r25, 0xFC	; 252
    124c:	fc 01       	movw	r30, r24
    124e:	90 81       	ld	r25, Z
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	99 23       	and	r25, r25
    1254:	09 f0       	breq	.+2      	; 0x1258 <TothatBox+0x29e>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	84 23       	and	r24, r20
    125a:	88 23       	and	r24, r24
    125c:	51 f1       	breq	.+84     	; 0x12b2 <TothatBox+0x2f8>
					if( EcluideanDist(posXDes, posYDes, (posX + 1), posY) < Eclid){
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	ac 01       	movw	r20, r24
    1264:	4f 5f       	subi	r20, 0xFF	; 255
    1266:	5f 4f       	sbci	r21, 0xFF	; 255
    1268:	2d 81       	ldd	r18, Y+5	; 0x05
    126a:	3e 81       	ldd	r19, Y+6	; 0x06
    126c:	69 85       	ldd	r22, Y+9	; 0x09
    126e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1270:	8f 81       	ldd	r24, Y+7	; 0x07
    1272:	98 85       	ldd	r25, Y+8	; 0x08
    1274:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1278:	9c 01       	movw	r18, r24
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	28 17       	cp	r18, r24
    1280:	39 07       	cpc	r19, r25
    1282:	b8 f4       	brcc	.+46     	; 0x12b2 <TothatBox+0x2f8>
						DirToGo.goesto = positifX;
    1284:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
						DirToGo.gomotor = goForward;
    1288:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
						printString(" F \r \n");
    128c:	85 e6       	ldi	r24, 0x65	; 101
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, (posX + 1), posY);
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	ac 01       	movw	r20, r24
    129a:	4f 5f       	subi	r20, 0xFF	; 255
    129c:	5f 4f       	sbci	r21, 0xFF	; 255
    129e:	2d 81       	ldd	r18, Y+5	; 0x05
    12a0:	3e 81       	ldd	r19, Y+6	; 0x06
    12a2:	69 85       	ldd	r22, Y+9	; 0x09
    12a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    12a6:	8f 81       	ldd	r24, Y+7	; 0x07
    12a8:	98 85       	ldd	r25, Y+8	; 0x08
    12aa:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				return false;
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	f2 c3       	rjmp	.+2020   	; 0x1a9a <TothatBox+0xae0>
			}
			else if (headdirect.py == head){
    12b6:	80 91 77 1f 	lds	r24, 0x1F77	; 0x801f77 <headdirect+0x1>
    12ba:	88 23       	and	r24, r24
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <TothatBox+0x306>
    12be:	48 c1       	rjmp	.+656    	; 0x1550 <TothatBox+0x596>
				printString("Head py ");
    12c0:	8c e6       	ldi	r24, 0x6C	; 108
    12c2:	92 e0       	ldi	r25, 0x02	; 2
    12c4:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if((readObs(ObstacleB0) == PINtoInt(ObstacleB0)) & (maze[posX][posY - 1].isClear == false)){
    12c8:	83 e0       	ldi	r24, 0x03	; 3
    12ca:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    12ce:	18 2f       	mov	r17, r24
    12d0:	83 e0       	ldi	r24, 0x03	; 3
    12d2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	18 17       	cp	r17, r24
    12da:	09 f0       	breq	.+2      	; 0x12de <TothatBox+0x324>
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	4b 81       	ldd	r20, Y+3	; 0x03
    12e6:	5c 81       	ldd	r21, Y+4	; 0x04
    12e8:	7c e3       	ldi	r23, 0x3C	; 60
    12ea:	74 9f       	mul	r23, r20
    12ec:	90 01       	movw	r18, r0
    12ee:	75 9f       	mul	r23, r21
    12f0:	30 0d       	add	r19, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	82 0f       	add	r24, r18
    12f6:	93 1f       	adc	r25, r19
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	81 5b       	subi	r24, 0xB1	; 177
    12fe:	9c 4f       	sbci	r25, 0xFC	; 252
    1300:	fc 01       	movw	r30, r24
    1302:	90 81       	ld	r25, Z
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	99 23       	and	r25, r25
    1308:	09 f0       	breq	.+2      	; 0x130c <TothatBox+0x352>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	86 23       	and	r24, r22
    130e:	88 23       	and	r24, r24
    1310:	61 f1       	breq	.+88     	; 0x136a <TothatBox+0x3b0>
					if( EcluideanDist(posXDes, posYDes, posX, (posY - 1)) < Eclid){
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	9c 01       	movw	r18, r24
    1318:	21 50       	subi	r18, 0x01	; 1
    131a:	31 09       	sbc	r19, r1
    131c:	4b 81       	ldd	r20, Y+3	; 0x03
    131e:	5c 81       	ldd	r21, Y+4	; 0x04
    1320:	69 85       	ldd	r22, Y+9	; 0x09
    1322:	7a 85       	ldd	r23, Y+10	; 0x0a
    1324:	8f 81       	ldd	r24, Y+7	; 0x07
    1326:	98 85       	ldd	r25, Y+8	; 0x08
    1328:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    132c:	9c 01       	movw	r18, r24
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	28 17       	cp	r18, r24
    1334:	39 07       	cpc	r19, r25
    1336:	c8 f4       	brcc	.+50     	; 0x136a <TothatBox+0x3b0>
						DirToGo.goesto = negatifY;
    1338:	83 e0       	ldi	r24, 0x03	; 3
    133a:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goBack;
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" B \r \n");
    1344:	86 e5       	ldi	r24, 0x56	; 86
    1346:	92 e0       	ldi	r25, 0x02	; 2
    1348:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, posX, (posY - 1));
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	9c 01       	movw	r18, r24
    1352:	21 50       	subi	r18, 0x01	; 1
    1354:	31 09       	sbc	r19, r1
    1356:	4b 81       	ldd	r20, Y+3	; 0x03
    1358:	5c 81       	ldd	r21, Y+4	; 0x04
    135a:	69 85       	ldd	r22, Y+9	; 0x09
    135c:	7a 85       	ldd	r23, Y+10	; 0x0a
    135e:	8f 81       	ldd	r24, Y+7	; 0x07
    1360:	98 85       	ldd	r25, Y+8	; 0x08
    1362:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleL) == PINtoInt(ObstacleL)) & (maze[posX - 1][posY].isClear == false)){
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    1370:	18 2f       	mov	r17, r24
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	18 17       	cp	r17, r24
    137c:	09 f0       	breq	.+2      	; 0x1380 <TothatBox+0x3c6>
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	5c e3       	ldi	r21, 0x3C	; 60
    1388:	58 9f       	mul	r21, r24
    138a:	90 01       	movw	r18, r0
    138c:	59 9f       	mul	r21, r25
    138e:	30 0d       	add	r19, r0
    1390:	11 24       	eor	r1, r1
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	82 0f       	add	r24, r18
    1398:	93 1f       	adc	r25, r19
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	81 5b       	subi	r24, 0xB1	; 177
    13a0:	9c 4f       	sbci	r25, 0xFC	; 252
    13a2:	fc 01       	movw	r30, r24
    13a4:	90 81       	ld	r25, Z
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	99 23       	and	r25, r25
    13aa:	09 f0       	breq	.+2      	; 0x13ae <TothatBox+0x3f4>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	84 23       	and	r24, r20
    13b0:	88 23       	and	r24, r24
    13b2:	61 f1       	breq	.+88     	; 0x140c <TothatBox+0x452>
					if( EcluideanDist(posXDes, posYDes, (posX - 1), posY) < Eclid){
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	ac 01       	movw	r20, r24
    13ba:	41 50       	subi	r20, 0x01	; 1
    13bc:	51 09       	sbc	r21, r1
    13be:	2d 81       	ldd	r18, Y+5	; 0x05
    13c0:	3e 81       	ldd	r19, Y+6	; 0x06
    13c2:	69 85       	ldd	r22, Y+9	; 0x09
    13c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    13c6:	8f 81       	ldd	r24, Y+7	; 0x07
    13c8:	98 85       	ldd	r25, Y+8	; 0x08
    13ca:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    13ce:	9c 01       	movw	r18, r24
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	28 17       	cp	r18, r24
    13d6:	39 07       	cpc	r19, r25
    13d8:	c8 f4       	brcc	.+50     	; 0x140c <TothatBox+0x452>
						DirToGo.goesto = negatifX;
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goLeft;
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" L ");
    13e6:	8d e5       	ldi	r24, 0x5D	; 93
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, (posX - 1), posY);
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	ac 01       	movw	r20, r24
    13f4:	41 50       	subi	r20, 0x01	; 1
    13f6:	51 09       	sbc	r21, r1
    13f8:	2d 81       	ldd	r18, Y+5	; 0x05
    13fa:	3e 81       	ldd	r19, Y+6	; 0x06
    13fc:	69 85       	ldd	r22, Y+9	; 0x09
    13fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	98 85       	ldd	r25, Y+8	; 0x08
    1404:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleR) == PINtoInt(ObstacleR)) & (maze[posX + 1][posY].isClear == false)){
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    1412:	18 2f       	mov	r17, r24
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	18 17       	cp	r17, r24
    141e:	09 f0       	breq	.+2      	; 0x1422 <TothatBox+0x468>
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	5c e3       	ldi	r21, 0x3C	; 60
    142a:	58 9f       	mul	r21, r24
    142c:	90 01       	movw	r18, r0
    142e:	59 9f       	mul	r21, r25
    1430:	30 0d       	add	r19, r0
    1432:	11 24       	eor	r1, r1
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	82 0f       	add	r24, r18
    143a:	93 1f       	adc	r25, r19
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	81 5b       	subi	r24, 0xB1	; 177
    1442:	9c 4f       	sbci	r25, 0xFC	; 252
    1444:	fc 01       	movw	r30, r24
    1446:	90 81       	ld	r25, Z
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	99 23       	and	r25, r25
    144c:	09 f0       	breq	.+2      	; 0x1450 <TothatBox+0x496>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	84 23       	and	r24, r20
    1452:	88 23       	and	r24, r24
    1454:	59 f1       	breq	.+86     	; 0x14ac <TothatBox+0x4f2>
					if( EcluideanDist(posXDes, posYDes, (posX + 1), posY) < Eclid){
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	ac 01       	movw	r20, r24
    145c:	4f 5f       	subi	r20, 0xFF	; 255
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	2d 81       	ldd	r18, Y+5	; 0x05
    1462:	3e 81       	ldd	r19, Y+6	; 0x06
    1464:	69 85       	ldd	r22, Y+9	; 0x09
    1466:	7a 85       	ldd	r23, Y+10	; 0x0a
    1468:	8f 81       	ldd	r24, Y+7	; 0x07
    146a:	98 85       	ldd	r25, Y+8	; 0x08
    146c:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1470:	9c 01       	movw	r18, r24
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	c0 f4       	brcc	.+48     	; 0x14ac <TothatBox+0x4f2>
						DirToGo.goesto = positifX;
    147c:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
						DirToGo.gomotor = goRight;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" R ");
    1486:	81 e6       	ldi	r24, 0x61	; 97
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, (posX + 1), posY);
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	ac 01       	movw	r20, r24
    1494:	4f 5f       	subi	r20, 0xFF	; 255
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	2d 81       	ldd	r18, Y+5	; 0x05
    149a:	3e 81       	ldd	r19, Y+6	; 0x06
    149c:	69 85       	ldd	r22, Y+9	; 0x09
    149e:	7a 85       	ldd	r23, Y+10	; 0x0a
    14a0:	8f 81       	ldd	r24, Y+7	; 0x07
    14a2:	98 85       	ldd	r25, Y+8	; 0x08
    14a4:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleF0) == PINtoInt(ObstacleF0)) & (maze[posX][posY + 1].isClear == false)){
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    14b2:	18 2f       	mov	r17, r24
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	18 17       	cp	r17, r24
    14be:	09 f0       	breq	.+2      	; 0x14c2 <TothatBox+0x508>
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	4b 81       	ldd	r20, Y+3	; 0x03
    14ca:	5c 81       	ldd	r21, Y+4	; 0x04
    14cc:	7c e3       	ldi	r23, 0x3C	; 60
    14ce:	74 9f       	mul	r23, r20
    14d0:	90 01       	movw	r18, r0
    14d2:	75 9f       	mul	r23, r21
    14d4:	30 0d       	add	r19, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	82 0f       	add	r24, r18
    14da:	93 1f       	adc	r25, r19
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	81 5b       	subi	r24, 0xB1	; 177
    14e2:	9c 4f       	sbci	r25, 0xFC	; 252
    14e4:	fc 01       	movw	r30, r24
    14e6:	90 81       	ld	r25, Z
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	99 23       	and	r25, r25
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <TothatBox+0x536>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	86 23       	and	r24, r22
    14f2:	88 23       	and	r24, r24
    14f4:	59 f1       	breq	.+86     	; 0x154c <TothatBox+0x592>
					if( EcluideanDist(posXDes, posYDes, posX, (posY + 1)) < Eclid){
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	9c 01       	movw	r18, r24
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	4b 81       	ldd	r20, Y+3	; 0x03
    1502:	5c 81       	ldd	r21, Y+4	; 0x04
    1504:	69 85       	ldd	r22, Y+9	; 0x09
    1506:	7a 85       	ldd	r23, Y+10	; 0x0a
    1508:	8f 81       	ldd	r24, Y+7	; 0x07
    150a:	98 85       	ldd	r25, Y+8	; 0x08
    150c:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1510:	9c 01       	movw	r18, r24
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	28 17       	cp	r18, r24
    1518:	39 07       	cpc	r19, r25
    151a:	c0 f4       	brcc	.+48     	; 0x154c <TothatBox+0x592>
						DirToGo.goesto = positifY;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goForward;
    1522:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
						printString(" F \r\n ");
    1526:	85 e7       	ldi	r24, 0x75	; 117
    1528:	92 e0       	ldi	r25, 0x02	; 2
    152a:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, posX, (posY + 1));
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	9c 01       	movw	r18, r24
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	4b 81       	ldd	r20, Y+3	; 0x03
    153a:	5c 81       	ldd	r21, Y+4	; 0x04
    153c:	69 85       	ldd	r22, Y+9	; 0x09
    153e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1540:	8f 81       	ldd	r24, Y+7	; 0x07
    1542:	98 85       	ldd	r25, Y+8	; 0x08
    1544:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				return false;
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	a5 c2       	rjmp	.+1354   	; 0x1a9a <TothatBox+0xae0>
			}
			else if (headdirect.mx == head){
    1550:	80 91 78 1f 	lds	r24, 0x1F78	; 0x801f78 <headdirect+0x2>
    1554:	88 23       	and	r24, r24
    1556:	09 f0       	breq	.+2      	; 0x155a <TothatBox+0x5a0>
    1558:	48 c1       	rjmp	.+656    	; 0x17ea <TothatBox+0x830>
				printString("Head mx ");
    155a:	8c e7       	ldi	r24, 0x7C	; 124
    155c:	92 e0       	ldi	r25, 0x02	; 2
    155e:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if((readObs(ObstacleB0) == PINtoInt(ObstacleB0)) & (maze[posX + 1][posY].isClear == false)){
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    1568:	18 2f       	mov	r17, r24
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	18 17       	cp	r17, r24
    1574:	09 f0       	breq	.+2      	; 0x1578 <TothatBox+0x5be>
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	5c e3       	ldi	r21, 0x3C	; 60
    1580:	58 9f       	mul	r21, r24
    1582:	90 01       	movw	r18, r0
    1584:	59 9f       	mul	r21, r25
    1586:	30 0d       	add	r19, r0
    1588:	11 24       	eor	r1, r1
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	82 0f       	add	r24, r18
    1590:	93 1f       	adc	r25, r19
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	81 5b       	subi	r24, 0xB1	; 177
    1598:	9c 4f       	sbci	r25, 0xFC	; 252
    159a:	fc 01       	movw	r30, r24
    159c:	90 81       	ld	r25, Z
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	99 23       	and	r25, r25
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <TothatBox+0x5ec>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	84 23       	and	r24, r20
    15a8:	88 23       	and	r24, r24
    15aa:	59 f1       	breq	.+86     	; 0x1602 <TothatBox+0x648>
					if( EcluideanDist(posXDes, posYDes, (posX + 1), posY) < Eclid){
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	ac 01       	movw	r20, r24
    15b2:	4f 5f       	subi	r20, 0xFF	; 255
    15b4:	5f 4f       	sbci	r21, 0xFF	; 255
    15b6:	2d 81       	ldd	r18, Y+5	; 0x05
    15b8:	3e 81       	ldd	r19, Y+6	; 0x06
    15ba:	69 85       	ldd	r22, Y+9	; 0x09
    15bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    15be:	8f 81       	ldd	r24, Y+7	; 0x07
    15c0:	98 85       	ldd	r25, Y+8	; 0x08
    15c2:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    15c6:	9c 01       	movw	r18, r24
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	28 17       	cp	r18, r24
    15ce:	39 07       	cpc	r19, r25
    15d0:	c0 f4       	brcc	.+48     	; 0x1602 <TothatBox+0x648>
						DirToGo.goesto = positifX;
    15d2:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
						DirToGo.gomotor = goBack;
    15d6:	83 e0       	ldi	r24, 0x03	; 3
    15d8:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" B \r \n");
    15dc:	86 e5       	ldi	r24, 0x56	; 86
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, (posX + 1), posY);
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	ac 01       	movw	r20, r24
    15ea:	4f 5f       	subi	r20, 0xFF	; 255
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	2d 81       	ldd	r18, Y+5	; 0x05
    15f0:	3e 81       	ldd	r19, Y+6	; 0x06
    15f2:	69 85       	ldd	r22, Y+9	; 0x09
    15f4:	7a 85       	ldd	r23, Y+10	; 0x0a
    15f6:	8f 81       	ldd	r24, Y+7	; 0x07
    15f8:	98 85       	ldd	r25, Y+8	; 0x08
    15fa:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    15fe:	9a 83       	std	Y+2, r25	; 0x02
    1600:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleL) == PINtoInt(ObstacleL)) & (maze[posX][posY - 1].isClear == false)){
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    1608:	18 2f       	mov	r17, r24
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	18 17       	cp	r17, r24
    1614:	09 f0       	breq	.+2      	; 0x1618 <TothatBox+0x65e>
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	4b 81       	ldd	r20, Y+3	; 0x03
    1620:	5c 81       	ldd	r21, Y+4	; 0x04
    1622:	7c e3       	ldi	r23, 0x3C	; 60
    1624:	74 9f       	mul	r23, r20
    1626:	90 01       	movw	r18, r0
    1628:	75 9f       	mul	r23, r21
    162a:	30 0d       	add	r19, r0
    162c:	11 24       	eor	r1, r1
    162e:	82 0f       	add	r24, r18
    1630:	93 1f       	adc	r25, r19
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	81 5b       	subi	r24, 0xB1	; 177
    1638:	9c 4f       	sbci	r25, 0xFC	; 252
    163a:	fc 01       	movw	r30, r24
    163c:	90 81       	ld	r25, Z
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	99 23       	and	r25, r25
    1642:	09 f0       	breq	.+2      	; 0x1646 <TothatBox+0x68c>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	86 23       	and	r24, r22
    1648:	88 23       	and	r24, r24
    164a:	61 f1       	breq	.+88     	; 0x16a4 <TothatBox+0x6ea>
					if( EcluideanDist(posXDes, posYDes, posX, (posY - 1)) < Eclid){
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	9c 01       	movw	r18, r24
    1652:	21 50       	subi	r18, 0x01	; 1
    1654:	31 09       	sbc	r19, r1
    1656:	4b 81       	ldd	r20, Y+3	; 0x03
    1658:	5c 81       	ldd	r21, Y+4	; 0x04
    165a:	69 85       	ldd	r22, Y+9	; 0x09
    165c:	7a 85       	ldd	r23, Y+10	; 0x0a
    165e:	8f 81       	ldd	r24, Y+7	; 0x07
    1660:	98 85       	ldd	r25, Y+8	; 0x08
    1662:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1666:	9c 01       	movw	r18, r24
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	28 17       	cp	r18, r24
    166e:	39 07       	cpc	r19, r25
    1670:	c8 f4       	brcc	.+50     	; 0x16a4 <TothatBox+0x6ea>
						DirToGo.goesto = negatifY;
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goLeft;
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" L ");
    167e:	8d e5       	ldi	r24, 0x5D	; 93
    1680:	92 e0       	ldi	r25, 0x02	; 2
    1682:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, posX, (posY - 1));
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	9c 01       	movw	r18, r24
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	31 09       	sbc	r19, r1
    1690:	4b 81       	ldd	r20, Y+3	; 0x03
    1692:	5c 81       	ldd	r21, Y+4	; 0x04
    1694:	69 85       	ldd	r22, Y+9	; 0x09
    1696:	7a 85       	ldd	r23, Y+10	; 0x0a
    1698:	8f 81       	ldd	r24, Y+7	; 0x07
    169a:	98 85       	ldd	r25, Y+8	; 0x08
    169c:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleR) == PINtoInt(ObstacleR)) & (maze[posX][posY + 1].isClear == false)){
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    16aa:	18 2f       	mov	r17, r24
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	18 17       	cp	r17, r24
    16b6:	09 f0       	breq	.+2      	; 0x16ba <TothatBox+0x700>
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	4b 81       	ldd	r20, Y+3	; 0x03
    16c2:	5c 81       	ldd	r21, Y+4	; 0x04
    16c4:	7c e3       	ldi	r23, 0x3C	; 60
    16c6:	74 9f       	mul	r23, r20
    16c8:	90 01       	movw	r18, r0
    16ca:	75 9f       	mul	r23, r21
    16cc:	30 0d       	add	r19, r0
    16ce:	11 24       	eor	r1, r1
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	81 5b       	subi	r24, 0xB1	; 177
    16da:	9c 4f       	sbci	r25, 0xFC	; 252
    16dc:	fc 01       	movw	r30, r24
    16de:	90 81       	ld	r25, Z
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	99 23       	and	r25, r25
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <TothatBox+0x72e>
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	86 23       	and	r24, r22
    16ea:	88 23       	and	r24, r24
    16ec:	61 f1       	breq	.+88     	; 0x1746 <TothatBox+0x78c>
					if( EcluideanDist(posXDes, posYDes, posX, (posY + 1)) < Eclid){
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	9c 01       	movw	r18, r24
    16f4:	2f 5f       	subi	r18, 0xFF	; 255
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	4b 81       	ldd	r20, Y+3	; 0x03
    16fa:	5c 81       	ldd	r21, Y+4	; 0x04
    16fc:	69 85       	ldd	r22, Y+9	; 0x09
    16fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1700:	8f 81       	ldd	r24, Y+7	; 0x07
    1702:	98 85       	ldd	r25, Y+8	; 0x08
    1704:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1708:	9c 01       	movw	r18, r24
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	28 17       	cp	r18, r24
    1710:	39 07       	cpc	r19, r25
    1712:	c8 f4       	brcc	.+50     	; 0x1746 <TothatBox+0x78c>
						DirToGo.goesto = positifY;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goRight;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" R ");
    1720:	81 e6       	ldi	r24, 0x61	; 97
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, posX, (posY + 1));
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	9c 01       	movw	r18, r24
    172e:	2f 5f       	subi	r18, 0xFF	; 255
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	4b 81       	ldd	r20, Y+3	; 0x03
    1734:	5c 81       	ldd	r21, Y+4	; 0x04
    1736:	69 85       	ldd	r22, Y+9	; 0x09
    1738:	7a 85       	ldd	r23, Y+10	; 0x0a
    173a:	8f 81       	ldd	r24, Y+7	; 0x07
    173c:	98 85       	ldd	r25, Y+8	; 0x08
    173e:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleF0) == PINtoInt(ObstacleF0)) & (maze[posX - 1][posY].isClear == false)){
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    174c:	18 2f       	mov	r17, r24
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	18 17       	cp	r17, r24
    1758:	09 f0       	breq	.+2      	; 0x175c <TothatBox+0x7a2>
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	5c e3       	ldi	r21, 0x3C	; 60
    1764:	58 9f       	mul	r21, r24
    1766:	90 01       	movw	r18, r0
    1768:	59 9f       	mul	r21, r25
    176a:	30 0d       	add	r19, r0
    176c:	11 24       	eor	r1, r1
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	81 5b       	subi	r24, 0xB1	; 177
    177c:	9c 4f       	sbci	r25, 0xFC	; 252
    177e:	fc 01       	movw	r30, r24
    1780:	90 81       	ld	r25, Z
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	99 23       	and	r25, r25
    1786:	09 f0       	breq	.+2      	; 0x178a <TothatBox+0x7d0>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	84 23       	and	r24, r20
    178c:	88 23       	and	r24, r24
    178e:	59 f1       	breq	.+86     	; 0x17e6 <TothatBox+0x82c>
					if( EcluideanDist(posXDes, posYDes, (posX - 1), posY) < Eclid){
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	ac 01       	movw	r20, r24
    1796:	41 50       	subi	r20, 0x01	; 1
    1798:	51 09       	sbc	r21, r1
    179a:	2d 81       	ldd	r18, Y+5	; 0x05
    179c:	3e 81       	ldd	r19, Y+6	; 0x06
    179e:	69 85       	ldd	r22, Y+9	; 0x09
    17a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    17a2:	8f 81       	ldd	r24, Y+7	; 0x07
    17a4:	98 85       	ldd	r25, Y+8	; 0x08
    17a6:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    17aa:	9c 01       	movw	r18, r24
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	28 17       	cp	r18, r24
    17b2:	39 07       	cpc	r19, r25
    17b4:	c0 f4       	brcc	.+48     	; 0x17e6 <TothatBox+0x82c>
						DirToGo.goesto = negatifX;
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goForward;
    17bc:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
						printString(" F \r\n ");
    17c0:	85 e7       	ldi	r24, 0x75	; 117
    17c2:	92 e0       	ldi	r25, 0x02	; 2
    17c4:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, (posX - 1), posY);
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	ac 01       	movw	r20, r24
    17ce:	41 50       	subi	r20, 0x01	; 1
    17d0:	51 09       	sbc	r21, r1
    17d2:	2d 81       	ldd	r18, Y+5	; 0x05
    17d4:	3e 81       	ldd	r19, Y+6	; 0x06
    17d6:	69 85       	ldd	r22, Y+9	; 0x09
    17d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    17da:	8f 81       	ldd	r24, Y+7	; 0x07
    17dc:	98 85       	ldd	r25, Y+8	; 0x08
    17de:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				return false;
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	58 c1       	rjmp	.+688    	; 0x1a9a <TothatBox+0xae0>
			}
			else if (headdirect.my == head){
    17ea:	80 91 79 1f 	lds	r24, 0x1F79	; 0x801f79 <headdirect+0x3>
    17ee:	88 23       	and	r24, r24
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <TothatBox+0x83a>
    17f2:	48 c1       	rjmp	.+656    	; 0x1a84 <TothatBox+0xaca>
				printString("Head my ");
    17f4:	85 e8       	ldi	r24, 0x85	; 133
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
				if((readObs(ObstacleB0) == PINtoInt(ObstacleB0)) & (maze[posX][posY + 1].isClear == false)){
    17fc:	83 e0       	ldi	r24, 0x03	; 3
    17fe:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    1802:	18 2f       	mov	r17, r24
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	18 17       	cp	r17, r24
    180e:	09 f0       	breq	.+2      	; 0x1812 <TothatBox+0x858>
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	4b 81       	ldd	r20, Y+3	; 0x03
    181a:	5c 81       	ldd	r21, Y+4	; 0x04
    181c:	7c e3       	ldi	r23, 0x3C	; 60
    181e:	74 9f       	mul	r23, r20
    1820:	90 01       	movw	r18, r0
    1822:	75 9f       	mul	r23, r21
    1824:	30 0d       	add	r19, r0
    1826:	11 24       	eor	r1, r1
    1828:	82 0f       	add	r24, r18
    182a:	93 1f       	adc	r25, r19
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	81 5b       	subi	r24, 0xB1	; 177
    1832:	9c 4f       	sbci	r25, 0xFC	; 252
    1834:	fc 01       	movw	r30, r24
    1836:	90 81       	ld	r25, Z
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	99 23       	and	r25, r25
    183c:	09 f0       	breq	.+2      	; 0x1840 <TothatBox+0x886>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	86 23       	and	r24, r22
    1842:	88 23       	and	r24, r24
    1844:	61 f1       	breq	.+88     	; 0x189e <TothatBox+0x8e4>
					if( EcluideanDist(posXDes, posYDes, posX, (posY + 1)) < Eclid){
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	9c 01       	movw	r18, r24
    184c:	2f 5f       	subi	r18, 0xFF	; 255
    184e:	3f 4f       	sbci	r19, 0xFF	; 255
    1850:	4b 81       	ldd	r20, Y+3	; 0x03
    1852:	5c 81       	ldd	r21, Y+4	; 0x04
    1854:	69 85       	ldd	r22, Y+9	; 0x09
    1856:	7a 85       	ldd	r23, Y+10	; 0x0a
    1858:	8f 81       	ldd	r24, Y+7	; 0x07
    185a:	98 85       	ldd	r25, Y+8	; 0x08
    185c:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1860:	9c 01       	movw	r18, r24
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	28 17       	cp	r18, r24
    1868:	39 07       	cpc	r19, r25
    186a:	c8 f4       	brcc	.+50     	; 0x189e <TothatBox+0x8e4>
						DirToGo.goesto = positifY;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goBack;
    1872:	83 e0       	ldi	r24, 0x03	; 3
    1874:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" B \r \n");
    1878:	86 e5       	ldi	r24, 0x56	; 86
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, posX, (posY + 1));
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	9c 01       	movw	r18, r24
    1886:	2f 5f       	subi	r18, 0xFF	; 255
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	4b 81       	ldd	r20, Y+3	; 0x03
    188c:	5c 81       	ldd	r21, Y+4	; 0x04
    188e:	69 85       	ldd	r22, Y+9	; 0x09
    1890:	7a 85       	ldd	r23, Y+10	; 0x0a
    1892:	8f 81       	ldd	r24, Y+7	; 0x07
    1894:	98 85       	ldd	r25, Y+8	; 0x08
    1896:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleL) == PINtoInt(ObstacleL)) & (maze[posX + 1][posY].isClear == false)){
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    18a4:	18 2f       	mov	r17, r24
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	18 17       	cp	r17, r24
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <TothatBox+0x8fa>
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	5c e3       	ldi	r21, 0x3C	; 60
    18bc:	58 9f       	mul	r21, r24
    18be:	90 01       	movw	r18, r0
    18c0:	59 9f       	mul	r21, r25
    18c2:	30 0d       	add	r19, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	82 0f       	add	r24, r18
    18cc:	93 1f       	adc	r25, r19
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	81 5b       	subi	r24, 0xB1	; 177
    18d4:	9c 4f       	sbci	r25, 0xFC	; 252
    18d6:	fc 01       	movw	r30, r24
    18d8:	90 81       	ld	r25, Z
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	99 23       	and	r25, r25
    18de:	09 f0       	breq	.+2      	; 0x18e2 <TothatBox+0x928>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	84 23       	and	r24, r20
    18e4:	88 23       	and	r24, r24
    18e6:	59 f1       	breq	.+86     	; 0x193e <TothatBox+0x984>
					if( EcluideanDist(posXDes, posYDes, (posX + 1), posY) < Eclid){
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	ac 01       	movw	r20, r24
    18ee:	4f 5f       	subi	r20, 0xFF	; 255
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	2d 81       	ldd	r18, Y+5	; 0x05
    18f4:	3e 81       	ldd	r19, Y+6	; 0x06
    18f6:	69 85       	ldd	r22, Y+9	; 0x09
    18f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    18fa:	8f 81       	ldd	r24, Y+7	; 0x07
    18fc:	98 85       	ldd	r25, Y+8	; 0x08
    18fe:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1902:	9c 01       	movw	r18, r24
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	28 17       	cp	r18, r24
    190a:	39 07       	cpc	r19, r25
    190c:	c0 f4       	brcc	.+48     	; 0x193e <TothatBox+0x984>
						DirToGo.goesto = positifX;
    190e:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
						DirToGo.gomotor = goLeft;
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" L ");
    1918:	8d e5       	ldi	r24, 0x5D	; 93
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, (posX + 1), posY);
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	ac 01       	movw	r20, r24
    1926:	4f 5f       	subi	r20, 0xFF	; 255
    1928:	5f 4f       	sbci	r21, 0xFF	; 255
    192a:	2d 81       	ldd	r18, Y+5	; 0x05
    192c:	3e 81       	ldd	r19, Y+6	; 0x06
    192e:	69 85       	ldd	r22, Y+9	; 0x09
    1930:	7a 85       	ldd	r23, Y+10	; 0x0a
    1932:	8f 81       	ldd	r24, Y+7	; 0x07
    1934:	98 85       	ldd	r25, Y+8	; 0x08
    1936:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleR) == PINtoInt(ObstacleR)) & (maze[posX - 1][posY].isClear == false)){
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    1944:	18 2f       	mov	r17, r24
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	18 17       	cp	r17, r24
    1950:	09 f0       	breq	.+2      	; 0x1954 <TothatBox+0x99a>
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	5c e3       	ldi	r21, 0x3C	; 60
    195c:	58 9f       	mul	r21, r24
    195e:	90 01       	movw	r18, r0
    1960:	59 9f       	mul	r21, r25
    1962:	30 0d       	add	r19, r0
    1964:	11 24       	eor	r1, r1
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	82 0f       	add	r24, r18
    196c:	93 1f       	adc	r25, r19
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	81 5b       	subi	r24, 0xB1	; 177
    1974:	9c 4f       	sbci	r25, 0xFC	; 252
    1976:	fc 01       	movw	r30, r24
    1978:	90 81       	ld	r25, Z
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	99 23       	and	r25, r25
    197e:	09 f0       	breq	.+2      	; 0x1982 <TothatBox+0x9c8>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	84 23       	and	r24, r20
    1984:	88 23       	and	r24, r24
    1986:	61 f1       	breq	.+88     	; 0x19e0 <TothatBox+0xa26>
					if( EcluideanDist(posXDes, posYDes, (posX - 1), posY) < Eclid){
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	ac 01       	movw	r20, r24
    198e:	41 50       	subi	r20, 0x01	; 1
    1990:	51 09       	sbc	r21, r1
    1992:	2d 81       	ldd	r18, Y+5	; 0x05
    1994:	3e 81       	ldd	r19, Y+6	; 0x06
    1996:	69 85       	ldd	r22, Y+9	; 0x09
    1998:	7a 85       	ldd	r23, Y+10	; 0x0a
    199a:	8f 81       	ldd	r24, Y+7	; 0x07
    199c:	98 85       	ldd	r25, Y+8	; 0x08
    199e:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    19a2:	9c 01       	movw	r18, r24
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	28 17       	cp	r18, r24
    19aa:	39 07       	cpc	r19, r25
    19ac:	c8 f4       	brcc	.+50     	; 0x19e0 <TothatBox+0xa26>
						DirToGo.goesto = negatifX;
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goRight;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
						printString(" R ");
    19ba:	81 e6       	ldi	r24, 0x61	; 97
    19bc:	92 e0       	ldi	r25, 0x02	; 2
    19be:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, (posX - 1), posY);
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	ac 01       	movw	r20, r24
    19c8:	41 50       	subi	r20, 0x01	; 1
    19ca:	51 09       	sbc	r21, r1
    19cc:	2d 81       	ldd	r18, Y+5	; 0x05
    19ce:	3e 81       	ldd	r19, Y+6	; 0x06
    19d0:	69 85       	ldd	r22, Y+9	; 0x09
    19d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    19d4:	8f 81       	ldd	r24, Y+7	; 0x07
    19d6:	98 85       	ldd	r25, Y+8	; 0x08
    19d8:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if((readObs(ObstacleF0) == PINtoInt(ObstacleF0)) & (maze[posX][posY - 1].isClear == false)){
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <readObs>
    19e6:	18 2f       	mov	r17, r24
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <PINtoInt>
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	18 17       	cp	r17, r24
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <TothatBox+0xa3c>
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	4b 81       	ldd	r20, Y+3	; 0x03
    19fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1a00:	7c e3       	ldi	r23, 0x3C	; 60
    1a02:	74 9f       	mul	r23, r20
    1a04:	90 01       	movw	r18, r0
    1a06:	75 9f       	mul	r23, r21
    1a08:	30 0d       	add	r19, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	82 0f       	add	r24, r18
    1a0e:	93 1f       	adc	r25, r19
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	81 5b       	subi	r24, 0xB1	; 177
    1a16:	9c 4f       	sbci	r25, 0xFC	; 252
    1a18:	fc 01       	movw	r30, r24
    1a1a:	90 81       	ld	r25, Z
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	99 23       	and	r25, r25
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <TothatBox+0xa6a>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	86 23       	and	r24, r22
    1a26:	88 23       	and	r24, r24
    1a28:	59 f1       	breq	.+86     	; 0x1a80 <TothatBox+0xac6>
					if( EcluideanDist(posXDes, posYDes, posX, (posY - 1)) < Eclid){
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	9c 01       	movw	r18, r24
    1a30:	21 50       	subi	r18, 0x01	; 1
    1a32:	31 09       	sbc	r19, r1
    1a34:	4b 81       	ldd	r20, Y+3	; 0x03
    1a36:	5c 81       	ldd	r21, Y+4	; 0x04
    1a38:	69 85       	ldd	r22, Y+9	; 0x09
    1a3a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3e:	98 85       	ldd	r25, Y+8	; 0x08
    1a40:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1a44:	9c 01       	movw	r18, r24
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	28 17       	cp	r18, r24
    1a4c:	39 07       	cpc	r19, r25
    1a4e:	c0 f4       	brcc	.+48     	; 0x1a80 <TothatBox+0xac6>
						DirToGo.goesto = negatifY;
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
						DirToGo.gomotor = goForward;
    1a56:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
						printString(" F \r\n ");
    1a5a:	85 e7       	ldi	r24, 0x75	; 117
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
						Eclid = EcluideanDist(posXDes, posYDes, posX, (posY - 1));
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	9c 01       	movw	r18, r24
    1a68:	21 50       	subi	r18, 0x01	; 1
    1a6a:	31 09       	sbc	r19, r1
    1a6c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a6e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a70:	69 85       	ldd	r22, Y+9	; 0x09
    1a72:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a74:	8f 81       	ldd	r24, Y+7	; 0x07
    1a76:	98 85       	ldd	r25, Y+8	; 0x08
    1a78:	0e 94 22 07 	call	0xe44	; 0xe44 <EcluideanDist>
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				return false;
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	0b c0       	rjmp	.+22     	; 0x1a9a <TothatBox+0xae0>
			}
			else {
				DirToGo.goesto = goNull;
    1a84:	84 e0       	ldi	r24, 0x04	; 4
    1a86:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <DirToGo>
				DirToGo.gomotor = goBack;
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
				return false;
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <TothatBox+0xae0>
			}
			isExecute = false;
		}
		return false;
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <TothatBox+0xae0>
	}
	else{
		return true;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    1a9a:	2a 96       	adiw	r28, 0x0a	; 10
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	08 95       	ret

00001aae <FindTheDest>:

bool FindTheDest(uint16_t posX, uint16_t posY){
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <FindTheDest+0x6>
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <FindTheDest+0x8>
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
    1abe:	7e 83       	std	Y+6, r23	; 0x06
    1ac0:	6d 83       	std	Y+5, r22	; 0x05
	printString(" FindTheDest \n");
    1ac2:	80 eb       	ldi	r24, 0xB0	; 176
    1ac4:	92 e0       	ldi	r25, 0x02	; 2
    1ac6:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	uint16_t *posDest;
	posDest = CheckMaze(posX, posY);
    1aca:	2d 81       	ldd	r18, Y+5	; 0x05
    1acc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	0e 94 8b 06 	call	0xd16	; 0xd16 <CheckMaze>
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
	printString(" posDest : ");
    1adc:	8f eb       	ldi	r24, 0xBF	; 191
    1ade:	92 e0       	ldi	r25, 0x02	; 2
    1ae0:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	printWord(*(posDest + 0));
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	fc 01       	movw	r30, r24
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	0e 94 32 11 	call	0x2264	; 0x2264 <printWord>
	printString(" ");
    1af2:	8e e8       	ldi	r24, 0x8E	; 142
    1af4:	92 e0       	ldi	r25, 0x02	; 2
    1af6:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	printWord(*(posDest + 1));
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	02 96       	adiw	r24, 0x02	; 2
    1b00:	fc 01       	movw	r30, r24
    1b02:	80 81       	ld	r24, Z
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	0e 94 32 11 	call	0x2264	; 0x2264 <printWord>
	printString("\n");
    1b0a:	8b ec       	ldi	r24, 0xCB	; 203
    1b0c:	92 e0       	ldi	r25, 0x02	; 2
    1b0e:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	if ((posDest[0] == 0) && (posDest[1] == 0)){
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	fc 01       	movw	r30, r24
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	89 2b       	or	r24, r25
    1b1e:	51 f4       	brne	.+20     	; 0x1b34 <FindTheDest+0x86>
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	02 96       	adiw	r24, 0x02	; 2
    1b26:	fc 01       	movw	r30, r24
    1b28:	80 81       	ld	r24, Z
    1b2a:	91 81       	ldd	r25, Z+1	; 0x01
    1b2c:	89 2b       	or	r24, r25
    1b2e:	11 f4       	brne	.+4      	; 0x1b34 <FindTheDest+0x86>
		return neither;
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	16 c0       	rjmp	.+44     	; 0x1b60 <FindTheDest+0xb2>
	}
	if( TothatBox(posX, posY, posDest[0], posDest[1]) == false){
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	02 96       	adiw	r24, 0x02	; 2
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	20 81       	ld	r18, Z
    1b3e:	31 81       	ldd	r19, Z+1	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	fc 01       	movw	r30, r24
    1b46:	40 81       	ld	r20, Z
    1b48:	51 81       	ldd	r21, Z+1	; 0x01
    1b4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	0e 94 dd 07 	call	0xfba	; 0xfba <TothatBox>
    1b56:	88 23       	and	r24, r24
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <FindTheDest+0xb0>
		return false;
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <FindTheDest+0xb2>
	}
	else return true;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
}
    1b60:	26 96       	adiw	r28, 0x06	; 6
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	08 95       	ret

00001b72 <BackToHome>:

bool BackToHome(uint16_t posX, uint16_t posY){
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <BackToHome+0x6>
    1b78:	1f 92       	push	r1
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	7c 83       	std	Y+4, r23	; 0x04
    1b84:	6b 83       	std	Y+3, r22	; 0x03
	if( TothatBox(posX, posY, SquareMaze / 2, SquareMaze / 2) == false){
    1b86:	6b 81       	ldd	r22, Y+3	; 0x03
    1b88:	7c 81       	ldd	r23, Y+4	; 0x04
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	2e e1       	ldi	r18, 0x1E	; 30
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4e e1       	ldi	r20, 0x1E	; 30
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	0e 94 dd 07 	call	0xfba	; 0xfba <TothatBox>
    1b9a:	88 23       	and	r24, r24
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <BackToHome+0x30>
		return false;
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <BackToHome+0x32>
	}
	else return true;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <turnright>:
#include "MotorDriver.h"
#include "GeneralFunc.h"
#include <util/delay.h>
#include "MapMaze.h"

void turnright(){
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	printString("Turn Right \r\n");
    1bba:	8d ec       	ldi	r24, 0xCD	; 205
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	MotorBlock &= ~(_BV(MotorIn1)) | ~(_BV(MotorIn2)) | ~(_BV(MotorIn4));
    1bc2:	80 e2       	ldi	r24, 0x20	; 32
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	20 e2       	ldi	r18, 0x20	; 32
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	f9 01       	movw	r30, r18
    1bcc:	20 81       	ld	r18, Z
    1bce:	fc 01       	movw	r30, r24
    1bd0:	20 83       	st	Z, r18
	MotorBlock |= _BV(MotorIn3);
    1bd2:	80 e2       	ldi	r24, 0x20	; 32
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	20 e2       	ldi	r18, 0x20	; 32
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	f9 01       	movw	r30, r18
    1bdc:	20 81       	ld	r18, Z
    1bde:	24 60       	ori	r18, 0x04	; 4
    1be0:	fc 01       	movw	r30, r24
    1be2:	20 83       	st	Z, r18
	analogWrite(0x08,MotorSpeedTurn);
    1be4:	6a ea       	ldi	r22, 0xAA	; 170
    1be6:	88 e0       	ldi	r24, 0x08	; 8
    1be8:	0e 94 a0 01 	call	0x340	; 0x340 <analogWrite>
	analogWrite(0x10,MotorSpeedStop);
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	80 e1       	ldi	r24, 0x10	; 16
    1bf0:	0e 94 a0 01 	call	0x340	; 0x340 <analogWrite>
	stops();
    1bf4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <stops>
}
    1bf8:	00 00       	nop
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	08 95       	ret

00001c00 <turnleft>:

void turnleft(){
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
	printString("Turn Left \r \n");
    1c08:	8b ed       	ldi	r24, 0xDB	; 219
    1c0a:	92 e0       	ldi	r25, 0x02	; 2
    1c0c:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	MotorBlock &= ~(_BV(MotorIn3)) | ~(_BV(MotorIn2)) | ~(_BV(MotorIn4));
    1c10:	80 e2       	ldi	r24, 0x20	; 32
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	20 e2       	ldi	r18, 0x20	; 32
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	f9 01       	movw	r30, r18
    1c1a:	20 81       	ld	r18, Z
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
	MotorBlock |= _BV(MotorIn1) ;
    1c20:	80 e2       	ldi	r24, 0x20	; 32
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	20 e2       	ldi	r18, 0x20	; 32
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	f9 01       	movw	r30, r18
    1c2a:	20 81       	ld	r18, Z
    1c2c:	21 60       	ori	r18, 0x01	; 1
    1c2e:	fc 01       	movw	r30, r24
    1c30:	20 83       	st	Z, r18
	analogWrite(0x10,MotorSpeedTurn);
    1c32:	6a ea       	ldi	r22, 0xAA	; 170
    1c34:	80 e1       	ldi	r24, 0x10	; 16
    1c36:	0e 94 a0 01 	call	0x340	; 0x340 <analogWrite>
	analogWrite(0x08,MotorSpeedStop);
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	88 e0       	ldi	r24, 0x08	; 8
    1c3e:	0e 94 a0 01 	call	0x340	; 0x340 <analogWrite>
	stops();
    1c42:	0e 94 75 0e 	call	0x1cea	; 0x1cea <stops>
}
    1c46:	00 00       	nop
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <forward>:

void forward(){
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	printString("Forward \r\n");
    1c56:	89 ee       	ldi	r24, 0xE9	; 233
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	MotorBlock &= ~(_BV(MotorIn2)) | ~(_BV(MotorIn4));
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	20 e2       	ldi	r18, 0x20	; 32
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	f9 01       	movw	r30, r18
    1c68:	20 81       	ld	r18, Z
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	20 83       	st	Z, r18
	MotorBlock |= _BV(MotorIn1) | _BV(MotorIn3) ;
    1c6e:	80 e2       	ldi	r24, 0x20	; 32
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	20 e2       	ldi	r18, 0x20	; 32
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	f9 01       	movw	r30, r18
    1c78:	20 81       	ld	r18, Z
    1c7a:	25 60       	ori	r18, 0x05	; 5
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	20 83       	st	Z, r18
	analogWrite(0x08,MotorSpeedRun);
    1c80:	62 e8       	ldi	r22, 0x82	; 130
    1c82:	88 e0       	ldi	r24, 0x08	; 8
    1c84:	0e 94 a0 01 	call	0x340	; 0x340 <analogWrite>
	analogWrite(0x10,MotorSpeedRun);
    1c88:	62 e8       	ldi	r22, 0x82	; 130
    1c8a:	80 e1       	ldi	r24, 0x10	; 16
    1c8c:	0e 94 a0 01 	call	0x340	; 0x340 <analogWrite>
	stops();
    1c90:	0e 94 75 0e 	call	0x1cea	; 0x1cea <stops>
}
    1c94:	00 00       	nop
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <bacrward>:

void bacrward(){
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	printString("Backward \r\n");
    1ca4:	84 ef       	ldi	r24, 0xF4	; 244
    1ca6:	92 e0       	ldi	r25, 0x02	; 2
    1ca8:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
	MotorBlock &= ~(_BV(MotorIn1)) | ~(_BV(MotorIn3));
    1cac:	80 e2       	ldi	r24, 0x20	; 32
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	20 e2       	ldi	r18, 0x20	; 32
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	f9 01       	movw	r30, r18
    1cb6:	20 81       	ld	r18, Z
    1cb8:	fc 01       	movw	r30, r24
    1cba:	20 83       	st	Z, r18
	MotorBlock |= _BV(MotorIn2) | _BV(MotorIn4) ;
    1cbc:	80 e2       	ldi	r24, 0x20	; 32
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	20 e2       	ldi	r18, 0x20	; 32
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	20 81       	ld	r18, Z
    1cc8:	2a 60       	ori	r18, 0x0A	; 10
    1cca:	fc 01       	movw	r30, r24
    1ccc:	20 83       	st	Z, r18
	analogWrite(0x08,MotorSpeedRun);
    1cce:	62 e8       	ldi	r22, 0x82	; 130
    1cd0:	88 e0       	ldi	r24, 0x08	; 8
    1cd2:	0e 94 a0 01 	call	0x340	; 0x340 <analogWrite>
	analogWrite(0x10,MotorSpeedRun);
    1cd6:	62 e8       	ldi	r22, 0x82	; 130
    1cd8:	80 e1       	ldi	r24, 0x10	; 16
    1cda:	0e 94 a0 01 	call	0x340	; 0x340 <analogWrite>
	stops();
    1cde:	0e 94 75 0e 	call	0x1cea	; 0x1cea <stops>
}
    1ce2:	00 00       	nop
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <stops>:

void stops(){
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	2e 97       	sbiw	r28, 0x0e	; 14
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	aa e7       	ldi	r26, 0x7A	; 122
    1d04:	b4 e4       	ldi	r27, 0x44	; 68
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	ab 83       	std	Y+3, r26	; 0x03
    1d0c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a e7       	ldi	r20, 0x7A	; 122
    1d14:	55 e4       	ldi	r21, 0x45	; 69
    1d16:	69 81       	ldd	r22, Y+1	; 0x01
    1d18:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	0e 94 3a 14 	call	0x2874	; 0x2874 <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	af 83       	std	Y+7, r26	; 0x07
    1d2c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e8       	ldi	r20, 0x80	; 128
    1d34:	5f e3       	ldi	r21, 0x3F	; 63
    1d36:	6d 81       	ldd	r22, Y+5	; 0x05
    1d38:	7e 81       	ldd	r23, Y+6	; 0x06
    1d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3c:	98 85       	ldd	r25, Y+8	; 0x08
    1d3e:	0e 94 4f 13 	call	0x269e	; 0x269e <__cmpsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <stops+0x66>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9a 87       	std	Y+10, r25	; 0x0a
    1d4c:	89 87       	std	Y+9, r24	; 0x09
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <stops+0xe4>
	else if (__tmp > 65535)
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	3f ef       	ldi	r19, 0xFF	; 255
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	57 e4       	ldi	r21, 0x47	; 71
    1d58:	6d 81       	ldd	r22, Y+5	; 0x05
    1d5a:	7e 81       	ldd	r23, Y+6	; 0x06
    1d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5e:	98 85       	ldd	r25, Y+8	; 0x08
    1d60:	0e 94 35 14 	call	0x286a	; 0x286a <__gesf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <stops+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	69 81       	ldd	r22, Y+1	; 0x01
    1d72:	7a 81       	ldd	r23, Y+2	; 0x02
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	0e 94 3a 14 	call	0x2874	; 0x2874 <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9a 87       	std	Y+10, r25	; 0x0a
    1d8e:	89 87       	std	Y+9, r24	; 0x09
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <stops+0xc6>
    1d92:	80 e9       	ldi	r24, 0x90	; 144
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	9c 87       	std	Y+12, r25	; 0x0c
    1d98:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <stops+0xb4>
    1da2:	9c 87       	std	Y+12, r25	; 0x0c
    1da4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9a 87       	std	Y+10, r25	; 0x0a
    1dae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	89 2b       	or	r24, r25
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <stops+0xa8>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <stops+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbc:	7e 81       	ldd	r23, Y+6	; 0x06
    1dbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc0:	98 85       	ldd	r25, Y+8	; 0x08
    1dc2:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9a 87       	std	Y+10, r25	; 0x0a
    1dcc:	89 87       	std	Y+9, r24	; 0x09
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	9e 87       	std	Y+14, r25	; 0x0e
    1dd4:	8d 87       	std	Y+13, r24	; 0x0d
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <stops+0xf0>
    1dde:	9e 87       	std	Y+14, r25	; 0x0e
    1de0:	8d 87       	std	Y+13, r24	; 0x0d
  _delay_ms(Delay_Motor);
  printString("Stops Motor \r\n");
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	93 e0       	ldi	r25, 0x03	; 3
    1de6:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
  isExecute = true;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 93 73 1f 	sts	0x1F73, r24	; 0x801f73 <isExecute>
}
    1df0:	00 00       	nop
    1df2:	2e 96       	adiw	r28, 0x0e	; 14
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <Realstops>:

void Realstops(){
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
	MotorBlock &= (MotorBlock & 0x00) | ~(_BV(MotorIn1)) | ~(_BV(MotorIn3)) | ~(_BV(MotorIn2)) | ~(_BV(MotorIn4));
    1e0c:	80 e2       	ldi	r24, 0x20	; 32
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	fc 01       	movw	r30, r24
    1e12:	80 81       	ld	r24, Z
    1e14:	4f ef       	ldi	r20, 0xFF	; 255
    1e16:	5f ef       	ldi	r21, 0xFF	; 255
    1e18:	80 e2       	ldi	r24, 0x20	; 32
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	20 e2       	ldi	r18, 0x20	; 32
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	f9 01       	movw	r30, r18
    1e22:	20 81       	ld	r18, Z
    1e24:	32 2f       	mov	r19, r18
    1e26:	24 2f       	mov	r18, r20
    1e28:	23 23       	and	r18, r19
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	20 83       	st	Z, r18
}
    1e2e:	00 00       	nop
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	08 95       	ret

00001e36 <readObs>:
#include "GeneralFunc.h"
#include "Obs.h"
#include "MapMaze.h"
#include "MotorDriver.h"

uint8_t readObs(uint8_t ObsPin){
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	1f 92       	push	r1
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	89 83       	std	Y+1, r24	; 0x01
	return (ObsBlock & (1 << ObsPin));
    1e42:	86 e2       	ldi	r24, 0x26	; 38
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	fc 01       	movw	r30, r24
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <readObs+0x26>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	2a 95       	dec	r18
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <readObs+0x22>
    1e60:	84 23       	and	r24, r20
}
    1e62:	0f 90       	pop	r0
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <PINtoInt>:

uint8_t PINtoInt(uint8_t Pin){
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	1f 92       	push	r1
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	89 83       	std	Y+1, r24	; 0x01
	return (1 << Pin);
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <PINtoInt+0x1c>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	2a 95       	dec	r18
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <PINtoInt+0x18>
}
    1e8a:	0f 90       	pop	r0
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	08 95       	ret

00001e92 <WhereYouGo>:
uint8_t WhereYouGo(){
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	if(isExecute == false){
    1e9a:	80 91 73 1f 	lds	r24, 0x1F73	; 0x801f73 <isExecute>
    1e9e:	88 23       	and	r24, r24
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <WhereYouGo+0x12>
    1ea2:	95 c0       	rjmp	.+298    	; 0x1fce <WhereYouGo+0x13c>
		printString("WhereYouGo : ");
    1ea4:	8f e0       	ldi	r24, 0x0F	; 15
    1ea6:	93 e0       	ldi	r25, 0x03	; 3
    1ea8:	0e 94 86 10 	call	0x210c	; 0x210c <printString>
		if (DirToGo.goesto == positifX){
    1eac:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <DirToGo>
    1eb0:	88 23       	and	r24, r24
    1eb2:	a9 f4       	brne	.+42     	; 0x1ede <WhereYouGo+0x4c>
			headdirect.px = head;
    1eb4:	10 92 76 1f 	sts	0x1F76, r1	; 0x801f76 <headdirect>
			headdirect.py = tail;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	80 93 77 1f 	sts	0x1F77, r24	; 0x801f77 <headdirect+0x1>
			headdirect.mx = tail;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	80 93 78 1f 	sts	0x1F78, r24	; 0x801f78 <headdirect+0x2>
			headdirect.my = tail;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	80 93 79 1f 	sts	0x1F79, r24	; 0x801f79 <headdirect+0x3>
			CurrentPos.CurX = CurrentPos.CurX + 1 ;
    1eca:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <CurrentPos>
    1ece:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <CurrentPos+0x1>
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <CurrentPos+0x1>
    1ed8:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <CurrentPos>
    1edc:	57 c0       	rjmp	.+174    	; 0x1f8c <WhereYouGo+0xfa>
		}
		else if (DirToGo.goesto == positifY){
    1ede:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <DirToGo>
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	a9 f4       	brne	.+42     	; 0x1f10 <WhereYouGo+0x7e>
			headdirect.px = tail;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	80 93 76 1f 	sts	0x1F76, r24	; 0x801f76 <headdirect>
			headdirect.py = head;
    1eec:	10 92 77 1f 	sts	0x1F77, r1	; 0x801f77 <headdirect+0x1>
			headdirect.mx = tail;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	80 93 78 1f 	sts	0x1F78, r24	; 0x801f78 <headdirect+0x2>
			headdirect.my = tail;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 93 79 1f 	sts	0x1F79, r24	; 0x801f79 <headdirect+0x3>
			CurrentPos.CurY = CurrentPos.CurY + 1 ;
    1efc:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <CurrentPos+0x2>
    1f00:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <CurrentPos+0x3>
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <CurrentPos+0x3>
    1f0a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <CurrentPos+0x2>
    1f0e:	3e c0       	rjmp	.+124    	; 0x1f8c <WhereYouGo+0xfa>
		}
		else if (DirToGo.goesto == negatifX){
    1f10:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <DirToGo>
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	a9 f4       	brne	.+42     	; 0x1f42 <WhereYouGo+0xb0>
			headdirect.px = tail;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	80 93 76 1f 	sts	0x1F76, r24	; 0x801f76 <headdirect>
			headdirect.py = tail;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 77 1f 	sts	0x1F77, r24	; 0x801f77 <headdirect+0x1>
			headdirect.mx = head;
    1f24:	10 92 78 1f 	sts	0x1F78, r1	; 0x801f78 <headdirect+0x2>
			headdirect.my = tail;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	80 93 79 1f 	sts	0x1F79, r24	; 0x801f79 <headdirect+0x3>
			CurrentPos.CurX = CurrentPos.CurX - 1 ;
    1f2e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <CurrentPos>
    1f32:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <CurrentPos+0x1>
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <CurrentPos+0x1>
    1f3c:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <CurrentPos>
    1f40:	25 c0       	rjmp	.+74     	; 0x1f8c <WhereYouGo+0xfa>
		}
		else if (DirToGo.goesto == negatifY){
    1f42:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <DirToGo>
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	a9 f4       	brne	.+42     	; 0x1f74 <WhereYouGo+0xe2>
			headdirect.px = tail;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	80 93 76 1f 	sts	0x1F76, r24	; 0x801f76 <headdirect>
			headdirect.py = tail;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	80 93 77 1f 	sts	0x1F77, r24	; 0x801f77 <headdirect+0x1>
			headdirect.mx = tail;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 78 1f 	sts	0x1F78, r24	; 0x801f78 <headdirect+0x2>
			headdirect.my = head;
    1f5c:	10 92 79 1f 	sts	0x1F79, r1	; 0x801f79 <headdirect+0x3>
			CurrentPos.CurY = CurrentPos.CurY - 1 ;
    1f60:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <CurrentPos+0x2>
    1f64:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <CurrentPos+0x3>
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <CurrentPos+0x3>
    1f6e:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <CurrentPos+0x2>
    1f72:	0c c0       	rjmp	.+24     	; 0x1f8c <WhereYouGo+0xfa>
		}
		else {
			headdirect.px = tail;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	80 93 76 1f 	sts	0x1F76, r24	; 0x801f76 <headdirect>
			headdirect.py = tail;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	80 93 77 1f 	sts	0x1F77, r24	; 0x801f77 <headdirect+0x1>
			headdirect.mx = tail;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 78 1f 	sts	0x1F78, r24	; 0x801f78 <headdirect+0x2>
			headdirect.my = tail;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	80 93 79 1f 	sts	0x1F79, r24	; 0x801f79 <headdirect+0x3>
		}

		if(DirToGo.gomotor == goForward){
    1f8c:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <DirToGo+0x1>
    1f90:	88 23       	and	r24, r24
    1f92:	11 f4       	brne	.+4      	; 0x1f98 <WhereYouGo+0x106>
			forward();
    1f94:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <forward>
		}
		if(DirToGo.gomotor == goLeft){
    1f98:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <DirToGo+0x1>
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	11 f4       	brne	.+4      	; 0x1fa4 <WhereYouGo+0x112>
			turnleft();
    1fa0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <turnleft>
		}
		if(DirToGo.gomotor == goRight){
    1fa4:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <DirToGo+0x1>
    1fa8:	81 30       	cpi	r24, 0x01	; 1
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <WhereYouGo+0x11e>
			turnright();
    1fac:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <turnright>
		}
		if(DirToGo.gomotor == goBack){
    1fb0:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <DirToGo+0x1>
    1fb4:	83 30       	cpi	r24, 0x03	; 3
    1fb6:	11 f4       	brne	.+4      	; 0x1fbc <WhereYouGo+0x12a>
			bacrward();
    1fb8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <bacrward>
		}
		if(DirToGo.gomotor == motorNull){
    1fbc:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <DirToGo+0x1>
    1fc0:	84 30       	cpi	r24, 0x04	; 4
    1fc2:	11 f4       	brne	.+4      	; 0x1fc8 <WhereYouGo+0x136>
			Realstops();
    1fc4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <Realstops>
		}

		DirToGo.gomotor = goNull;
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <DirToGo+0x1>
	}
	return true;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
}
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <MotorPinInit>:
 */

#include <avr/io.h>
#include "PinDefined.h"

void MotorPinInit(){
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
	DataDirMotor &= 0x00;
    1fde:	81 e2       	ldi	r24, 0x21	; 33
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	80 81       	ld	r24, Z
    1fe6:	81 e2       	ldi	r24, 0x21	; 33
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	fc 01       	movw	r30, r24
    1fec:	10 82       	st	Z, r1
	DataDirMotor |= _BV(MotorIn1) | _BV(MotorIn2) | _BV(MotorIn3) | _BV(MotorIn4); // set as output set as 1
    1fee:	81 e2       	ldi	r24, 0x21	; 33
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	21 e2       	ldi	r18, 0x21	; 33
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	20 81       	ld	r18, Z
    1ffa:	2f 60       	ori	r18, 0x0F	; 15
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	20 83       	st	Z, r18
}
    2000:	00 00       	nop
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <ObstacleInit>:


void ObstacleInit(){
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	DataDirObs &= (DataDirObs & 0x00) | ~(_BV(ObstacleF0)) | ~(_BV(ObstacleR)) | ~(_BV(ObstacleL)) | ~(_BV(ObstacleB0)) ; // set as input set as 0
    2010:	87 e2       	ldi	r24, 0x27	; 39
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	fc 01       	movw	r30, r24
    2016:	80 81       	ld	r24, Z
    2018:	4f ef       	ldi	r20, 0xFF	; 255
    201a:	5f ef       	ldi	r21, 0xFF	; 255
    201c:	87 e2       	ldi	r24, 0x27	; 39
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	27 e2       	ldi	r18, 0x27	; 39
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	f9 01       	movw	r30, r18
    2026:	20 81       	ld	r18, Z
    2028:	32 2f       	mov	r19, r18
    202a:	24 2f       	mov	r18, r20
    202c:	23 23       	and	r18, r19
    202e:	fc 01       	movw	r30, r24
    2030:	20 83       	st	Z, r18
	PORTC |= _BV(ObstacleF0) | _BV(ObstacleR) | _BV(ObstacleL) | _BV(ObstacleB0) ; // set pull up set as 1
    2032:	88 e2       	ldi	r24, 0x28	; 40
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	28 e2       	ldi	r18, 0x28	; 40
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	f9 01       	movw	r30, r18
    203c:	20 81       	ld	r18, Z
    203e:	2f 60       	ori	r18, 0x0F	; 15
    2040:	fc 01       	movw	r30, r24
    2042:	20 83       	st	Z, r18
}
    2044:	00 00       	nop
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret

0000204c <ExtInit>:

void ExtInit(){
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
	DDRC |= _BV(DDC6);
    2054:	87 e2       	ldi	r24, 0x27	; 39
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	27 e2       	ldi	r18, 0x27	; 39
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	f9 01       	movw	r30, r18
    205e:	20 81       	ld	r18, Z
    2060:	20 64       	ori	r18, 0x40	; 64
    2062:	fc 01       	movw	r30, r24
    2064:	20 83       	st	Z, r18
}
    2066:	00 00       	nop
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <initUSART>:

#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
    2076:	85 ec       	ldi	r24, 0xC5	; 197
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	fc 01       	movw	r30, r24
    207c:	10 82       	st	Z, r1
  UBRR0L = UBRRL_VALUE;
    207e:	84 ec       	ldi	r24, 0xC4	; 196
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	27 e6       	ldi	r18, 0x67	; 103
    2084:	fc 01       	movw	r30, r24
    2086:	20 83       	st	Z, r18
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
    2088:	80 ec       	ldi	r24, 0xC0	; 192
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	20 ec       	ldi	r18, 0xC0	; 192
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	f9 01       	movw	r30, r18
    2092:	20 81       	ld	r18, Z
    2094:	2d 7f       	andi	r18, 0xFD	; 253
    2096:	fc 01       	movw	r30, r24
    2098:	20 83       	st	Z, r18
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
    209a:	81 ec       	ldi	r24, 0xC1	; 193
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	28 e1       	ldi	r18, 0x18	; 24
    20a0:	fc 01       	movw	r30, r24
    20a2:	20 83       	st	Z, r18
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
    20a4:	82 ec       	ldi	r24, 0xC2	; 194
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	26 e0       	ldi	r18, 0x06	; 6
    20aa:	fc 01       	movw	r30, r24
    20ac:	20 83       	st	Z, r18
}
    20ae:	00 00       	nop
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	08 95       	ret

000020b6 <transmitByte>:


void transmitByte(uint8_t data) {
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	1f 92       	push	r1
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	89 83       	std	Y+1, r24	; 0x01
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
    20c2:	80 ec       	ldi	r24, 0xC0	; 192
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	fc 01       	movw	r30, r24
    20c8:	80 81       	ld	r24, Z
    20ca:	88 2f       	mov	r24, r24
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	80 72       	andi	r24, 0x20	; 32
    20d0:	99 27       	eor	r25, r25
    20d2:	89 2b       	or	r24, r25
    20d4:	b1 f3       	breq	.-20     	; 0x20c2 <transmitByte+0xc>
  UDR0 = data;                                            /* send data */
    20d6:	86 ec       	ldi	r24, 0xC6	; 198
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	29 81       	ldd	r18, Y+1	; 0x01
    20dc:	fc 01       	movw	r30, r24
    20de:	20 83       	st	Z, r18
}
    20e0:	00 00       	nop
    20e2:	0f 90       	pop	r0
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	08 95       	ret

000020ea <receiveByte>:

uint8_t receiveByte(void) {
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
    20f2:	80 ec       	ldi	r24, 0xC0	; 192
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	fc 01       	movw	r30, r24
    20f8:	80 81       	ld	r24, Z
    20fa:	88 23       	and	r24, r24
    20fc:	d4 f7       	brge	.-12     	; 0x20f2 <receiveByte+0x8>
  return UDR0;                                /* return register value */
    20fe:	86 ec       	ldi	r24, 0xC6	; 198
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	fc 01       	movw	r30, r24
    2104:	80 81       	ld	r24, Z
}
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	00 d0       	rcall	.+0      	; 0x2112 <printString+0x6>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	9b 83       	std	Y+3, r25	; 0x03
    2118:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t i = 0;
    211a:	19 82       	std	Y+1, r1	; 0x01
  while (myString[i]) {
    211c:	0e c0       	rjmp	.+28     	; 0x213a <printString+0x2e>
    transmitByte(myString[i]);
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	2a 81       	ldd	r18, Y+2	; 0x02
    2126:	3b 81       	ldd	r19, Y+3	; 0x03
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	fc 01       	movw	r30, r24
    212e:	80 81       	ld	r24, Z
    2130:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
    i++;
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	89 83       	std	Y+1, r24	; 0x01

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	2a 81       	ldd	r18, Y+2	; 0x02
    2142:	3b 81       	ldd	r19, Y+3	; 0x03
    2144:	82 0f       	add	r24, r18
    2146:	93 1f       	adc	r25, r19
    2148:	fc 01       	movw	r30, r24
    214a:	80 81       	ld	r24, Z
    214c:	88 23       	and	r24, r24
    214e:	39 f7       	brne	.-50     	; 0x211e <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
    2150:	00 00       	nop
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	08 95       	ret

0000215e <readString>:

void readString(char myString[], uint8_t maxLength) {
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	00 d0       	rcall	.+0      	; 0x2164 <readString+0x6>
    2164:	1f 92       	push	r1
    2166:	1f 92       	push	r1
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	8b 83       	std	Y+3, r24	; 0x03
    2170:	6d 83       	std	Y+5, r22	; 0x05
  char response;
  uint8_t i;
  i = 0;
    2172:	19 82       	std	Y+1, r1	; 0x01
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
    2174:	16 c0       	rjmp	.+44     	; 0x21a2 <readString+0x44>
    response = receiveByte();
    2176:	0e 94 75 10 	call	0x20ea	; 0x20ea <receiveByte>
    217a:	8a 83       	std	Y+2, r24	; 0x02
    transmitByte(response);                                    /* echo */
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	8d 30       	cpi	r24, 0x0D	; 13
    2186:	c1 f0       	breq	.+48     	; 0x21b8 <readString+0x5a>
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	2b 81       	ldd	r18, Y+3	; 0x03
    2190:	3c 81       	ldd	r19, Y+4	; 0x04
    2192:	82 0f       	add	r24, r18
    2194:	93 1f       	adc	r25, r19
    2196:	2a 81       	ldd	r18, Y+2	; 0x02
    2198:	fc 01       	movw	r30, r24
    219a:	20 83       	st	Z, r18
      i++;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	89 83       	std	Y+1, r24	; 0x01

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	88 2f       	mov	r24, r24
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	28 17       	cp	r18, r24
    21b2:	39 07       	cpc	r19, r25
    21b4:	04 f3       	brlt	.-64     	; 0x2176 <readString+0x18>
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <readString+0x5c>
    response = receiveByte();
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
    21b8:	00 00       	nop
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	2b 81       	ldd	r18, Y+3	; 0x03
    21c2:	3c 81       	ldd	r19, Y+4	; 0x04
    21c4:	82 0f       	add	r24, r18
    21c6:	93 1f       	adc	r25, r19
    21c8:	fc 01       	movw	r30, r24
    21ca:	10 82       	st	Z, r1
}
    21cc:	00 00       	nop
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	08 95       	ret

000021de <printByte>:

void printByte(uint8_t byte) {
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	1f 92       	push	r1
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	89 83       	std	Y+1, r24	; 0x01
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
    21ea:	99 81       	ldd	r25, Y+1	; 0x01
    21ec:	89 e2       	ldi	r24, 0x29	; 41
    21ee:	98 9f       	mul	r25, r24
    21f0:	81 2d       	mov	r24, r1
    21f2:	11 24       	eor	r1, r1
    21f4:	82 95       	swap	r24
    21f6:	8f 70       	andi	r24, 0x0F	; 15
    21f8:	80 5d       	subi	r24, 0xD0	; 208
    21fa:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
    21fe:	99 81       	ldd	r25, Y+1	; 0x01
    2200:	8d ec       	ldi	r24, 0xCD	; 205
    2202:	98 9f       	mul	r25, r24
    2204:	81 2d       	mov	r24, r1
    2206:	11 24       	eor	r1, r1
    2208:	98 2f       	mov	r25, r24
    220a:	96 95       	lsr	r25
    220c:	96 95       	lsr	r25
    220e:	96 95       	lsr	r25
    2210:	8d ec       	ldi	r24, 0xCD	; 205
    2212:	98 9f       	mul	r25, r24
    2214:	81 2d       	mov	r24, r1
    2216:	11 24       	eor	r1, r1
    2218:	86 95       	lsr	r24
    221a:	86 95       	lsr	r24
    221c:	86 95       	lsr	r24
    221e:	88 0f       	add	r24, r24
    2220:	28 2f       	mov	r18, r24
    2222:	22 0f       	add	r18, r18
    2224:	22 0f       	add	r18, r18
    2226:	82 0f       	add	r24, r18
    2228:	29 2f       	mov	r18, r25
    222a:	28 1b       	sub	r18, r24
    222c:	82 2f       	mov	r24, r18
    222e:	80 5d       	subi	r24, 0xD0	; 208
    2230:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
    2234:	99 81       	ldd	r25, Y+1	; 0x01
    2236:	8d ec       	ldi	r24, 0xCD	; 205
    2238:	98 9f       	mul	r25, r24
    223a:	81 2d       	mov	r24, r1
    223c:	11 24       	eor	r1, r1
    223e:	86 95       	lsr	r24
    2240:	86 95       	lsr	r24
    2242:	86 95       	lsr	r24
    2244:	88 0f       	add	r24, r24
    2246:	28 2f       	mov	r18, r24
    2248:	22 0f       	add	r18, r18
    224a:	22 0f       	add	r18, r18
    224c:	82 0f       	add	r24, r18
    224e:	29 2f       	mov	r18, r25
    2250:	28 1b       	sub	r18, r24
    2252:	82 2f       	mov	r24, r18
    2254:	80 5d       	subi	r24, 0xD0	; 208
    2256:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
}
    225a:	00 00       	nop
    225c:	0f 90       	pop	r0
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	08 95       	ret

00002264 <printWord>:

void printWord(uint16_t word) {
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	1f 92       	push	r1
    226a:	1f 92       	push	r1
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	9a 81       	ldd	r25, Y+2	; 0x02
    2278:	92 95       	swap	r25
    227a:	82 95       	swap	r24
    227c:	8f 70       	andi	r24, 0x0F	; 15
    227e:	89 27       	eor	r24, r25
    2280:	9f 70       	andi	r25, 0x0F	; 15
    2282:	89 27       	eor	r24, r25
    2284:	9c 01       	movw	r18, r24
    2286:	a7 e4       	ldi	r26, 0x47	; 71
    2288:	b3 e0       	ldi	r27, 0x03	; 3
    228a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__umulhisi3>
    228e:	96 95       	lsr	r25
    2290:	87 95       	ror	r24
    2292:	96 95       	lsr	r25
    2294:	87 95       	ror	r24
    2296:	96 95       	lsr	r25
    2298:	87 95       	ror	r24
    229a:	80 5d       	subi	r24, 0xD0	; 208
    229c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	96 95       	lsr	r25
    22a6:	87 95       	ror	r24
    22a8:	96 95       	lsr	r25
    22aa:	87 95       	ror	r24
    22ac:	96 95       	lsr	r25
    22ae:	87 95       	ror	r24
    22b0:	9c 01       	movw	r18, r24
    22b2:	a5 ec       	ldi	r26, 0xC5	; 197
    22b4:	b0 e2       	ldi	r27, 0x20	; 32
    22b6:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__umulhisi3>
    22ba:	ac 01       	movw	r20, r24
    22bc:	52 95       	swap	r21
    22be:	42 95       	swap	r20
    22c0:	4f 70       	andi	r20, 0x0F	; 15
    22c2:	45 27       	eor	r20, r21
    22c4:	5f 70       	andi	r21, 0x0F	; 15
    22c6:	45 27       	eor	r20, r21
    22c8:	9a 01       	movw	r18, r20
    22ca:	ad ec       	ldi	r26, 0xCD	; 205
    22cc:	bc ec       	ldi	r27, 0xCC	; 204
    22ce:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__umulhisi3>
    22d2:	96 95       	lsr	r25
    22d4:	87 95       	ror	r24
    22d6:	96 95       	lsr	r25
    22d8:	87 95       	ror	r24
    22da:	96 95       	lsr	r25
    22dc:	87 95       	ror	r24
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	9c 01       	movw	r18, r24
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	22 0f       	add	r18, r18
    22ea:	33 1f       	adc	r19, r19
    22ec:	82 0f       	add	r24, r18
    22ee:	93 1f       	adc	r25, r19
    22f0:	9a 01       	movw	r18, r20
    22f2:	28 1b       	sub	r18, r24
    22f4:	39 0b       	sbc	r19, r25
    22f6:	c9 01       	movw	r24, r18
    22f8:	80 5d       	subi	r24, 0xD0	; 208
    22fa:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	96 95       	lsr	r25
    2304:	87 95       	ror	r24
    2306:	96 95       	lsr	r25
    2308:	87 95       	ror	r24
    230a:	9c 01       	movw	r18, r24
    230c:	ab e7       	ldi	r26, 0x7B	; 123
    230e:	b4 e1       	ldi	r27, 0x14	; 20
    2310:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__umulhisi3>
    2314:	ac 01       	movw	r20, r24
    2316:	56 95       	lsr	r21
    2318:	47 95       	ror	r20
    231a:	9a 01       	movw	r18, r20
    231c:	ad ec       	ldi	r26, 0xCD	; 205
    231e:	bc ec       	ldi	r27, 0xCC	; 204
    2320:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__umulhisi3>
    2324:	96 95       	lsr	r25
    2326:	87 95       	ror	r24
    2328:	96 95       	lsr	r25
    232a:	87 95       	ror	r24
    232c:	96 95       	lsr	r25
    232e:	87 95       	ror	r24
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	9c 01       	movw	r18, r24
    2336:	22 0f       	add	r18, r18
    2338:	33 1f       	adc	r19, r19
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	82 0f       	add	r24, r18
    2340:	93 1f       	adc	r25, r19
    2342:	9a 01       	movw	r18, r20
    2344:	28 1b       	sub	r18, r24
    2346:	39 0b       	sbc	r19, r25
    2348:	c9 01       	movw	r24, r18
    234a:	80 5d       	subi	r24, 0xD0	; 208
    234c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	9c 01       	movw	r18, r24
    2356:	ad ec       	ldi	r26, 0xCD	; 205
    2358:	bc ec       	ldi	r27, 0xCC	; 204
    235a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__umulhisi3>
    235e:	ac 01       	movw	r20, r24
    2360:	56 95       	lsr	r21
    2362:	47 95       	ror	r20
    2364:	56 95       	lsr	r21
    2366:	47 95       	ror	r20
    2368:	56 95       	lsr	r21
    236a:	47 95       	ror	r20
    236c:	9a 01       	movw	r18, r20
    236e:	ad ec       	ldi	r26, 0xCD	; 205
    2370:	bc ec       	ldi	r27, 0xCC	; 204
    2372:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__umulhisi3>
    2376:	96 95       	lsr	r25
    2378:	87 95       	ror	r24
    237a:	96 95       	lsr	r25
    237c:	87 95       	ror	r24
    237e:	96 95       	lsr	r25
    2380:	87 95       	ror	r24
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	9c 01       	movw	r18, r24
    2388:	22 0f       	add	r18, r18
    238a:	33 1f       	adc	r19, r19
    238c:	22 0f       	add	r18, r18
    238e:	33 1f       	adc	r19, r19
    2390:	82 0f       	add	r24, r18
    2392:	93 1f       	adc	r25, r19
    2394:	9a 01       	movw	r18, r20
    2396:	28 1b       	sub	r18, r24
    2398:	39 0b       	sbc	r19, r25
    239a:	c9 01       	movw	r24, r18
    239c:	80 5d       	subi	r24, 0xD0	; 208
    239e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
    23a2:	49 81       	ldd	r20, Y+1	; 0x01
    23a4:	5a 81       	ldd	r21, Y+2	; 0x02
    23a6:	9a 01       	movw	r18, r20
    23a8:	ad ec       	ldi	r26, 0xCD	; 205
    23aa:	bc ec       	ldi	r27, 0xCC	; 204
    23ac:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__umulhisi3>
    23b0:	96 95       	lsr	r25
    23b2:	87 95       	ror	r24
    23b4:	96 95       	lsr	r25
    23b6:	87 95       	ror	r24
    23b8:	96 95       	lsr	r25
    23ba:	87 95       	ror	r24
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	9c 01       	movw	r18, r24
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	22 0f       	add	r18, r18
    23c8:	33 1f       	adc	r19, r19
    23ca:	82 0f       	add	r24, r18
    23cc:	93 1f       	adc	r25, r19
    23ce:	9a 01       	movw	r18, r20
    23d0:	28 1b       	sub	r18, r24
    23d2:	39 0b       	sbc	r19, r25
    23d4:	c9 01       	movw	r24, r18
    23d6:	80 5d       	subi	r24, 0xD0	; 208
    23d8:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
}
    23dc:	00 00       	nop
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	08 95       	ret

000023e8 <printBinaryByte>:

void printBinaryByte(uint8_t byte) {
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	1f 92       	push	r1
    23ee:	1f 92       	push	r1
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	8a 83       	std	Y+2, r24	; 0x02
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
    23f6:	87 e0       	ldi	r24, 0x07	; 7
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	1c c0       	rjmp	.+56     	; 0x2434 <printBinaryByte+0x4c>
    if (bit_is_set(byte, bit))
    23fc:	ce 01       	movw	r24, r28
    23fe:	02 96       	adiw	r24, 0x02	; 2
    2400:	fc 01       	movw	r30, r24
    2402:	80 81       	ld	r24, Z
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	29 81       	ldd	r18, Y+1	; 0x01
    240a:	22 2f       	mov	r18, r18
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <printBinaryByte+0x2c>
    2410:	95 95       	asr	r25
    2412:	87 95       	ror	r24
    2414:	2a 95       	dec	r18
    2416:	e2 f7       	brpl	.-8      	; 0x2410 <printBinaryByte+0x28>
    2418:	81 70       	andi	r24, 0x01	; 1
    241a:	99 27       	eor	r25, r25
    241c:	89 2b       	or	r24, r25
    241e:	21 f0       	breq	.+8      	; 0x2428 <printBinaryByte+0x40>
      transmitByte('1');
    2420:	81 e3       	ldi	r24, 0x31	; 49
    2422:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
    2426:	03 c0       	rjmp	.+6      	; 0x242e <printBinaryByte+0x46>
    else
      transmitByte('0');
    2428:	80 e3       	ldi	r24, 0x30	; 48
    242a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	81 50       	subi	r24, 0x01	; 1
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	8f 3f       	cpi	r24, 0xFF	; 255
    2438:	09 f7       	brne	.-62     	; 0x23fc <printBinaryByte+0x14>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
    243a:	00 00       	nop
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	1f 92       	push	r1
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	89 83       	std	Y+1, r24	; 0x01
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	8a 30       	cpi	r24, 0x0A	; 10
    2456:	18 f4       	brcc	.+6      	; 0x245e <nibbleToHexCharacter+0x18>
    return ('0' + nibble);
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	80 5d       	subi	r24, 0xD0	; 208
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <nibbleToHexCharacter+0x1c>
  }
  else {
    return ('A' + nibble - 10);
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	89 5c       	subi	r24, 0xC9	; 201
  }
}
    2462:	0f 90       	pop	r0
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	08 95       	ret

0000246a <printHexByte>:

void printHexByte(uint8_t byte) {
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	1f 92       	push	r1
    2470:	1f 92       	push	r1
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	8a 83       	std	Y+2, r24	; 0x02
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	82 95       	swap	r24
    247c:	8f 70       	andi	r24, 0x0F	; 15
    247e:	89 83       	std	Y+1, r24	; 0x01
  transmitByte(nibbleToHexCharacter(nibble));
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	0e 94 23 12 	call	0x2446	; 0x2446 <nibbleToHexCharacter>
    2486:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
  nibble = byte & 0b00001111;
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	8f 70       	andi	r24, 0x0F	; 15
    248e:	89 83       	std	Y+1, r24	; 0x01
  transmitByte(nibbleToHexCharacter(nibble));
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	0e 94 23 12 	call	0x2446	; 0x2446 <nibbleToHexCharacter>
    2496:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
}
    249a:	00 00       	nop
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	08 95       	ret

000024a6 <getNumber>:

uint8_t getNumber(void) {
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <getNumber+0x6>
    24ac:	1f 92       	push	r1
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
  // Gets a numerical 0-255 from the serial port.
  // Converts from string to number.
  char hundreds = '0';
    24b2:	80 e3       	ldi	r24, 0x30	; 48
    24b4:	8c 83       	std	Y+4, r24	; 0x04
  char tens = '0';
    24b6:	80 e3       	ldi	r24, 0x30	; 48
    24b8:	89 83       	std	Y+1, r24	; 0x01
  char ones = '0';
    24ba:	80 e3       	ldi	r24, 0x30	; 48
    24bc:	8a 83       	std	Y+2, r24	; 0x02
  char thisChar = '0';
    24be:	80 e3       	ldi	r24, 0x30	; 48
    24c0:	8b 83       	std	Y+3, r24	; 0x03
  do {                                                   /* shift over */
    hundreds = tens;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	8c 83       	std	Y+4, r24	; 0x04
    tens = ones;
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
    ones = thisChar;
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	8a 83       	std	Y+2, r24	; 0x02
    thisChar = receiveByte();                   /* get a new character */
    24ce:	0e 94 75 10 	call	0x20ea	; 0x20ea <receiveByte>
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    transmitByte(thisChar);                                    /* echo */
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <transmitByte>
  } while (thisChar != '\r');                     /* until type return */
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	8d 30       	cpi	r24, 0x0D	; 13
    24de:	89 f7       	brne	.-30     	; 0x24c2 <getNumber+0x1c>
  return (100 * (hundreds - '0') + 10 * (tens - '0') + ones - '0');
    24e0:	8c 81       	ldd	r24, Y+4	; 0x04
    24e2:	88 2f       	mov	r24, r24
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	c0 97       	sbiw	r24, 0x30	; 48
    24e8:	98 2f       	mov	r25, r24
    24ea:	84 e6       	ldi	r24, 0x64	; 100
    24ec:	98 9f       	mul	r25, r24
    24ee:	20 2d       	mov	r18, r0
    24f0:	11 24       	eor	r1, r1
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	c0 97       	sbiw	r24, 0x30	; 48
    24fa:	88 0f       	add	r24, r24
    24fc:	98 2f       	mov	r25, r24
    24fe:	99 0f       	add	r25, r25
    2500:	99 0f       	add	r25, r25
    2502:	89 0f       	add	r24, r25
    2504:	92 2f       	mov	r25, r18
    2506:	98 0f       	add	r25, r24
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	89 0f       	add	r24, r25
    250c:	80 53       	subi	r24, 0x30	; 48
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	08 95       	ret

0000251c <initRobot>:
#include "USART.h"
#include "Obs.h"
#include <util/delay.h>


void initRobot(){
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
	StateRobo.stateRobo = init;
    2524:	10 92 74 1f 	sts	0x1F74, r1	; 0x801f74 <StateRobo>
	CurStateRobo.stateRobo = init;
    2528:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <CurStateRobo>
	CurrentPos.CurX = SquareMaze / 2;
    252c:	8e e1       	ldi	r24, 0x1E	; 30
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <CurrentPos+0x1>
    2534:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <CurrentPos>
	CurrentPos.CurY = SquareMaze / 2;
    2538:	8e e1       	ldi	r24, 0x1E	; 30
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <CurrentPos+0x3>
    2540:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <CurrentPos+0x2>
	DirToGo.goesto = positifX;
    2544:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <DirToGo>
	DirToGo.gomotor = goForward;
    2548:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <DirToGo+0x1>
	headdirect.px = head;
    254c:	10 92 76 1f 	sts	0x1F76, r1	; 0x801f76 <headdirect>
	headdirect.py = tail;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	80 93 77 1f 	sts	0x1F77, r24	; 0x801f77 <headdirect+0x1>
	headdirect.mx = tail;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	80 93 78 1f 	sts	0x1F78, r24	; 0x801f78 <headdirect+0x2>
	headdirect.my = tail;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	80 93 79 1f 	sts	0x1F79, r24	; 0x801f79 <headdirect+0x3>
	isExecute = true;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	80 93 73 1f 	sts	0x1F73, r24	; 0x801f73 <isExecute>
}
    2568:	00 00       	nop
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	08 95       	ret

00002570 <main>:

int main(){
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	initRobot();
    2578:	0e 94 8e 12 	call	0x251c	; 0x251c <initRobot>
	initMaze();
    257c:	0e 94 93 07 	call	0xf26	; 0xf26 <initMaze>
	MotorPinInit();
    2580:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <MotorPinInit>
	ObstacleInit();
    2584:	0e 94 04 10 	call	0x2008	; 0x2008 <ObstacleInit>
	pwm_init();
    2588:	0e 94 f7 01 	call	0x3ee	; 0x3ee <pwm_init>
	adc_init();
    258c:	0e 94 41 02 	call	0x482	; 0x482 <adc_init>
	initUSART();
    2590:	0e 94 37 10 	call	0x206e	; 0x206e <initUSART>
	printString("I'am The Brave Adventure V.01.00 \r \n");
    2594:	8d e1       	ldi	r24, 0x1D	; 29
    2596:	93 e0       	ldi	r25, 0x03	; 3
    2598:	0e 94 86 10 	call	0x210c	; 0x210c <printString>

	while(1){
		FiniteState(StateRobo.stateRobo);
    259c:	80 91 74 1f 	lds	r24, 0x1F74	; 0x801f74 <StateRobo>
    25a0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <FiniteState>
	}
    25a4:	fb cf       	rjmp	.-10     	; 0x259c <main+0x2c>

000025a6 <__umulhisi3>:
    25a6:	a2 9f       	mul	r26, r18
    25a8:	b0 01       	movw	r22, r0
    25aa:	b3 9f       	mul	r27, r19
    25ac:	c0 01       	movw	r24, r0
    25ae:	a3 9f       	mul	r26, r19
    25b0:	70 0d       	add	r23, r0
    25b2:	81 1d       	adc	r24, r1
    25b4:	11 24       	eor	r1, r1
    25b6:	91 1d       	adc	r25, r1
    25b8:	b2 9f       	mul	r27, r18
    25ba:	70 0d       	add	r23, r0
    25bc:	81 1d       	adc	r24, r1
    25be:	11 24       	eor	r1, r1
    25c0:	91 1d       	adc	r25, r1
    25c2:	08 95       	ret

000025c4 <__subsf3>:
    25c4:	50 58       	subi	r21, 0x80	; 128

000025c6 <__addsf3>:
    25c6:	bb 27       	eor	r27, r27
    25c8:	aa 27       	eor	r26, r26
    25ca:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__addsf3x>
    25ce:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_round>
    25d2:	0e 94 ed 13 	call	0x27da	; 0x27da <__fp_pscA>
    25d6:	38 f0       	brcs	.+14     	; 0x25e6 <__addsf3+0x20>
    25d8:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__fp_pscB>
    25dc:	20 f0       	brcs	.+8      	; 0x25e6 <__addsf3+0x20>
    25de:	39 f4       	brne	.+14     	; 0x25ee <__addsf3+0x28>
    25e0:	9f 3f       	cpi	r25, 0xFF	; 255
    25e2:	19 f4       	brne	.+6      	; 0x25ea <__addsf3+0x24>
    25e4:	26 f4       	brtc	.+8      	; 0x25ee <__addsf3+0x28>
    25e6:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_nan>
    25ea:	0e f4       	brtc	.+2      	; 0x25ee <__addsf3+0x28>
    25ec:	e0 95       	com	r30
    25ee:	e7 fb       	bst	r30, 7
    25f0:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_inf>

000025f4 <__addsf3x>:
    25f4:	e9 2f       	mov	r30, r25
    25f6:	0e 94 0c 14 	call	0x2818	; 0x2818 <__fp_split3>
    25fa:	58 f3       	brcs	.-42     	; 0x25d2 <__addsf3+0xc>
    25fc:	ba 17       	cp	r27, r26
    25fe:	62 07       	cpc	r22, r18
    2600:	73 07       	cpc	r23, r19
    2602:	84 07       	cpc	r24, r20
    2604:	95 07       	cpc	r25, r21
    2606:	20 f0       	brcs	.+8      	; 0x2610 <__addsf3x+0x1c>
    2608:	79 f4       	brne	.+30     	; 0x2628 <__addsf3x+0x34>
    260a:	a6 f5       	brtc	.+104    	; 0x2674 <__addsf3x+0x80>
    260c:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_zero>
    2610:	0e f4       	brtc	.+2      	; 0x2614 <__addsf3x+0x20>
    2612:	e0 95       	com	r30
    2614:	0b 2e       	mov	r0, r27
    2616:	ba 2f       	mov	r27, r26
    2618:	a0 2d       	mov	r26, r0
    261a:	0b 01       	movw	r0, r22
    261c:	b9 01       	movw	r22, r18
    261e:	90 01       	movw	r18, r0
    2620:	0c 01       	movw	r0, r24
    2622:	ca 01       	movw	r24, r20
    2624:	a0 01       	movw	r20, r0
    2626:	11 24       	eor	r1, r1
    2628:	ff 27       	eor	r31, r31
    262a:	59 1b       	sub	r21, r25
    262c:	99 f0       	breq	.+38     	; 0x2654 <__addsf3x+0x60>
    262e:	59 3f       	cpi	r21, 0xF9	; 249
    2630:	50 f4       	brcc	.+20     	; 0x2646 <__addsf3x+0x52>
    2632:	50 3e       	cpi	r21, 0xE0	; 224
    2634:	68 f1       	brcs	.+90     	; 0x2690 <__addsf3x+0x9c>
    2636:	1a 16       	cp	r1, r26
    2638:	f0 40       	sbci	r31, 0x00	; 0
    263a:	a2 2f       	mov	r26, r18
    263c:	23 2f       	mov	r18, r19
    263e:	34 2f       	mov	r19, r20
    2640:	44 27       	eor	r20, r20
    2642:	58 5f       	subi	r21, 0xF8	; 248
    2644:	f3 cf       	rjmp	.-26     	; 0x262c <__addsf3x+0x38>
    2646:	46 95       	lsr	r20
    2648:	37 95       	ror	r19
    264a:	27 95       	ror	r18
    264c:	a7 95       	ror	r26
    264e:	f0 40       	sbci	r31, 0x00	; 0
    2650:	53 95       	inc	r21
    2652:	c9 f7       	brne	.-14     	; 0x2646 <__addsf3x+0x52>
    2654:	7e f4       	brtc	.+30     	; 0x2674 <__addsf3x+0x80>
    2656:	1f 16       	cp	r1, r31
    2658:	ba 0b       	sbc	r27, r26
    265a:	62 0b       	sbc	r22, r18
    265c:	73 0b       	sbc	r23, r19
    265e:	84 0b       	sbc	r24, r20
    2660:	ba f0       	brmi	.+46     	; 0x2690 <__addsf3x+0x9c>
    2662:	91 50       	subi	r25, 0x01	; 1
    2664:	a1 f0       	breq	.+40     	; 0x268e <__addsf3x+0x9a>
    2666:	ff 0f       	add	r31, r31
    2668:	bb 1f       	adc	r27, r27
    266a:	66 1f       	adc	r22, r22
    266c:	77 1f       	adc	r23, r23
    266e:	88 1f       	adc	r24, r24
    2670:	c2 f7       	brpl	.-16     	; 0x2662 <__addsf3x+0x6e>
    2672:	0e c0       	rjmp	.+28     	; 0x2690 <__addsf3x+0x9c>
    2674:	ba 0f       	add	r27, r26
    2676:	62 1f       	adc	r22, r18
    2678:	73 1f       	adc	r23, r19
    267a:	84 1f       	adc	r24, r20
    267c:	48 f4       	brcc	.+18     	; 0x2690 <__addsf3x+0x9c>
    267e:	87 95       	ror	r24
    2680:	77 95       	ror	r23
    2682:	67 95       	ror	r22
    2684:	b7 95       	ror	r27
    2686:	f7 95       	ror	r31
    2688:	9e 3f       	cpi	r25, 0xFE	; 254
    268a:	08 f0       	brcs	.+2      	; 0x268e <__addsf3x+0x9a>
    268c:	b0 cf       	rjmp	.-160    	; 0x25ee <__addsf3+0x28>
    268e:	93 95       	inc	r25
    2690:	88 0f       	add	r24, r24
    2692:	08 f0       	brcs	.+2      	; 0x2696 <__addsf3x+0xa2>
    2694:	99 27       	eor	r25, r25
    2696:	ee 0f       	add	r30, r30
    2698:	97 95       	ror	r25
    269a:	87 95       	ror	r24
    269c:	08 95       	ret

0000269e <__cmpsf2>:
    269e:	0e 94 c0 13 	call	0x2780	; 0x2780 <__fp_cmp>
    26a2:	08 f4       	brcc	.+2      	; 0x26a6 <__cmpsf2+0x8>
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	08 95       	ret

000026a8 <__fixunssfsi>:
    26a8:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_splitA>
    26ac:	88 f0       	brcs	.+34     	; 0x26d0 <__fixunssfsi+0x28>
    26ae:	9f 57       	subi	r25, 0x7F	; 127
    26b0:	98 f0       	brcs	.+38     	; 0x26d8 <__fixunssfsi+0x30>
    26b2:	b9 2f       	mov	r27, r25
    26b4:	99 27       	eor	r25, r25
    26b6:	b7 51       	subi	r27, 0x17	; 23
    26b8:	b0 f0       	brcs	.+44     	; 0x26e6 <__fixunssfsi+0x3e>
    26ba:	e1 f0       	breq	.+56     	; 0x26f4 <__fixunssfsi+0x4c>
    26bc:	66 0f       	add	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	1a f0       	brmi	.+6      	; 0x26cc <__fixunssfsi+0x24>
    26c6:	ba 95       	dec	r27
    26c8:	c9 f7       	brne	.-14     	; 0x26bc <__fixunssfsi+0x14>
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <__fixunssfsi+0x4c>
    26cc:	b1 30       	cpi	r27, 0x01	; 1
    26ce:	91 f0       	breq	.+36     	; 0x26f4 <__fixunssfsi+0x4c>
    26d0:	0e 94 2e 14 	call	0x285c	; 0x285c <__fp_zero>
    26d4:	b1 e0       	ldi	r27, 0x01	; 1
    26d6:	08 95       	ret
    26d8:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_zero>
    26dc:	67 2f       	mov	r22, r23
    26de:	78 2f       	mov	r23, r24
    26e0:	88 27       	eor	r24, r24
    26e2:	b8 5f       	subi	r27, 0xF8	; 248
    26e4:	39 f0       	breq	.+14     	; 0x26f4 <__fixunssfsi+0x4c>
    26e6:	b9 3f       	cpi	r27, 0xF9	; 249
    26e8:	cc f3       	brlt	.-14     	; 0x26dc <__fixunssfsi+0x34>
    26ea:	86 95       	lsr	r24
    26ec:	77 95       	ror	r23
    26ee:	67 95       	ror	r22
    26f0:	b3 95       	inc	r27
    26f2:	d9 f7       	brne	.-10     	; 0x26ea <__fixunssfsi+0x42>
    26f4:	3e f4       	brtc	.+14     	; 0x2704 <__fixunssfsi+0x5c>
    26f6:	90 95       	com	r25
    26f8:	80 95       	com	r24
    26fa:	70 95       	com	r23
    26fc:	61 95       	neg	r22
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	8f 4f       	sbci	r24, 0xFF	; 255
    2702:	9f 4f       	sbci	r25, 0xFF	; 255
    2704:	08 95       	ret

00002706 <__floatunsisf>:
    2706:	e8 94       	clt
    2708:	09 c0       	rjmp	.+18     	; 0x271c <__floatsisf+0x12>

0000270a <__floatsisf>:
    270a:	97 fb       	bst	r25, 7
    270c:	3e f4       	brtc	.+14     	; 0x271c <__floatsisf+0x12>
    270e:	90 95       	com	r25
    2710:	80 95       	com	r24
    2712:	70 95       	com	r23
    2714:	61 95       	neg	r22
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	8f 4f       	sbci	r24, 0xFF	; 255
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	99 23       	and	r25, r25
    271e:	a9 f0       	breq	.+42     	; 0x274a <__floatsisf+0x40>
    2720:	f9 2f       	mov	r31, r25
    2722:	96 e9       	ldi	r25, 0x96	; 150
    2724:	bb 27       	eor	r27, r27
    2726:	93 95       	inc	r25
    2728:	f6 95       	lsr	r31
    272a:	87 95       	ror	r24
    272c:	77 95       	ror	r23
    272e:	67 95       	ror	r22
    2730:	b7 95       	ror	r27
    2732:	f1 11       	cpse	r31, r1
    2734:	f8 cf       	rjmp	.-16     	; 0x2726 <__floatsisf+0x1c>
    2736:	fa f4       	brpl	.+62     	; 0x2776 <__floatsisf+0x6c>
    2738:	bb 0f       	add	r27, r27
    273a:	11 f4       	brne	.+4      	; 0x2740 <__floatsisf+0x36>
    273c:	60 ff       	sbrs	r22, 0
    273e:	1b c0       	rjmp	.+54     	; 0x2776 <__floatsisf+0x6c>
    2740:	6f 5f       	subi	r22, 0xFF	; 255
    2742:	7f 4f       	sbci	r23, 0xFF	; 255
    2744:	8f 4f       	sbci	r24, 0xFF	; 255
    2746:	9f 4f       	sbci	r25, 0xFF	; 255
    2748:	16 c0       	rjmp	.+44     	; 0x2776 <__floatsisf+0x6c>
    274a:	88 23       	and	r24, r24
    274c:	11 f0       	breq	.+4      	; 0x2752 <__floatsisf+0x48>
    274e:	96 e9       	ldi	r25, 0x96	; 150
    2750:	11 c0       	rjmp	.+34     	; 0x2774 <__floatsisf+0x6a>
    2752:	77 23       	and	r23, r23
    2754:	21 f0       	breq	.+8      	; 0x275e <__floatsisf+0x54>
    2756:	9e e8       	ldi	r25, 0x8E	; 142
    2758:	87 2f       	mov	r24, r23
    275a:	76 2f       	mov	r23, r22
    275c:	05 c0       	rjmp	.+10     	; 0x2768 <__floatsisf+0x5e>
    275e:	66 23       	and	r22, r22
    2760:	71 f0       	breq	.+28     	; 0x277e <__floatsisf+0x74>
    2762:	96 e8       	ldi	r25, 0x86	; 134
    2764:	86 2f       	mov	r24, r22
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	2a f0       	brmi	.+10     	; 0x2776 <__floatsisf+0x6c>
    276c:	9a 95       	dec	r25
    276e:	66 0f       	add	r22, r22
    2770:	77 1f       	adc	r23, r23
    2772:	88 1f       	adc	r24, r24
    2774:	da f7       	brpl	.-10     	; 0x276c <__floatsisf+0x62>
    2776:	88 0f       	add	r24, r24
    2778:	96 95       	lsr	r25
    277a:	87 95       	ror	r24
    277c:	97 f9       	bld	r25, 7
    277e:	08 95       	ret

00002780 <__fp_cmp>:
    2780:	99 0f       	add	r25, r25
    2782:	00 08       	sbc	r0, r0
    2784:	55 0f       	add	r21, r21
    2786:	aa 0b       	sbc	r26, r26
    2788:	e0 e8       	ldi	r30, 0x80	; 128
    278a:	fe ef       	ldi	r31, 0xFE	; 254
    278c:	16 16       	cp	r1, r22
    278e:	17 06       	cpc	r1, r23
    2790:	e8 07       	cpc	r30, r24
    2792:	f9 07       	cpc	r31, r25
    2794:	c0 f0       	brcs	.+48     	; 0x27c6 <__fp_cmp+0x46>
    2796:	12 16       	cp	r1, r18
    2798:	13 06       	cpc	r1, r19
    279a:	e4 07       	cpc	r30, r20
    279c:	f5 07       	cpc	r31, r21
    279e:	98 f0       	brcs	.+38     	; 0x27c6 <__fp_cmp+0x46>
    27a0:	62 1b       	sub	r22, r18
    27a2:	73 0b       	sbc	r23, r19
    27a4:	84 0b       	sbc	r24, r20
    27a6:	95 0b       	sbc	r25, r21
    27a8:	39 f4       	brne	.+14     	; 0x27b8 <__fp_cmp+0x38>
    27aa:	0a 26       	eor	r0, r26
    27ac:	61 f0       	breq	.+24     	; 0x27c6 <__fp_cmp+0x46>
    27ae:	23 2b       	or	r18, r19
    27b0:	24 2b       	or	r18, r20
    27b2:	25 2b       	or	r18, r21
    27b4:	21 f4       	brne	.+8      	; 0x27be <__fp_cmp+0x3e>
    27b6:	08 95       	ret
    27b8:	0a 26       	eor	r0, r26
    27ba:	09 f4       	brne	.+2      	; 0x27be <__fp_cmp+0x3e>
    27bc:	a1 40       	sbci	r26, 0x01	; 1
    27be:	a6 95       	lsr	r26
    27c0:	8f ef       	ldi	r24, 0xFF	; 255
    27c2:	81 1d       	adc	r24, r1
    27c4:	81 1d       	adc	r24, r1
    27c6:	08 95       	ret

000027c8 <__fp_inf>:
    27c8:	97 f9       	bld	r25, 7
    27ca:	9f 67       	ori	r25, 0x7F	; 127
    27cc:	80 e8       	ldi	r24, 0x80	; 128
    27ce:	70 e0       	ldi	r23, 0x00	; 0
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	08 95       	ret

000027d4 <__fp_nan>:
    27d4:	9f ef       	ldi	r25, 0xFF	; 255
    27d6:	80 ec       	ldi	r24, 0xC0	; 192
    27d8:	08 95       	ret

000027da <__fp_pscA>:
    27da:	00 24       	eor	r0, r0
    27dc:	0a 94       	dec	r0
    27de:	16 16       	cp	r1, r22
    27e0:	17 06       	cpc	r1, r23
    27e2:	18 06       	cpc	r1, r24
    27e4:	09 06       	cpc	r0, r25
    27e6:	08 95       	ret

000027e8 <__fp_pscB>:
    27e8:	00 24       	eor	r0, r0
    27ea:	0a 94       	dec	r0
    27ec:	12 16       	cp	r1, r18
    27ee:	13 06       	cpc	r1, r19
    27f0:	14 06       	cpc	r1, r20
    27f2:	05 06       	cpc	r0, r21
    27f4:	08 95       	ret

000027f6 <__fp_round>:
    27f6:	09 2e       	mov	r0, r25
    27f8:	03 94       	inc	r0
    27fa:	00 0c       	add	r0, r0
    27fc:	11 f4       	brne	.+4      	; 0x2802 <__fp_round+0xc>
    27fe:	88 23       	and	r24, r24
    2800:	52 f0       	brmi	.+20     	; 0x2816 <__fp_round+0x20>
    2802:	bb 0f       	add	r27, r27
    2804:	40 f4       	brcc	.+16     	; 0x2816 <__fp_round+0x20>
    2806:	bf 2b       	or	r27, r31
    2808:	11 f4       	brne	.+4      	; 0x280e <__fp_round+0x18>
    280a:	60 ff       	sbrs	r22, 0
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <__fp_round+0x20>
    280e:	6f 5f       	subi	r22, 0xFF	; 255
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	8f 4f       	sbci	r24, 0xFF	; 255
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	08 95       	ret

00002818 <__fp_split3>:
    2818:	57 fd       	sbrc	r21, 7
    281a:	90 58       	subi	r25, 0x80	; 128
    281c:	44 0f       	add	r20, r20
    281e:	55 1f       	adc	r21, r21
    2820:	59 f0       	breq	.+22     	; 0x2838 <__fp_splitA+0x10>
    2822:	5f 3f       	cpi	r21, 0xFF	; 255
    2824:	71 f0       	breq	.+28     	; 0x2842 <__fp_splitA+0x1a>
    2826:	47 95       	ror	r20

00002828 <__fp_splitA>:
    2828:	88 0f       	add	r24, r24
    282a:	97 fb       	bst	r25, 7
    282c:	99 1f       	adc	r25, r25
    282e:	61 f0       	breq	.+24     	; 0x2848 <__fp_splitA+0x20>
    2830:	9f 3f       	cpi	r25, 0xFF	; 255
    2832:	79 f0       	breq	.+30     	; 0x2852 <__fp_splitA+0x2a>
    2834:	87 95       	ror	r24
    2836:	08 95       	ret
    2838:	12 16       	cp	r1, r18
    283a:	13 06       	cpc	r1, r19
    283c:	14 06       	cpc	r1, r20
    283e:	55 1f       	adc	r21, r21
    2840:	f2 cf       	rjmp	.-28     	; 0x2826 <__fp_split3+0xe>
    2842:	46 95       	lsr	r20
    2844:	f1 df       	rcall	.-30     	; 0x2828 <__fp_splitA>
    2846:	08 c0       	rjmp	.+16     	; 0x2858 <__fp_splitA+0x30>
    2848:	16 16       	cp	r1, r22
    284a:	17 06       	cpc	r1, r23
    284c:	18 06       	cpc	r1, r24
    284e:	99 1f       	adc	r25, r25
    2850:	f1 cf       	rjmp	.-30     	; 0x2834 <__fp_splitA+0xc>
    2852:	86 95       	lsr	r24
    2854:	71 05       	cpc	r23, r1
    2856:	61 05       	cpc	r22, r1
    2858:	08 94       	sec
    285a:	08 95       	ret

0000285c <__fp_zero>:
    285c:	e8 94       	clt

0000285e <__fp_szero>:
    285e:	bb 27       	eor	r27, r27
    2860:	66 27       	eor	r22, r22
    2862:	77 27       	eor	r23, r23
    2864:	cb 01       	movw	r24, r22
    2866:	97 f9       	bld	r25, 7
    2868:	08 95       	ret

0000286a <__gesf2>:
    286a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__fp_cmp>
    286e:	08 f4       	brcc	.+2      	; 0x2872 <__gesf2+0x8>
    2870:	8f ef       	ldi	r24, 0xFF	; 255
    2872:	08 95       	ret

00002874 <__mulsf3>:
    2874:	0e 94 4d 14 	call	0x289a	; 0x289a <__mulsf3x>
    2878:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_round>
    287c:	0e 94 ed 13 	call	0x27da	; 0x27da <__fp_pscA>
    2880:	38 f0       	brcs	.+14     	; 0x2890 <__mulsf3+0x1c>
    2882:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__fp_pscB>
    2886:	20 f0       	brcs	.+8      	; 0x2890 <__mulsf3+0x1c>
    2888:	95 23       	and	r25, r21
    288a:	11 f0       	breq	.+4      	; 0x2890 <__mulsf3+0x1c>
    288c:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_inf>
    2890:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_nan>
    2894:	11 24       	eor	r1, r1
    2896:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__fp_szero>

0000289a <__mulsf3x>:
    289a:	0e 94 0c 14 	call	0x2818	; 0x2818 <__fp_split3>
    289e:	70 f3       	brcs	.-36     	; 0x287c <__mulsf3+0x8>

000028a0 <__mulsf3_pse>:
    28a0:	95 9f       	mul	r25, r21
    28a2:	c1 f3       	breq	.-16     	; 0x2894 <__mulsf3+0x20>
    28a4:	95 0f       	add	r25, r21
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	55 1f       	adc	r21, r21
    28aa:	62 9f       	mul	r22, r18
    28ac:	f0 01       	movw	r30, r0
    28ae:	72 9f       	mul	r23, r18
    28b0:	bb 27       	eor	r27, r27
    28b2:	f0 0d       	add	r31, r0
    28b4:	b1 1d       	adc	r27, r1
    28b6:	63 9f       	mul	r22, r19
    28b8:	aa 27       	eor	r26, r26
    28ba:	f0 0d       	add	r31, r0
    28bc:	b1 1d       	adc	r27, r1
    28be:	aa 1f       	adc	r26, r26
    28c0:	64 9f       	mul	r22, r20
    28c2:	66 27       	eor	r22, r22
    28c4:	b0 0d       	add	r27, r0
    28c6:	a1 1d       	adc	r26, r1
    28c8:	66 1f       	adc	r22, r22
    28ca:	82 9f       	mul	r24, r18
    28cc:	22 27       	eor	r18, r18
    28ce:	b0 0d       	add	r27, r0
    28d0:	a1 1d       	adc	r26, r1
    28d2:	62 1f       	adc	r22, r18
    28d4:	73 9f       	mul	r23, r19
    28d6:	b0 0d       	add	r27, r0
    28d8:	a1 1d       	adc	r26, r1
    28da:	62 1f       	adc	r22, r18
    28dc:	83 9f       	mul	r24, r19
    28de:	a0 0d       	add	r26, r0
    28e0:	61 1d       	adc	r22, r1
    28e2:	22 1f       	adc	r18, r18
    28e4:	74 9f       	mul	r23, r20
    28e6:	33 27       	eor	r19, r19
    28e8:	a0 0d       	add	r26, r0
    28ea:	61 1d       	adc	r22, r1
    28ec:	23 1f       	adc	r18, r19
    28ee:	84 9f       	mul	r24, r20
    28f0:	60 0d       	add	r22, r0
    28f2:	21 1d       	adc	r18, r1
    28f4:	82 2f       	mov	r24, r18
    28f6:	76 2f       	mov	r23, r22
    28f8:	6a 2f       	mov	r22, r26
    28fa:	11 24       	eor	r1, r1
    28fc:	9f 57       	subi	r25, 0x7F	; 127
    28fe:	50 40       	sbci	r21, 0x00	; 0
    2900:	9a f0       	brmi	.+38     	; 0x2928 <__mulsf3_pse+0x88>
    2902:	f1 f0       	breq	.+60     	; 0x2940 <__mulsf3_pse+0xa0>
    2904:	88 23       	and	r24, r24
    2906:	4a f0       	brmi	.+18     	; 0x291a <__mulsf3_pse+0x7a>
    2908:	ee 0f       	add	r30, r30
    290a:	ff 1f       	adc	r31, r31
    290c:	bb 1f       	adc	r27, r27
    290e:	66 1f       	adc	r22, r22
    2910:	77 1f       	adc	r23, r23
    2912:	88 1f       	adc	r24, r24
    2914:	91 50       	subi	r25, 0x01	; 1
    2916:	50 40       	sbci	r21, 0x00	; 0
    2918:	a9 f7       	brne	.-22     	; 0x2904 <__mulsf3_pse+0x64>
    291a:	9e 3f       	cpi	r25, 0xFE	; 254
    291c:	51 05       	cpc	r21, r1
    291e:	80 f0       	brcs	.+32     	; 0x2940 <__mulsf3_pse+0xa0>
    2920:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_inf>
    2924:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__fp_szero>
    2928:	5f 3f       	cpi	r21, 0xFF	; 255
    292a:	e4 f3       	brlt	.-8      	; 0x2924 <__mulsf3_pse+0x84>
    292c:	98 3e       	cpi	r25, 0xE8	; 232
    292e:	d4 f3       	brlt	.-12     	; 0x2924 <__mulsf3_pse+0x84>
    2930:	86 95       	lsr	r24
    2932:	77 95       	ror	r23
    2934:	67 95       	ror	r22
    2936:	b7 95       	ror	r27
    2938:	f7 95       	ror	r31
    293a:	e7 95       	ror	r30
    293c:	9f 5f       	subi	r25, 0xFF	; 255
    293e:	c1 f7       	brne	.-16     	; 0x2930 <__mulsf3_pse+0x90>
    2940:	fe 2b       	or	r31, r30
    2942:	88 0f       	add	r24, r24
    2944:	91 1d       	adc	r25, r1
    2946:	96 95       	lsr	r25
    2948:	87 95       	ror	r24
    294a:	97 f9       	bld	r25, 7
    294c:	08 95       	ret

0000294e <pow>:
    294e:	fa 01       	movw	r30, r20
    2950:	ee 0f       	add	r30, r30
    2952:	ff 1f       	adc	r31, r31
    2954:	30 96       	adiw	r30, 0x00	; 0
    2956:	21 05       	cpc	r18, r1
    2958:	31 05       	cpc	r19, r1
    295a:	a1 f1       	breq	.+104    	; 0x29c4 <pow+0x76>
    295c:	61 15       	cp	r22, r1
    295e:	71 05       	cpc	r23, r1
    2960:	61 f4       	brne	.+24     	; 0x297a <pow+0x2c>
    2962:	80 38       	cpi	r24, 0x80	; 128
    2964:	bf e3       	ldi	r27, 0x3F	; 63
    2966:	9b 07       	cpc	r25, r27
    2968:	49 f1       	breq	.+82     	; 0x29bc <pow+0x6e>
    296a:	68 94       	set
    296c:	90 38       	cpi	r25, 0x80	; 128
    296e:	81 05       	cpc	r24, r1
    2970:	61 f0       	breq	.+24     	; 0x298a <pow+0x3c>
    2972:	80 38       	cpi	r24, 0x80	; 128
    2974:	bf ef       	ldi	r27, 0xFF	; 255
    2976:	9b 07       	cpc	r25, r27
    2978:	41 f0       	breq	.+16     	; 0x298a <pow+0x3c>
    297a:	99 23       	and	r25, r25
    297c:	4a f5       	brpl	.+82     	; 0x29d0 <pow+0x82>
    297e:	ff 3f       	cpi	r31, 0xFF	; 255
    2980:	e1 05       	cpc	r30, r1
    2982:	31 05       	cpc	r19, r1
    2984:	21 05       	cpc	r18, r1
    2986:	19 f1       	breq	.+70     	; 0x29ce <pow+0x80>
    2988:	e8 94       	clt
    298a:	08 94       	sec
    298c:	e7 95       	ror	r30
    298e:	d9 01       	movw	r26, r18
    2990:	aa 23       	and	r26, r26
    2992:	29 f4       	brne	.+10     	; 0x299e <pow+0x50>
    2994:	ab 2f       	mov	r26, r27
    2996:	be 2f       	mov	r27, r30
    2998:	f8 5f       	subi	r31, 0xF8	; 248
    299a:	d0 f3       	brcs	.-12     	; 0x2990 <pow+0x42>
    299c:	10 c0       	rjmp	.+32     	; 0x29be <pow+0x70>
    299e:	ff 5f       	subi	r31, 0xFF	; 255
    29a0:	70 f4       	brcc	.+28     	; 0x29be <pow+0x70>
    29a2:	a6 95       	lsr	r26
    29a4:	e0 f7       	brcc	.-8      	; 0x299e <pow+0x50>
    29a6:	f7 39       	cpi	r31, 0x97	; 151
    29a8:	50 f0       	brcs	.+20     	; 0x29be <pow+0x70>
    29aa:	19 f0       	breq	.+6      	; 0x29b2 <pow+0x64>
    29ac:	ff 3a       	cpi	r31, 0xAF	; 175
    29ae:	38 f4       	brcc	.+14     	; 0x29be <pow+0x70>
    29b0:	9f 77       	andi	r25, 0x7F	; 127
    29b2:	9f 93       	push	r25
    29b4:	0d d0       	rcall	.+26     	; 0x29d0 <pow+0x82>
    29b6:	0f 90       	pop	r0
    29b8:	07 fc       	sbrc	r0, 7
    29ba:	90 58       	subi	r25, 0x80	; 128
    29bc:	08 95       	ret
    29be:	46 f0       	brts	.+16     	; 0x29d0 <pow+0x82>
    29c0:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_nan>
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	80 e8       	ldi	r24, 0x80	; 128
    29ca:	9f e3       	ldi	r25, 0x3F	; 63
    29cc:	08 95       	ret
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	9f 77       	andi	r25, 0x7F	; 127
    29d2:	5f 93       	push	r21
    29d4:	4f 93       	push	r20
    29d6:	3f 93       	push	r19
    29d8:	2f 93       	push	r18
    29da:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <log>
    29de:	2f 91       	pop	r18
    29e0:	3f 91       	pop	r19
    29e2:	4f 91       	pop	r20
    29e4:	5f 91       	pop	r21
    29e6:	0e 94 3a 14 	call	0x2874	; 0x2874 <__mulsf3>
    29ea:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <exp>
    29ee:	19 f4       	brne	.+6      	; 0x29f6 <pow+0xa8>
    29f0:	16 f4       	brtc	.+4      	; 0x29f6 <pow+0xa8>
    29f2:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_nan>
    29f6:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__fp_mpack>

000029fa <sqrt>:
    29fa:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_splitA>
    29fe:	b8 f3       	brcs	.-18     	; 0x29ee <pow+0xa0>
    2a00:	99 23       	and	r25, r25
    2a02:	c9 f3       	breq	.-14     	; 0x29f6 <pow+0xa8>
    2a04:	b6 f3       	brts	.-20     	; 0x29f2 <pow+0xa4>
    2a06:	9f 57       	subi	r25, 0x7F	; 127
    2a08:	55 0b       	sbc	r21, r21
    2a0a:	87 ff       	sbrs	r24, 7
    2a0c:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__fp_norm2>
    2a10:	00 24       	eor	r0, r0
    2a12:	a0 e6       	ldi	r26, 0x60	; 96
    2a14:	40 ea       	ldi	r20, 0xA0	; 160
    2a16:	90 01       	movw	r18, r0
    2a18:	80 58       	subi	r24, 0x80	; 128
    2a1a:	56 95       	lsr	r21
    2a1c:	97 95       	ror	r25
    2a1e:	28 f4       	brcc	.+10     	; 0x2a2a <sqrt+0x30>
    2a20:	80 5c       	subi	r24, 0xC0	; 192
    2a22:	66 0f       	add	r22, r22
    2a24:	77 1f       	adc	r23, r23
    2a26:	88 1f       	adc	r24, r24
    2a28:	20 f0       	brcs	.+8      	; 0x2a32 <sqrt+0x38>
    2a2a:	26 17       	cp	r18, r22
    2a2c:	37 07       	cpc	r19, r23
    2a2e:	48 07       	cpc	r20, r24
    2a30:	30 f4       	brcc	.+12     	; 0x2a3e <sqrt+0x44>
    2a32:	62 1b       	sub	r22, r18
    2a34:	73 0b       	sbc	r23, r19
    2a36:	84 0b       	sbc	r24, r20
    2a38:	20 29       	or	r18, r0
    2a3a:	31 29       	or	r19, r1
    2a3c:	4a 2b       	or	r20, r26
    2a3e:	a6 95       	lsr	r26
    2a40:	17 94       	ror	r1
    2a42:	07 94       	ror	r0
    2a44:	20 25       	eor	r18, r0
    2a46:	31 25       	eor	r19, r1
    2a48:	4a 27       	eor	r20, r26
    2a4a:	58 f7       	brcc	.-42     	; 0x2a22 <sqrt+0x28>
    2a4c:	66 0f       	add	r22, r22
    2a4e:	77 1f       	adc	r23, r23
    2a50:	88 1f       	adc	r24, r24
    2a52:	20 f0       	brcs	.+8      	; 0x2a5c <sqrt+0x62>
    2a54:	26 17       	cp	r18, r22
    2a56:	37 07       	cpc	r19, r23
    2a58:	48 07       	cpc	r20, r24
    2a5a:	30 f4       	brcc	.+12     	; 0x2a68 <sqrt+0x6e>
    2a5c:	62 0b       	sbc	r22, r18
    2a5e:	73 0b       	sbc	r23, r19
    2a60:	84 0b       	sbc	r24, r20
    2a62:	20 0d       	add	r18, r0
    2a64:	31 1d       	adc	r19, r1
    2a66:	41 1d       	adc	r20, r1
    2a68:	a0 95       	com	r26
    2a6a:	81 f7       	brne	.-32     	; 0x2a4c <sqrt+0x52>
    2a6c:	b9 01       	movw	r22, r18
    2a6e:	84 2f       	mov	r24, r20
    2a70:	91 58       	subi	r25, 0x81	; 129
    2a72:	88 0f       	add	r24, r24
    2a74:	96 95       	lsr	r25
    2a76:	87 95       	ror	r24
    2a78:	08 95       	ret
    2a7a:	29 f4       	brne	.+10     	; 0x2a86 <sqrt+0x8c>
    2a7c:	16 f0       	brts	.+4      	; 0x2a82 <sqrt+0x88>
    2a7e:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_inf>
    2a82:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_zero>
    2a86:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_nan>

00002a8a <exp>:
    2a8a:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_splitA>
    2a8e:	a8 f3       	brcs	.-22     	; 0x2a7a <sqrt+0x80>
    2a90:	96 38       	cpi	r25, 0x86	; 134
    2a92:	a0 f7       	brcc	.-24     	; 0x2a7c <sqrt+0x82>
    2a94:	07 f8       	bld	r0, 7
    2a96:	0f 92       	push	r0
    2a98:	e8 94       	clt
    2a9a:	2b e3       	ldi	r18, 0x3B	; 59
    2a9c:	3a ea       	ldi	r19, 0xAA	; 170
    2a9e:	48 eb       	ldi	r20, 0xB8	; 184
    2aa0:	5f e7       	ldi	r21, 0x7F	; 127
    2aa2:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__mulsf3_pse>
    2aa6:	0f 92       	push	r0
    2aa8:	0f 92       	push	r0
    2aaa:	0f 92       	push	r0
    2aac:	4d b7       	in	r20, 0x3d	; 61
    2aae:	5e b7       	in	r21, 0x3e	; 62
    2ab0:	0f 92       	push	r0
    2ab2:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <modf>
    2ab6:	e4 ee       	ldi	r30, 0xE4	; 228
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__fp_powser>
    2abe:	4f 91       	pop	r20
    2ac0:	5f 91       	pop	r21
    2ac2:	ef 91       	pop	r30
    2ac4:	ff 91       	pop	r31
    2ac6:	e5 95       	asr	r30
    2ac8:	ee 1f       	adc	r30, r30
    2aca:	ff 1f       	adc	r31, r31
    2acc:	49 f0       	breq	.+18     	; 0x2ae0 <exp+0x56>
    2ace:	fe 57       	subi	r31, 0x7E	; 126
    2ad0:	e0 68       	ori	r30, 0x80	; 128
    2ad2:	44 27       	eor	r20, r20
    2ad4:	ee 0f       	add	r30, r30
    2ad6:	44 1f       	adc	r20, r20
    2ad8:	fa 95       	dec	r31
    2ada:	e1 f7       	brne	.-8      	; 0x2ad4 <exp+0x4a>
    2adc:	41 95       	neg	r20
    2ade:	55 0b       	sbc	r21, r21
    2ae0:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <ldexp>
    2ae4:	0f 90       	pop	r0
    2ae6:	07 fe       	sbrs	r0, 7
    2ae8:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <inverse>
    2aec:	08 95       	ret

00002aee <__fp_mpack>:
    2aee:	9f 3f       	cpi	r25, 0xFF	; 255
    2af0:	31 f0       	breq	.+12     	; 0x2afe <__fp_mpack_finite+0xc>

00002af2 <__fp_mpack_finite>:
    2af2:	91 50       	subi	r25, 0x01	; 1
    2af4:	20 f4       	brcc	.+8      	; 0x2afe <__fp_mpack_finite+0xc>
    2af6:	87 95       	ror	r24
    2af8:	77 95       	ror	r23
    2afa:	67 95       	ror	r22
    2afc:	b7 95       	ror	r27
    2afe:	88 0f       	add	r24, r24
    2b00:	91 1d       	adc	r25, r1
    2b02:	96 95       	lsr	r25
    2b04:	87 95       	ror	r24
    2b06:	97 f9       	bld	r25, 7
    2b08:	08 95       	ret

00002b0a <__fp_norm2>:
    2b0a:	91 50       	subi	r25, 0x01	; 1
    2b0c:	50 40       	sbci	r21, 0x00	; 0
    2b0e:	66 0f       	add	r22, r22
    2b10:	77 1f       	adc	r23, r23
    2b12:	88 1f       	adc	r24, r24
    2b14:	d2 f7       	brpl	.-12     	; 0x2b0a <__fp_norm2>
    2b16:	08 95       	ret

00002b18 <__fp_powser>:
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	1f 93       	push	r17
    2b1e:	0f 93       	push	r16
    2b20:	ff 92       	push	r15
    2b22:	ef 92       	push	r14
    2b24:	df 92       	push	r13
    2b26:	7b 01       	movw	r14, r22
    2b28:	8c 01       	movw	r16, r24
    2b2a:	68 94       	set
    2b2c:	06 c0       	rjmp	.+12     	; 0x2b3a <__fp_powser+0x22>
    2b2e:	da 2e       	mov	r13, r26
    2b30:	ef 01       	movw	r28, r30
    2b32:	0e 94 4d 14 	call	0x289a	; 0x289a <__mulsf3x>
    2b36:	fe 01       	movw	r30, r28
    2b38:	e8 94       	clt
    2b3a:	a5 91       	lpm	r26, Z+
    2b3c:	25 91       	lpm	r18, Z+
    2b3e:	35 91       	lpm	r19, Z+
    2b40:	45 91       	lpm	r20, Z+
    2b42:	55 91       	lpm	r21, Z+
    2b44:	a6 f3       	brts	.-24     	; 0x2b2e <__fp_powser+0x16>
    2b46:	ef 01       	movw	r28, r30
    2b48:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__addsf3x>
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	97 01       	movw	r18, r14
    2b50:	a8 01       	movw	r20, r16
    2b52:	da 94       	dec	r13
    2b54:	69 f7       	brne	.-38     	; 0x2b30 <__fp_powser+0x18>
    2b56:	df 90       	pop	r13
    2b58:	ef 90       	pop	r14
    2b5a:	ff 90       	pop	r15
    2b5c:	0f 91       	pop	r16
    2b5e:	1f 91       	pop	r17
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <inverse>:
    2b66:	9b 01       	movw	r18, r22
    2b68:	ac 01       	movw	r20, r24
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	80 e8       	ldi	r24, 0x80	; 128
    2b70:	9f e3       	ldi	r25, 0x3F	; 63
    2b72:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__divsf3>
    2b76:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_inf>
    2b7a:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__fp_mpack>

00002b7e <ldexp>:
    2b7e:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_splitA>
    2b82:	d8 f3       	brcs	.-10     	; 0x2b7a <inverse+0x14>
    2b84:	99 23       	and	r25, r25
    2b86:	c9 f3       	breq	.-14     	; 0x2b7a <inverse+0x14>
    2b88:	94 0f       	add	r25, r20
    2b8a:	51 1d       	adc	r21, r1
    2b8c:	a3 f3       	brvs	.-24     	; 0x2b76 <inverse+0x10>
    2b8e:	91 50       	subi	r25, 0x01	; 1
    2b90:	50 40       	sbci	r21, 0x00	; 0
    2b92:	94 f0       	brlt	.+36     	; 0x2bb8 <ldexp+0x3a>
    2b94:	59 f0       	breq	.+22     	; 0x2bac <ldexp+0x2e>
    2b96:	88 23       	and	r24, r24
    2b98:	32 f0       	brmi	.+12     	; 0x2ba6 <ldexp+0x28>
    2b9a:	66 0f       	add	r22, r22
    2b9c:	77 1f       	adc	r23, r23
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	91 50       	subi	r25, 0x01	; 1
    2ba2:	50 40       	sbci	r21, 0x00	; 0
    2ba4:	c1 f7       	brne	.-16     	; 0x2b96 <ldexp+0x18>
    2ba6:	9e 3f       	cpi	r25, 0xFE	; 254
    2ba8:	51 05       	cpc	r21, r1
    2baa:	2c f7       	brge	.-54     	; 0x2b76 <inverse+0x10>
    2bac:	88 0f       	add	r24, r24
    2bae:	91 1d       	adc	r25, r1
    2bb0:	96 95       	lsr	r25
    2bb2:	87 95       	ror	r24
    2bb4:	97 f9       	bld	r25, 7
    2bb6:	08 95       	ret
    2bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bba:	ac f0       	brlt	.+42     	; 0x2be6 <ldexp+0x68>
    2bbc:	98 3e       	cpi	r25, 0xE8	; 232
    2bbe:	9c f0       	brlt	.+38     	; 0x2be6 <ldexp+0x68>
    2bc0:	bb 27       	eor	r27, r27
    2bc2:	86 95       	lsr	r24
    2bc4:	77 95       	ror	r23
    2bc6:	67 95       	ror	r22
    2bc8:	b7 95       	ror	r27
    2bca:	08 f4       	brcc	.+2      	; 0x2bce <ldexp+0x50>
    2bcc:	b1 60       	ori	r27, 0x01	; 1
    2bce:	93 95       	inc	r25
    2bd0:	c1 f7       	brne	.-16     	; 0x2bc2 <ldexp+0x44>
    2bd2:	bb 0f       	add	r27, r27
    2bd4:	58 f7       	brcc	.-42     	; 0x2bac <ldexp+0x2e>
    2bd6:	11 f4       	brne	.+4      	; 0x2bdc <ldexp+0x5e>
    2bd8:	60 ff       	sbrs	r22, 0
    2bda:	e8 cf       	rjmp	.-48     	; 0x2bac <ldexp+0x2e>
    2bdc:	6f 5f       	subi	r22, 0xFF	; 255
    2bde:	7f 4f       	sbci	r23, 0xFF	; 255
    2be0:	8f 4f       	sbci	r24, 0xFF	; 255
    2be2:	9f 4f       	sbci	r25, 0xFF	; 255
    2be4:	e3 cf       	rjmp	.-58     	; 0x2bac <ldexp+0x2e>
    2be6:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__fp_szero>
    2bea:	16 f0       	brts	.+4      	; 0x2bf0 <ldexp+0x72>
    2bec:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__fp_mpack>
    2bf0:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_nan>
    2bf4:	68 94       	set
    2bf6:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_inf>

00002bfa <log>:
    2bfa:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_splitA>
    2bfe:	a8 f3       	brcs	.-22     	; 0x2bea <ldexp+0x6c>
    2c00:	99 23       	and	r25, r25
    2c02:	c1 f3       	breq	.-16     	; 0x2bf4 <ldexp+0x76>
    2c04:	ae f3       	brts	.-22     	; 0x2bf0 <ldexp+0x72>
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	1f 93       	push	r17
    2c0c:	0f 93       	push	r16
    2c0e:	ff 92       	push	r15
    2c10:	c9 2f       	mov	r28, r25
    2c12:	dd 27       	eor	r29, r29
    2c14:	88 23       	and	r24, r24
    2c16:	2a f0       	brmi	.+10     	; 0x2c22 <log+0x28>
    2c18:	21 97       	sbiw	r28, 0x01	; 1
    2c1a:	66 0f       	add	r22, r22
    2c1c:	77 1f       	adc	r23, r23
    2c1e:	88 1f       	adc	r24, r24
    2c20:	da f7       	brpl	.-10     	; 0x2c18 <log+0x1e>
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f eb       	ldi	r21, 0xBF	; 191
    2c2a:	9f e3       	ldi	r25, 0x3F	; 63
    2c2c:	88 39       	cpi	r24, 0x98	; 152
    2c2e:	20 f0       	brcs	.+8      	; 0x2c38 <log+0x3e>
    2c30:	80 3e       	cpi	r24, 0xE0	; 224
    2c32:	38 f0       	brcs	.+14     	; 0x2c42 <log+0x48>
    2c34:	21 96       	adiw	r28, 0x01	; 1
    2c36:	8f 77       	andi	r24, 0x7F	; 127
    2c38:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__addsf3>
    2c3c:	ec e0       	ldi	r30, 0x0C	; 12
    2c3e:	f1 e0       	ldi	r31, 0x01	; 1
    2c40:	04 c0       	rjmp	.+8      	; 0x2c4a <log+0x50>
    2c42:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__addsf3>
    2c46:	e9 e3       	ldi	r30, 0x39	; 57
    2c48:	f1 e0       	ldi	r31, 0x01	; 1
    2c4a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__fp_powser>
    2c4e:	8b 01       	movw	r16, r22
    2c50:	be 01       	movw	r22, r28
    2c52:	ec 01       	movw	r28, r24
    2c54:	fb 2e       	mov	r15, r27
    2c56:	6f 57       	subi	r22, 0x7F	; 127
    2c58:	71 09       	sbc	r23, r1
    2c5a:	75 95       	asr	r23
    2c5c:	77 1f       	adc	r23, r23
    2c5e:	88 0b       	sbc	r24, r24
    2c60:	99 0b       	sbc	r25, r25
    2c62:	0e 94 85 13 	call	0x270a	; 0x270a <__floatsisf>
    2c66:	28 e1       	ldi	r18, 0x18	; 24
    2c68:	32 e7       	ldi	r19, 0x72	; 114
    2c6a:	41 e3       	ldi	r20, 0x31	; 49
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 4d 14 	call	0x289a	; 0x289a <__mulsf3x>
    2c72:	af 2d       	mov	r26, r15
    2c74:	98 01       	movw	r18, r16
    2c76:	ae 01       	movw	r20, r28
    2c78:	ff 90       	pop	r15
    2c7a:	0f 91       	pop	r16
    2c7c:	1f 91       	pop	r17
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__addsf3x>
    2c86:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_round>

00002c8a <modf>:
    2c8a:	fa 01       	movw	r30, r20
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	aa 0f       	add	r26, r26
    2c90:	bb 1f       	adc	r27, r27
    2c92:	9b 01       	movw	r18, r22
    2c94:	ac 01       	movw	r20, r24
    2c96:	bf 57       	subi	r27, 0x7F	; 127
    2c98:	28 f4       	brcc	.+10     	; 0x2ca4 <modf+0x1a>
    2c9a:	22 27       	eor	r18, r18
    2c9c:	33 27       	eor	r19, r19
    2c9e:	44 27       	eor	r20, r20
    2ca0:	50 78       	andi	r21, 0x80	; 128
    2ca2:	20 c0       	rjmp	.+64     	; 0x2ce4 <modf+0x5a>
    2ca4:	b7 51       	subi	r27, 0x17	; 23
    2ca6:	90 f4       	brcc	.+36     	; 0x2ccc <modf+0x42>
    2ca8:	ab 2f       	mov	r26, r27
    2caa:	00 24       	eor	r0, r0
    2cac:	46 95       	lsr	r20
    2cae:	37 95       	ror	r19
    2cb0:	27 95       	ror	r18
    2cb2:	01 1c       	adc	r0, r1
    2cb4:	a3 95       	inc	r26
    2cb6:	d2 f3       	brmi	.-12     	; 0x2cac <modf+0x22>
    2cb8:	00 20       	and	r0, r0
    2cba:	71 f0       	breq	.+28     	; 0x2cd8 <modf+0x4e>
    2cbc:	22 0f       	add	r18, r18
    2cbe:	33 1f       	adc	r19, r19
    2cc0:	44 1f       	adc	r20, r20
    2cc2:	b3 95       	inc	r27
    2cc4:	da f3       	brmi	.-10     	; 0x2cbc <modf+0x32>
    2cc6:	0e d0       	rcall	.+28     	; 0x2ce4 <modf+0x5a>
    2cc8:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__subsf3>
    2ccc:	61 30       	cpi	r22, 0x01	; 1
    2cce:	71 05       	cpc	r23, r1
    2cd0:	a0 e8       	ldi	r26, 0x80	; 128
    2cd2:	8a 07       	cpc	r24, r26
    2cd4:	b9 46       	sbci	r27, 0x69	; 105
    2cd6:	30 f4       	brcc	.+12     	; 0x2ce4 <modf+0x5a>
    2cd8:	9b 01       	movw	r18, r22
    2cda:	ac 01       	movw	r20, r24
    2cdc:	66 27       	eor	r22, r22
    2cde:	77 27       	eor	r23, r23
    2ce0:	88 27       	eor	r24, r24
    2ce2:	90 78       	andi	r25, 0x80	; 128
    2ce4:	30 96       	adiw	r30, 0x00	; 0
    2ce6:	21 f0       	breq	.+8      	; 0x2cf0 <modf+0x66>
    2ce8:	20 83       	st	Z, r18
    2cea:	31 83       	std	Z+1, r19	; 0x01
    2cec:	42 83       	std	Z+2, r20	; 0x02
    2cee:	53 83       	std	Z+3, r21	; 0x03
    2cf0:	08 95       	ret

00002cf2 <__divsf3>:
    2cf2:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__divsf3x>
    2cf6:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__fp_round>
    2cfa:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__fp_pscB>
    2cfe:	58 f0       	brcs	.+22     	; 0x2d16 <__divsf3+0x24>
    2d00:	0e 94 ed 13 	call	0x27da	; 0x27da <__fp_pscA>
    2d04:	40 f0       	brcs	.+16     	; 0x2d16 <__divsf3+0x24>
    2d06:	29 f4       	brne	.+10     	; 0x2d12 <__divsf3+0x20>
    2d08:	5f 3f       	cpi	r21, 0xFF	; 255
    2d0a:	29 f0       	breq	.+10     	; 0x2d16 <__divsf3+0x24>
    2d0c:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_inf>
    2d10:	51 11       	cpse	r21, r1
    2d12:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__fp_szero>
    2d16:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__fp_nan>

00002d1a <__divsf3x>:
    2d1a:	0e 94 0c 14 	call	0x2818	; 0x2818 <__fp_split3>
    2d1e:	68 f3       	brcs	.-38     	; 0x2cfa <__divsf3+0x8>

00002d20 <__divsf3_pse>:
    2d20:	99 23       	and	r25, r25
    2d22:	b1 f3       	breq	.-20     	; 0x2d10 <__divsf3+0x1e>
    2d24:	55 23       	and	r21, r21
    2d26:	91 f3       	breq	.-28     	; 0x2d0c <__divsf3+0x1a>
    2d28:	95 1b       	sub	r25, r21
    2d2a:	55 0b       	sbc	r21, r21
    2d2c:	bb 27       	eor	r27, r27
    2d2e:	aa 27       	eor	r26, r26
    2d30:	62 17       	cp	r22, r18
    2d32:	73 07       	cpc	r23, r19
    2d34:	84 07       	cpc	r24, r20
    2d36:	38 f0       	brcs	.+14     	; 0x2d46 <__divsf3_pse+0x26>
    2d38:	9f 5f       	subi	r25, 0xFF	; 255
    2d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3c:	22 0f       	add	r18, r18
    2d3e:	33 1f       	adc	r19, r19
    2d40:	44 1f       	adc	r20, r20
    2d42:	aa 1f       	adc	r26, r26
    2d44:	a9 f3       	breq	.-22     	; 0x2d30 <__divsf3_pse+0x10>
    2d46:	35 d0       	rcall	.+106    	; 0x2db2 <__divsf3_pse+0x92>
    2d48:	0e 2e       	mov	r0, r30
    2d4a:	3a f0       	brmi	.+14     	; 0x2d5a <__divsf3_pse+0x3a>
    2d4c:	e0 e8       	ldi	r30, 0x80	; 128
    2d4e:	32 d0       	rcall	.+100    	; 0x2db4 <__divsf3_pse+0x94>
    2d50:	91 50       	subi	r25, 0x01	; 1
    2d52:	50 40       	sbci	r21, 0x00	; 0
    2d54:	e6 95       	lsr	r30
    2d56:	00 1c       	adc	r0, r0
    2d58:	ca f7       	brpl	.-14     	; 0x2d4c <__divsf3_pse+0x2c>
    2d5a:	2b d0       	rcall	.+86     	; 0x2db2 <__divsf3_pse+0x92>
    2d5c:	fe 2f       	mov	r31, r30
    2d5e:	29 d0       	rcall	.+82     	; 0x2db2 <__divsf3_pse+0x92>
    2d60:	66 0f       	add	r22, r22
    2d62:	77 1f       	adc	r23, r23
    2d64:	88 1f       	adc	r24, r24
    2d66:	bb 1f       	adc	r27, r27
    2d68:	26 17       	cp	r18, r22
    2d6a:	37 07       	cpc	r19, r23
    2d6c:	48 07       	cpc	r20, r24
    2d6e:	ab 07       	cpc	r26, r27
    2d70:	b0 e8       	ldi	r27, 0x80	; 128
    2d72:	09 f0       	breq	.+2      	; 0x2d76 <__divsf3_pse+0x56>
    2d74:	bb 0b       	sbc	r27, r27
    2d76:	80 2d       	mov	r24, r0
    2d78:	bf 01       	movw	r22, r30
    2d7a:	ff 27       	eor	r31, r31
    2d7c:	93 58       	subi	r25, 0x83	; 131
    2d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d80:	3a f0       	brmi	.+14     	; 0x2d90 <__divsf3_pse+0x70>
    2d82:	9e 3f       	cpi	r25, 0xFE	; 254
    2d84:	51 05       	cpc	r21, r1
    2d86:	78 f0       	brcs	.+30     	; 0x2da6 <__divsf3_pse+0x86>
    2d88:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_inf>
    2d8c:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__fp_szero>
    2d90:	5f 3f       	cpi	r21, 0xFF	; 255
    2d92:	e4 f3       	brlt	.-8      	; 0x2d8c <__divsf3_pse+0x6c>
    2d94:	98 3e       	cpi	r25, 0xE8	; 232
    2d96:	d4 f3       	brlt	.-12     	; 0x2d8c <__divsf3_pse+0x6c>
    2d98:	86 95       	lsr	r24
    2d9a:	77 95       	ror	r23
    2d9c:	67 95       	ror	r22
    2d9e:	b7 95       	ror	r27
    2da0:	f7 95       	ror	r31
    2da2:	9f 5f       	subi	r25, 0xFF	; 255
    2da4:	c9 f7       	brne	.-14     	; 0x2d98 <__divsf3_pse+0x78>
    2da6:	88 0f       	add	r24, r24
    2da8:	91 1d       	adc	r25, r1
    2daa:	96 95       	lsr	r25
    2dac:	87 95       	ror	r24
    2dae:	97 f9       	bld	r25, 7
    2db0:	08 95       	ret
    2db2:	e1 e0       	ldi	r30, 0x01	; 1
    2db4:	66 0f       	add	r22, r22
    2db6:	77 1f       	adc	r23, r23
    2db8:	88 1f       	adc	r24, r24
    2dba:	bb 1f       	adc	r27, r27
    2dbc:	62 17       	cp	r22, r18
    2dbe:	73 07       	cpc	r23, r19
    2dc0:	84 07       	cpc	r24, r20
    2dc2:	ba 07       	cpc	r27, r26
    2dc4:	20 f0       	brcs	.+8      	; 0x2dce <__divsf3_pse+0xae>
    2dc6:	62 1b       	sub	r22, r18
    2dc8:	73 0b       	sbc	r23, r19
    2dca:	84 0b       	sbc	r24, r20
    2dcc:	ba 0b       	sbc	r27, r26
    2dce:	ee 1f       	adc	r30, r30
    2dd0:	88 f7       	brcc	.-30     	; 0x2db4 <__divsf3_pse+0x94>
    2dd2:	e0 95       	com	r30
    2dd4:	08 95       	ret

00002dd6 <_exit>:
    2dd6:	f8 94       	cli

00002dd8 <__stop_program>:
    2dd8:	ff cf       	rjmp	.-2      	; 0x2dd8 <__stop_program>
